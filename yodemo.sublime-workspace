{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"border",
				"border: "
			],
			[
				"hover",
				"hoveredLineNo"
			],
			[
				"margi",
				"margin-top: "
			],
			[
				"padding",
				"padding-bottom: "
			],
			[
				"margin-",
				"margin-bottom: "
			],
			[
				"moveNode",
				"moveNodeAfter"
			],
			[
				"target",
				"targetAfterNode"
			],
			[
				"getPre",
				"getPreviousNode"
			],
			[
				"getN",
				"getNextNode"
			],
			[
				"getnex",
				"getNextNode"
			],
			[
				"_update",
				"_updateValidDropZones"
			],
			[
				"dragged",
				"draggedLineNo"
			],
			[
				"afterL",
				"afterLineNo"
			],
			[
				"dropZone",
				"dropZoneSelected"
			],
			[
				"draggline",
				"draggingLineOriginal"
			],
			[
				"casper",
				"casperJsUserAgentString"
			],
			[
				"after",
				"afterLineNo"
			],
			[
				"active",
				"activeNode"
			],
			[
				"activeN",
				"activeNode"
			],
			[
				"acti",
				"activeNode"
			],
			[
				"allowed",
				"allowedDrop"
			],
			[
				"dragst",
				"dragStarted"
			],
			[
				"srcL",
				"srcLineNo"
			],
			[
				"addSib",
				"addSiblingPoi"
			],
			[
				"addChil",
				"addChildPoi"
			],
			[
				"_moveN",
				"_moveNodeBefore"
			],
			[
				"_move",
				"_moveNodeBefore"
			],
			[
				"tokens",
				"tokensAreEqual"
			],
			[
				"has",
				"hasChildren"
			],
			[
				"get",
				"getPreviousSibling"
			],
			[
				"add",
				"addSiblingCity"
			],
			[
				"adds",
				"addSiblingCity"
			],
			[
				"clic",
				"clickLineWithText"
			],
			[
				"getNext",
				"getNextNode"
			],
			[
				"tokne",
				"tokenTexts"
			],
			[
				"attribute",
				"attributeNo"
			],
			[
				"asser",
				"assertSelectorDoesntHaveText"
			],
			[
				"assert",
				"assertSelectorHasText"
			],
			[
				"targetno",
				"targetTokenNo"
			],
			[
				"asserte",
				"assertSelectorHasText"
			],
			[
				"old",
				"oldValue"
			],
			[
				"thum",
				"thumb_url"
			],
			[
				"gets",
				"getSiblingIndex"
			],
			[
				"getSibl",
				"getSiblingIndex"
			],
			[
				"getsi",
				"getSiblings"
			],
			[
				"getSb",
				"getSiblings"
			],
			[
				"getSib",
				"getSiblings"
			],
			[
				"getSiblin",
				"getSiblingIndex"
			],
			[
				"getSi",
				"getSiblingIndex"
			],
			[
				"getSbi",
				"getSiblingIndex"
			],
			[
				"chil",
				"children"
			],
			[
				"targetNo",
				"targetNode"
			],
			[
				"onNode",
				"onNodeRemoved"
			],
			[
				"cursor",
				"cursorLineNo"
			],
			[
				"mar",
				"margin: "
			],
			[
				"bacgr",
				"background: "
			],
			[
				"line",
				"lineAlreadyHasPlaceToken"
			],
			[
				"token",
				"tokenTfml"
			],
			[
				"toke",
				"tokenTfml"
			],
			[
				"nodeTo",
				"nodeToReturnTo"
			],
			[
				"paste",
				"pastelBlue"
			],
			[
				"onCom",
				"onCommandD"
			],
			[
				"addchild",
				"addChildPoi"
			],
			[
				"_onke",
				"_onKeyUp"
			],
			[
				"inline",
				"inline-block"
			],
			[
				"sour",
				"sourceCountryNodeId"
			],
			[
				"source",
				"sourceCountryLineNo"
			],
			[
				"child",
				"childNode"
			],
			[
				"Stati",
				"StaticPagesController"
			],
			[
				"previous",
				"previousNode"
			],
			[
				"path",
				"pathToRoot"
			],
			[
				"mini",
				"miniPlace"
			],
			[
				"itiner",
				"itinerary"
			],
			[
				"Toke",
				"tokenGrid"
			],
			[
				"analysis",
				"getAnalysisAt"
			],
			[
				"fero",
				"feroTokenType"
			],
			[
				"getcurr",
				"getCurrentTokenColumn"
			],
			[
				"city",
				"cityItinerary"
			],
			[
				"itinerar",
				"itinerary"
			],
			[
				"wait",
				"waitForPlaceDbUpdate"
			],
			[
				"local",
				"local_record"
			],
			[
				"transf",
				"transformed_record"
			],
			[
				"bou",
				"boundingCoordinates"
			],
			[
				"MAX",
				"MAX_LON"
			],
			[
				"MIN",
				"MIN_LON"
			],
			[
				"from",
				"fromDegrees"
			],
			[
				"deg",
				"degLat"
			],
			[
				"fsq_venu",
				"fsq_venuedetails_json_response"
			],
			[
				"fours",
				"foursquare_explore"
			],
			[
				"raw",
				"raw_record_json"
			],
			[
				"inj",
				"inject_details"
			],
			[
				"place",
				"placeJSON"
			],
			[
				"respon",
				"respond_to"
			],
			[
				"min",
				"minivenues"
			],
			[
				"poi",
				"poi_records"
			],
			[
				"search",
				"search_term"
			],
			[
				"fallbac",
				"fallbackRequest"
			],
			[
				"palce",
				"placeJSON"
			],
			[
				"master",
				"master_placedb_url"
			],
			[
				"autoc",
				"autocomplete_suggestions"
			],
			[
				"json",
				"json_city_record"
			],
			[
				"geo",
				"GEONAMES_FCL_POPULATEDPLACE"
			],
			[
				"geon",
				"geonames_place_record"
			],
			[
				"geonames",
				"geonames_place_record"
			],
			[
				"geona",
				"geonames_suggested_cities"
			],
			[
				"sug",
				"suggested_cities"
			],
			[
				"extra",
				"extract_file"
			],
			[
				"country",
				"country_code_txt_file"
			],
			[
				"coun",
				"country_code_txt_file"
			],
			[
				"fallb",
				"fallbackRequest"
			],
			[
				"suggest",
				"suggested_places"
			],
			[
				"searc",
				"search_geonames_url"
			],
			[
				"filtered",
				"filteredSuggestion"
			],
			[
				"sear",
				"search_term"
			],
			[
				"Notes",
				"NotesController"
			],
			[
				"rej",
				"reject"
			],
			[
				"to",
				"to_filepath"
			],
			[
				"file",
				"file_name"
			],
			[
				"at",
				"attempt_count"
			],
			[
				"max",
				"max_attempts"
			],
			[
				"BAT",
				"GEONAMES_BATCH_SIZE"
			],
			[
				"on",
				"on_downloaded"
			],
			[
				"couc",
				"couchdb_scheme"
			],
			[
				"cou",
				"couchdb_url"
			],
			[
				"user",
				"couchdb_username"
			],
			[
				"couch",
				"couchdb_password"
			],
			[
				"wikiped",
				"wikipedia_article_lu"
			],
			[
				"gui",
				"guides_show"
			]
		]
	},
	"buffers":
	[
		{
			"file": "Gruntfile.js",
			"settings":
			{
				"buffer_size": 11342,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 20674 files for \"loadNpmTasks\"\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/package.json:\n   40:   \"readme\": \"# Autoprefixer\\n\\n<img align=\\\"right\\\" width=\\\"94\\\" src=\\\"http://ai.github.io/autoprefixer/logo.svg\\\" title=\\\"Autoprefixer logo by Anton Lovchikov\\\">\\n\\nParse CSS and add vendor prefixes to CSS rules using values\\nfrom [Can I Use](http://caniuse.com/).\\n\\nWrite your CSS rules without vendor prefixes (in fact, forget about them\\nentirely):\\n\\n```css\\n:fullscreen a {\\n    transition: transform 1s\\n}\\n```\\n\\nProcess your CSS by Autoprefixer:\\n\\n```js\\nvar prefixed = autoprefixer.process(css).css;\\n```\\n\\nIt will use the data on current browser popularity and properties support\\nto apply prefixes for you:\\n\\n```css\\n:-webkit-full-screen a {\\n    -webkit-transition: -webkit-transform 1s;\\n    transition: transform 1s\\n}\\n:-moz-full-screen a {\\n    transition: transform 1s\\n}\\n:-ms-fullscreen a {\\n    transition: transform 1s\\n}\\n:fullscreen a {\\n    -webkit-transition: -webkit-transform 1s;\\n    transition: transform 1s\\n}\\n```\\n\\nYou can play with your CSS in the [interactive demo] of Autoprefixer.\\n\\nTwitter account for news and releases: [@autoprefixer].\\n\\nSponsored by [Evil Martians]. Based on [PostCSS] framework.\\n\\n[interactive demo]: http://jsfiddle.net/simevidas/udyTs/show/light/\\n[@autoprefixer]:    https://twitter.com/autoprefixer\\n[Evil Martians]:    http://evilmartians.com/\\n[PostCSS]:          https://github.com/ai/postcss\\n\\n## Features\\n\\n### Forget about prefixes\\n\\nThe best tool is a tool you can't see and one that does the work for you.\\nThis is the main idea behind Autoprefixer.\\n\\nAutoprefixer interface is simple: just forget about vendor prefixes\\nand write normal CSS according to the latest W3C specs. You don’t need\\na special language (like Sass) or special mixins.\\n\\nBecause Autoprefixer is a postprocessor for CSS,\\nyou can also use it with preprocessors, such as Sass, Stylus or LESS.\\n\\n### Actual data from Can I Use\\n\\nAutoprefixer uses the most recent data from [Can I Use](http://caniuse.com/),\\nunderstands which browsers are actual and popular and adds only the necessary\\nvendor prefixes.\\n\\nIt also cleans your CSS from old prefixes (like prefixed `border-radius`,\\nproduced by many CSS libraries):\\n\\n```css\\na {\\n    -webkit-border-radius: 5px;\\n    border-radius: 5px\\n}\\n```\\n\\ncompiles to:\\n\\n```css\\na {\\n    border-radius: 5px\\n}\\n```\\n\\nNote, that Autoprefixer doesn’t load Can I Use data every time. It takes it from\\n[caniuse-db](https://www.npmjs.org/package/caniuse-db) dependency.\\nSo, if you use Autoprefixer from `npm`, try to keep your `autoprefixer`\\nand `caniuse-db` packages fresh to have only actual prefixes in your CSS.\\n\\n### Flexbox, Gradients, etc.\\n\\nFlexbox or gradients have different syntaxes in different browsers\\n(sometimes you need to recalculate angles, sometimes you need 2 old properties\\ninstead of new one), but Autoprefixer hides this from you.\\n\\nJust code by latest W3C specs and Autoprefixer will produce the code\\nfor old browsers:\\n\\n```css\\na {\\n    display: flex;\\n}\\n```\\n\\ncompiles to:\\n\\n```css\\na {\\n    display: -webkit-box;\\n    display: -webkit-flex;\\n    display: -moz-box;\\n    display: -ms-flexbox;\\n    display: flex\\n}\\n```\\n\\nAutoprefixer has [22 special hacks] to fix browser’s differences.\\n\\n[22 special hacks]: https://github.com/ai/autoprefixer/tree/master/lib/hacks\\n\\n### Fast\\n\\nAutoprefixer is about several times faster than Compass and Stylus.\\n\\nOn a Core i7 with 10 GB of RAM and SSD, benchmark with GitHub styles is:\\n\\n```\\n~/Dev/autoprefixer$ ./node_modules/.bin/cake bench\\nLoad GitHub styles\\nAutoprefixer: 466 ms\\nCompass:      2828 ms (6.1 times slower)\\nStylus:       1491 ms (3.2 times slower)\\n```\\n\\nUnlike [-prefix-free](http://leaverou.github.io/prefixfree/), Autoprefixer\\ncompiles CSS once on deploy and doesn’t hurt client-side performance.\\n\\n## Browsers\\n\\nYou can specify the browsers you want to target in your project:\\n\\n```js\\nautoprefixer(\\\"last 1 version\\\", \\\"> 1%\\\", \\\"Explorer 7\\\").process(css).css;\\n```\\n\\n* `last 2 versions` is last versions for each browser. Like “last 2 versions”\\n  [strategy](http://support.google.com/a/bin/answer.py?answer=33864) in\\n  Google.\\n* `last 2 Chrome versions` is last versions of the specified browser.\\n* `> 5%` is browser versions, selected by global usage statistics.\\n* `Firefox > 20` is Firefox versions newer than 20.\\n* `Firefox >= 20` is Firefox version 20 or newer.\\n* `Firefox ESR` is the latest [Firefox ESR] version.\\n* `none` don’t set any browsers to clean CSS from any vendor prefixes.\\n* `ios 7` to set browser version directly.\\n\\nBlackberry and stock Android browsers will not be used in `last n versions`.\\nYou can add them by name:\\n\\n```js\\nautoprefixer(\\\"last 1 version\\\", \\\"BlackBerry 10\\\", \\\"Android 4\\\").process(css).css;\\n```\\n\\nBrowsers names (case insensitive):\\n* `Android` for old Android stock browser.\\n* `BlackBerry` or `bb` for Blackberry browser.\\n* `Chrome` for Google Chrome.\\n* `Firefox` or `ff` for Mozilla Firefox.\\n* `Explorer` or `ie` for Internet Explorer.\\n* `iOS` for iOS Safari.\\n* `Opera` for Opera.\\n* `Safari` for desktop Safari.\\n\\nBy default, Autoprefixer uses `> 1%, last 2 versions, Firefox ESR, Opera 12.1`:\\n* Latest [Firefox ESR] is a 24 version.\\n* Opera 12.1 will be in list until Opera supports non-Blink 12.x branch.\\n\\n[Firefox ESR]: http://www.mozilla.org/en/firefox/organizations/faq/\\n\\n## Source Map\\n\\nYou must set input and output CSS files paths (by `from` and `to` options)\\nto generate a correct map.\\n\\nAutoprefixer can modify previous source maps (for example, from Sass):\\nit will autodetect a previous map if it is listed in an annotation comment or\\nin a file near the input CSS. You can disable source map with `map: false` or\\nset the previous source map content manually to `map` option (as a string or a\\nJS object).\\n\\n```js\\nvar result = autoprefixer.process(css, {\\n    map:   fs.readFileSync('main.sass.css.map'),\\n    from: 'main.sass.css',\\n    to:   'main.min.css'\\n});\\n\\nresult.css //=> CSS with source map annotation comment\\nresult.map //=> Source map from main.sass to main.min.css\\n\\nfs.writeFileSync('main.min.css.map', result.map);\\n```\\n\\nAutoprefixer supports inline source maps too. If input CSS contains annotation\\nfrom the previous step with map in `data:uri`, Autoprefixer will update the\\nsource map with prefixes changes and inine the new map back into the output CSS.\\n\\nYou can read more about source map options in\\n[PostCSS documentation](https://github.com/ai/postcss#source-map-1).\\n\\n## Visual Cascade\\n\\nAutoprefixer can change CSS indentation to create a nice visual cascade\\nof prefixes. You need to send `cascade: true` option to processor constructor:\\n\\n```js\\nautoprefixer(\\\"> 1 %\\\", \\\"last 2 version\\\", { cascade: true }).process(css).css\\n```\\n\\nand, if CSS will be uncompressed, output would be like:\\n\\n```css\\na {\\n    -webkit-box-sizing: border-box;\\n       -moz-box-sizing: border-box;\\n            box-sizing: border-box\\n}\\n```\\n\\n## Debug\\n\\nYou can check which browsers are selected and which properties will be prefixed:\\n\\n```js\\ninfo = autoprefixer(\\\"last 1 version\\\").info();\\nconsole.log(info);\\n```\\n\\nOr by CLI command:\\n\\n```sh\\nautoprefixer -i\\n```\\n\\n## FAQ\\n\\n### Does it add polyfills for old browsers?\\n\\nNo. Autoprefixer only adds prefixes, not polyfills. There are two reasons:\\n\\n1. Prefixes and polyfills are very different and need a different API.\\n   Two separate libraries would be much better.\\n2. Most of IE polyfills are very bad for client perfomance. They use slow hacks\\n   and old IEs is mostly used on old hardware. Most CSS3 features used only\\n   for styling should be ignored in old IEs as is recommended for\\n   Graceful Degradation.\\n\\n### Why don’t gradients work in Firefox?\\n\\nCheck that you use correct [direction syntax]. For example, you should use\\n`to bottom` instead of `top`:\\n\\n```css\\na {\\n  background: linear-gradient(to bottom, white, black)\\n}\\n```\\n\\nUnfortunately, unprefixed gradients use a different direction syntax and most\\nexamples you find use an old gradient syntax, so be careful and use always the\\nlatest W3C specs with Autoprefixer.\\n\\n[direction syntax]: https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\\n\\n### Why doesn’t Autoprefixer add prefixes to `border-radius`?\\n\\nDevelopers are often surprised by how few prefixes are required today.\\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\\nrequired on [Can I Use](http://caniuse.com/).\\n\\nIf a prefix is required, but Autoprefixer doesn’t add it or adds it\\nincorrectly, please\\n[report an issue](https://github.com/ai/autoprefixer/issues/new)\\nand include your source CSS and expected output.\\n\\n### Why doesn’t Autoprefixer support `appearance`?\\n\\nUnlike `transition`, the `appearance` property is not a part of\\nany specification. So there is no `appearance`, only `-moz-appearance`\\nand `-webkit-appearance`. Quote from [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance):\\n\\n> Do not use this property on Web sites: not only is it non-standard, but its\\n> behavior changes from one browser to another. Even the keyword `none` does not\\n> have the same behavior on each form element across different browsers, and\\n> some do not support it at all.\\n\\n### Why does Autoprefixer use CoffeeScript?\\n\\nJavaScript is very popular, but this is the same reason why its syntax does not\\nevolve. There is an entire Internet with a lot of legacy code which should\\nbe supported by browsers. If developers add an inappropriate feature then\\nit can’t be removed in then next versions but must be supported for a very\\nlong time. This is very bad for innovation. To create new, we need to experiment\\nand to choose.\\n\\nAs a result JavaScript doesn’t have even basic syntax features, which are\\npresent in other languages like Ruby or Python. There are no string\\ninterpolation, short lambda syntax, foreach statement for arrays, string and\\narrays slicing, etc. This features are really important and they will be in\\nECMAScript 6 (first update of JS syntax after 15 years), but this\\nnew specification is still not released and, of course, we must wait until\\nall browsers support it.\\n\\nWith JavaScript preprocessors like CoffeeScript or TypeScript we can bring\\ninnovation back. We can add a new operator and use it right now, without waiting\\nfor support in all browsers.\\n\\nAutoprefixer was written in pure JavaScript before. But CoffeeScript made\\nAutoprefixer code much cleaner and more readable. Often, 2 lines of code\\nbecame 1.\\n\\nDon’t be afraid of CoffeeScript. It is just a new syntax, not another language\\n(like ClojureScript). You can open [examples on CoffeeScript.org] and start\\nto code. After a week your eyes will adjust and you will see that CoffeeScript\\nis cleaner and more readable.\\n\\nSituation with CoffeeScript and JavaScript is absolutely the same as with\\nCSS preprocessors and postprocessors. How can we develop a CSS postprocessor\\nand avoid using a JS preproccesor :).\\n\\n[examples on CoffeeScript.org]: http://coffeescript.org/\\n\\n## Usage\\n\\n### Grunt\\n\\nYou can use the\\n[grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\\nplugin for Grunt. Install the npm package and add it to Gruntfile:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-autoprefixer');\\n```\\n\\n### Gulp\\n\\nYou can use [gulp-autoprefixer](https://github.com/Metrime/gulp-autoprefixer)\\nto use Autoprefixer in your Gulp build configuration.\\n\\n```js\\nvar prefix = require('gulp-autoprefixer');\\ngulp.src('./css/*.css')\\n  .pipe(prefix([\\\"last 1 version\\\", \\\"> 1%\\\", \\\"ie 8\\\", \\\"ie 7\\\"], { cascade: true }))\\n  .pipe(gulp.dest('./dist/'));\\n```\\n\\n### Brunch\\n\\nYou can use the\\n[autoprefixer-brunch](https://github.com/lydell/autoprefixer-brunch)\\nplugin for [Brunch](http://brunch.io/).\\n\\n### Compass\\n\\nIf you use Compass binary to compile your styles, you can easily integrate\\nAutoprefixer with it. Install `autoprefixer-rails` gem:\\n\\n```\\ngem install autoprefixer-rails\\n```\\n\\nand add post-compile hook to `config.rb`:\\n\\n```ruby\\nrequire 'autoprefixer-rails'\\n\\non_stylesheet_saved do |file|\\n  css = File.read(file)\\n  File.open(file, 'w') do |io|\\n    io << AutoprefixerRails.process(css)\\n  end\\nend\\n```\\n\\nYou can set the browsers option as the second argument in `process` method:\\n\\n```ruby\\nio << AutoprefixerRails.process(css, browsers: [\\\"last 1 version\\\", \\\"> 1%\\\"])\\n```\\n\\n### Stylus\\n\\nIf you use Stylus CLI, you can add Autoprefixer by\\n[autoprefixer-stylus](https://github.com/jenius/autoprefixer-stylus) plugin.\\n\\nJust install npm package and use it in `-u` option:\\n\\n```\\nstylus -u autoprefixer-stylus -w file.styl\\n```\\n\\n### Ruby on Rails\\n\\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\\nto `Gemfile` and write CSS in a usual way:\\n\\n```ruby\\ngem \\\"autoprefixer-rails\\\"\\n```\\n\\n### Ruby\\n\\nYou can integrate Autoprefixer into your Sprockets environment\\nby `autoprefixer-rails` gem:\\n\\n```ruby\\nAutoprefixerRails.install(sprockets_env)\\n```\\n\\nor process CSS from plain Ruby:\\n\\n```ruby\\nprefixed = AutoprefixerRails.process(css)\\n```\\n\\n### CodeKit\\n\\nCodeKit, since the 2.0 version, contains Autoprefixer. In the After Compiling\\nsection, there is a checkbox to enable Autoprefixer.\\nRead [CodeKit docs](https://incident57.com/codekit/help.html#autoprefixer)\\nfor more inforamtion.\\n\\n### Prepros\\n\\nIf you want to build your assets with a GUI, try\\n[Prepros](http://alphapixels.com/prepros/). Just set “Auto Prefix CSS”\\n[checkbox](https://f.cloud.github.com/assets/3478693/930798/faa29892-0016-11e3-8901-87850de7aed2.jpg)\\nin right panel.\\n\\n<img src=\\\"http://alphapixels.com/prepros/static/img/prepros.jpg\\\" width=\\\"550\\\" height=\\\"340\\\" />\\n\\n### Broccoli\\n\\nYou can use the\\n[broccoli-autoprefixer](https://github.com/sindresorhus/broccoli-autoprefixer)\\nplugin for [Broccoli](https://github.com/joliss/broccoli).\\n\\n### Mincer\\n\\nTo use Autoprefixer in [Mincer](https://github.com/nodeca/mincer),\\ninstall `autoprefixer` npm package and enable it:\\n\\n```js\\nenvironment.enable('autoprefixer');\\n```\\n\\n### Middleman\\n\\nAdd [middleman-autoprefixer](https://github.com/porada/middleman-autoprefixer)\\ngem to `Gemfile`:\\n\\n```ruby\\ngem \\\"middleman-autoprefixer\\\"\\n```\\n\\nand activate the extension in your project’s `config.rb`:\\n\\n```ruby\\nactivate :autoprefixer\\n```\\n\\n### Node.js\\n\\nUse `autoprefixer` npm package:\\n\\n```js\\nvar autoprefixer = require('autoprefixer');\\nvar css          = 'a { transition: transform 1s }';\\nvar prefixed     = autoprefixer.process(css).css;\\n```\\n\\n### PHP\\n\\nYou can use Autoprefixer in PHP by\\n[autoprefixer-php](https://github.com/vladkens/autoprefixer-php) library:\\n\\n\\n```php\\n$autoprefixer = new Autoprefixer();\\n$css          = 'a { transition: transform 1s }';\\n$prefixed     = $autoprefixer->compile($css);\\n```\\n\\n### .NET\\n\\nYou can use Autoprefixer from .NET and BundleTransformer with the\\n[Autoprefixer](https://github.com/digitalcreations/autoprefixer) NuGet package.\\n\\n### JavaScript\\n\\nYou can use Autoprefixer in the browser or as a non-Node.js runtime\\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\\n\\n### PostCSS\\n\\nAutoprefixer can be also used as a [PostCSS](https://github.com/ai/postcss)\\nprocessor, so you can combine it with other processors and parse CSS only once:\\n\\n```js\\npostcss().\\n    use( autoprefixer(['> 1%', 'opera 12.5']).postcss ).\\n    use( compressor ).\\n    process(css);\\n```\\n\\n### Sublime Text\\n\\nYou can process your styles directly in Sublime Text with the\\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\\nplugin.\\n\\n### Brackets\\n\\nStyles can processed automatically in Brackets using the\\n[brackets-autoprefixer](https://github.com/mikaeljorhult/brackets-autoprefixer)\\nextension.\\n\\n### Atom Editor\\n\\nYou can process your styles directly in Atom with the\\n[atom-autoprefixer](https://github.com/sindresorhus/atom-autoprefixer)\\npackage.\\n\\n### Others\\n\\nYou can use the `autoprefixer` binary to process CSS files using\\nany assets manager:\\n\\n```\\nsudo npm install --global autoprefixer\\nautoprefixer *.css\\n```\\n\\nSee `autoprefixer -h` for help.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/README.md:\n  349: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/package.json:\n   43:   \"readme\": \"# grunt-autoprefixer\\n[![Build Status](https://travis-ci.org/nDmitry/grunt-autoprefixer.png?branch=master)](https://travis-ci.org/nDmitry/grunt-autoprefixer) \\n[![Dependency Status](https://david-dm.org/nDmitry/grunt-autoprefixer.png)](https://david-dm.org/nDmitry/grunt-autoprefixer)\\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> [Autoprefixer](https://github.com/ai/autoprefixer) parses CSS and adds vendor-prefixed CSS properties using the [Can I Use](http://caniuse.com/) database.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-autoprefixer --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-autoprefixer');\\n```\\n\\n## The \\\"autoprefixer\\\" task\\n\\n### Overview\\nIn your project's Gruntfile, add a section named `autoprefixer` to the data object passed into `grunt.initConfig()`.\\n\\n```js\\ngrunt.initConfig({\\n  autoprefixer: {\\n    options: {\\n      // Task-specific options go here.\\n    },\\n    your_target: {\\n      // Target-specific file lists and/or options go here.\\n    },\\n  },\\n})\\n```\\n\\n### Options\\n\\n#### options.browsers\\nType: `Array`\\nDefault value: `['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1']`\\n\\nYou can specify browsers actual for your project:\\n\\n```js\\noptions: {\\n  browsers: ['last 2 version', 'ie 8', 'ie 9']\\n}\\n```\\n\\n[Read more](https://github.com/ai/autoprefixer#browsers).\\n\\n#### options.cascade\\nType: `Boolean`\\nDefault value: `false`\\n\\nPass `true` to enable ‘cascade’ indentation. Read more [here](https://github.com/ai/autoprefixer#visual-cascade).\\n\\n#### options.diff\\nType: `Boolean|String`\\nDefault value: `false`\\n\\nSet it to `true` if you want to get an output patch file:\\n\\n```js\\noptions: {\\n  diff: true // or 'custom/path/to/file.css.patch'\\n}\\n```\\nAlso you can specify a path where to save this file. More examples in [Gruntfile](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js).\\n\\n#### options.map\\nType: `Boolean|String|undefined`\\nDefault value: `undefined`\\n\\nIf the map option isn't defined, Autoprefixer will look for source map from a previous compilation step (either inline map or separate one) and update it automatically. Let's say you have `path/file.css` and `path/file.css.map` from SASS, Autoprefixer will find that map, update it and save to a specified destination.\\n\\nIf `true` is specified, Autoprefixer will try to find an input source map file as described above and generate a new map based on the found one (or just generate a new map, unlike the situation when the map option is undefined).\\n\\nIf you keep your map from a pre-processor in another directory (e.g. `path/file.css` and `another-path/file.css.map`), you can specify the path `another-path/` in the map option to point out where grunt-autoprefixer should look for an input map to update it.\\n\\nAlso you can specify `false`. In that case Autoprefixer will not generate or update source map even if there is one from a previous compilation step near an input file or inlined to it (Autoprefixer will delete a map annotation comment from an input file).\\n\\nYou cannot specify a path where to save a map file, it will be saved at the same directory as the output CSS file or inlined to it (check out the option below).\\n\\n#### options.mapInline\\nType: `Boolean|undefined`\\nDefault value: `undefined`\\n\\nIf the option isn't specified, Autoprefixer will inline its map if a map from a previous compilation step was inlined to an input file or save its map as a separate file respectively.\\n\\nYou can specify `true` or `false` to force that behaviour as you like.\\n\\n### Usage Examples\\n\\n```js\\ngrunt.initConfig({\\n\\n  autoprefixer: {\\n\\n    options: {\\n      // Task-specific options go here.\\n    },\\n\\n    // prefix the specified file\\n    single_file: {\\n      options: {\\n        // Target-specific options go here.\\n      },\\n      src: 'src/css/file.css',\\n      dest: 'dest/css/file.css'\\n    },\\n\\n    // prefix all files\\n    multiple_files: {\\n      expand: true,\\n      flatten: true,\\n      src: 'src/css/*.css', // -> src/css/file1.css, src/css/file2.css\\n      dest: 'dest/css/' // -> dest/css/file1.css, dest/css/file2.css\\n    },\\n\\n    // if you have specified only the `src` param, the destination will be set automatically,\\n    // so source files will be overwritten\\n    no_dest: {\\n      src: 'dest/css/file.css' // globbing is also possible here\\n    },\\n\\n    diff: {\\n        options: {\\n            diff: true\\n        },\\n        src: 'src/css/file.css',\\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.patch\\n    },\\n\\n    sourcemap: {\\n        options: {\\n            map: true\\n        },\\n        src: 'src/css/file.css',\\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.map\\n    },\\n  }\\n\\n});\\n```\\n\\nCheck out project's [Gruntfile.js](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js) for more examples.\\n\\n### Updating prefixes database\\n\\n```\\n$ npm update caniuse-db\\n```\\n\\n## Contributing\\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/README.md:\n   20: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-concurrent/package.json:\n   45:   \"readme\": \"# grunt-concurrent [![Build Status](https://secure.travis-ci.org/sindresorhus/grunt-concurrent.png?branch=master)](http://travis-ci.org/sindresorhus/grunt-concurrent) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Run grunt tasks concurrently\\n\\nRunning slow tasks like Coffee and Sass concurrently can potentially improve your build time significantly. This task is also useful if you need to run multiple blocking tasks like `nodemon` and `watch` at once, as seen in the example config.\\n\\n![screenshot](screenshot.png)\\n\\nThis task is similar to grunt-parallel, but more focused by leaving out support for shell scripts which results in a leaner config. It also has a smaller dependency size and pads the output of concurrent tasks, as seen above.\\n\\n\\n## Getting Started\\n\\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\\n\\n```sh\\nnpm install grunt-concurrent --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-concurrent');\\n```\\n\\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\\n\\n\\n[grunt]: http://gruntjs.com\\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\\n\\n\\n## Documentation\\n\\nSee the [Gruntfile](Gruntfile.js) in this repo for a full example.\\n\\nJust specify the tasks you want to run concurrently as an array in a target of this task as shown below.\\n\\n\\n### Example config\\n\\nThis will first run the Coffee and Sass tasks at the same time, then the JSHint and Mocha tasks at the same time.\\n\\n```javascript\\ngrunt.initConfig({\\n\\tconcurrent: {\\n\\t\\ttarget1: ['coffee', 'sass'],\\n\\t\\ttarget2: ['jshint', 'mocha']\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.registerTask('default', ['concurrent:target1', 'concurrent:target2']);\\n```\\n\\n\\n## Options\\n\\n### limit\\n\\nType: `Number`  \\nDefault: Number of CPU cores (`require('os').cpus().length`) with a minimum of 2\\n\\nLimit of how many tasks that are run concurrently.\\n\\n### logConcurrentOutput\\n\\nType: `Boolean`  \\nDefault: `false`\\n\\nYou can optionally log the output of your concurrent tasks by specifying the `logConcurrentOutput` option. Here is an example config which runs [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) to launch and monitor a node server and [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch) to watch for asset changes all in one terminal tab:\\n\\n```javascript\\ngrunt.initConfig({\\n\\tconcurrent: {\\n\\t\\ttarget: {\\n\\t\\t\\ttasks: ['nodemon', 'watch'],\\n\\t\\t\\toptions: {\\n\\t\\t\\t\\tlogConcurrentOutput: true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.registerTask('default', ['concurrent:target']);\\n```\\n\\n*Note the output will be messy when combining certain tasks. This option is best used with tasks that don't exit like watch and nodemon to monitor the output of long-running concurrent tasks.*\\n\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-concurrent/readme.md:\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   52: grunt.loadNpmTasks('grunt-concurrent');\n   85: grunt.loadNpmTasks('grunt-concurrent');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-clean/Gruntfile.js:\n   44:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   45:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   46:   grunt.loadNpmTasks('grunt-contrib-internal');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-clean/package.json:\n   71:   \"readme\": \"# grunt-contrib-clean [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-clean.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-clean)\\n\\n> Clean files and folders.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-clean --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-clean');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-clean/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Clean task\\n_Run this task with the `grunt clean` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n*Due to the destructive nature of this task, always be cautious of the paths you clean.*\\n### Options\\n\\n#### force\\nType: `Boolean`  \\nDefault: false\\n\\nThis overrides this task from blocking deletion of folders outside current working dir (CWD). Use with caution.\\n\\n#### no-write\\nType: `Boolean`  \\nDefault: false\\n\\nWill log messages of what would happen if the task was ran but doesn't actually delete the files.\\n\\n### Usage Examples\\n\\nThere are three formats you can use to run this task.\\n\\n#### Short\\n\\n```js\\nclean: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"]\\n```\\n\\n#### Medium (specific targets with global options)\\n\\n```js\\nclean: {\\n  build: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"],\\n  release: [\\\"path/to/another/dir/one\\\", \\\"path/to/another/dir/two\\\"]\\n},\\n```\\n\\n#### Long (specific targets with per target options)\\n\\n```js\\nclean: {\\n  build: {\\n    src: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"]\\n  }\\n}\\n```\\n\\n## Release History\\n\\n * 2013-07-15   v0.5.0   Use rimraf directly, version 2.2.1 to fix issue on Windows. Add no-write option to mimic grunt.file.delete behavior.\\n * 2013-04-16   v0.4.1   Check if file exists to avoid trying to delete a non-existent file.\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.4.0rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-12-07   v0.4.0a   Conversion to grunt v0.4 conventions. Remove node v0.6 and grunt v0.3 support. Add force option to bypass CWD check.\\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Tim Branyen](http://tbranyen.com/)\\n\\n*This file was generated on Mon Jul 15 2013 20:45:46.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-clean/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-clean');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-compass/package.json:\n   58:   \"readme\": \"# grunt-contrib-compass v0.7.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-compass.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-compass)\\n\\n> Compile Sass to CSS using Compass\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-compass --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-compass');\\n```\\n\\n\\n\\n\\n## Compass task\\n_Run this task with the `grunt compass` command._\\n\\n[Compass](http://compass-style.org/) is an open-source authoring framework for the [Sass](http://sass-lang.com/) css preprocessor. It helps you build stylesheets faster with a huge library of Sass mixins and functions, advanced tools for spriting, and workflow improvements including file based Sass configuration and a simple pattern for building and using Compass extensions.\\n\\nThis task requires you to have [Ruby](http://www.ruby-lang.org/en/downloads/), [Sass](http://sass-lang.com/tutorial.html), and [Compass](http://compass-style.org/install/) >=0.12.2 installed. If you're on OS X or Linux you probably already have Ruby installed; test with `ruby -v` in your terminal. When you've confirmed you have Ruby installed, run `gem update --system && gem install compass` to install Compass and Sass.\\n\\nCompass operates on a folder level. Because of this you don't specify any src/dest, but instead define the `sassDir` and `cssDir` options.\\n\\n### Options\\n\\nCompass doesn't expose all of its [options][config] through the CLI, which this task makes use of. If you need an option not mentioned below you can either specify a path to a config.rb file in the `config` option or embed it directly into the `raw` option. Options defined in your Gruntfile will override those specified in your config.rb or `raw` property. `config` and `raw` are mutually exclusive.\\n\\n#### config\\n\\nType: `String`  \\nDefault: same path as your Gruntfile\\n\\nSpecify the location of the Compass [configuration file][config] explicitly.\\n\\n#### raw\\n\\nType: `String`\\n\\nString form of the Compass [configuration file][config].\\n\\n#### basePath\\n\\nType: `String`\\n\\nThe path Compass will run from. Defaults to the same path as your Gruntfile.\\n\\n#### banner\\n\\nType: `String`\\n\\nPrepend the specified string to the output file. Useful for licensing\\ninformation. **Note:** This only works in combination with the `specify` option\\nand can conflict with sourcemap generation.\\n\\n#### app\\n\\nType: `String`  \\nDefault: `stand_alone`\\n\\nTell compass what kind of application it is integrating with. Can be `stand_alone` or `rails`.\\n\\n#### sassDir\\n\\nType: `String`\\n\\nThe source directory where you keep your Sass stylesheets.\\n\\n#### cssDir\\n\\nType: `String`\\n\\nThe target directory where you keep your CSS stylesheets.\\n\\n#### specify\\n\\nType: `String|Array`\\n\\nLets you specify which files you want to compile. Useful if you don't want to compile the whole folder. Globbing supported. Ignores filenames starting with underscore. Files must be in the directory you specified in `sassDir`.\\n\\n#### imagesDir\\n\\nType: `String`\\n\\nThe directory where you keep your images.\\n\\n#### javascriptsDir\\n\\nType: `String`\\n\\nThe directory where you keep your JavaScript files.\\n\\n#### fontsDir\\n\\nType: `String`\\n\\nThe directory where you keep your fonts.\\n\\n#### environment\\n\\nType: `String`  \\nDefault: `development`\\n\\nUse sensible defaults for your current environment. Can be: `development` or `production`\\n\\n#### outputStyle\\n\\nType: `String`\\n\\nCSS output mode. Can be: `nested`, `expanded`, `compact`, `compressed`.\\n\\n#### relativeAssets\\n\\nType: `Boolean`\\n\\nMake Compass asset helpers generate relative urls to assets.\\n\\n#### noLineComments\\n\\nType: `Boolean`\\n\\nDisable line comments.\\n\\n#### httpPath\\n\\nType: `String`  \\nDefault: `/`\\n\\nThe path to the project when running within the web server.\\n\\n#### cssPath\\n\\nType: `String`\\n\\nThe directory where the css stylesheets are kept. It is relative to the `projectPath`. Defaults to \\\"stylesheets\\\".\\n\\n#### httpStylesheetsPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + cssDir`\\n\\nThe full http path to stylesheets on the web server.\\n\\n#### sassPath\\n\\nType: `String`  \\nDefault: `sass`\\n\\nThe directory where the sass stylesheets are kept. It is relative to the `projectPath`.\\n\\n#### imagesPath\\n\\nType: `String`  \\nDefault: `images`\\n\\nThe directory where the images are kept. It is relative to the projectPath.\\n\\n#### httpImagesPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + imagesDir`\\n\\nThe full http path to images on the web server.\\n\\n#### generatedImagesDir\\n\\nType: `String`  \\nDefault: value of `imagesDir`\\n\\nThe directory where generated images are kept. It is relative to the `projectPath`.\\n\\n#### generatedImagesPath\\n\\nType: `String`  \\nDefault: value of `projectPath/generatedImagesDir`\\n\\nThe full path to where generated images are kept.\\n\\n#### httpGeneratedImagesPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + generatedImagesDir`\\n\\nThe full http path to generated images on the web server.\\n\\n#### javascriptsPath\\n\\nType: `String`  \\nDefault: `projectPath/javascriptsDir`\\n\\nThe full path to where javascripts are kept.\\n\\n#### httpJavascriptsPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + javascriptsDir`\\n\\nThe full http path to javascripts on the web server.\\n\\n#### fontsPath\\n\\nType: `String`  \\nDefault: `projectPath/fontsDir`\\n\\nThe full path to where font files are kept.\\n\\n#### httpFontsPath\\n\\nType: `String`\\n\\nThe full http path to font files on the web server.\\n\\n#### httpFontsDir\\n\\nType: `String`\\n\\nThe relative http path to font files on the web server.\\n\\n#### extensionsPath\\n\\nType: `String`  \\nDefault: `project_root/extensions`\\n\\nThe full http path to the ad-hoc extensions folder on the web server. This is used to access compass plugins that have been installed directly to the project (e.g. through [Bower](https://github.com/bower/bower)) instead of globally as gems. *Only Compass >=0.12.2*\\n\\n#### extensionsDir\\n\\nType: `String`\\n\\nThe relative http path to the ad-hoc extensions folder on the web server. *Only Compass >=0.12.2*\\n\\n#### assetCacheBuster\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nIf set to `false`, this disables the default asset cache buster.\\n\\n#### cacheDir\\n\\nType: `String`  \\nDefault: `.sass-cache`\\n\\nThe relative path to the folder where the sass cache files are generated.\\n\\n#### require\\n\\nType: `String|Array`\\n\\nRequire the given Ruby library before running commands. This is used to access Compass plugins without having a project configuration file.\\n\\n#### load\\n\\nType: `String|Array`\\n\\nLoad the framework or extensions found in the specified directory.\\n\\n#### loadAll\\n\\nType: `String|Array`\\n\\nLoad all the frameworks or extensions found in the specified directory.\\n\\n#### importPath\\n\\nType: `String|Array`\\n\\nMakes files under the specified folder findable by Sass's @import directive.\\n\\n#### debugInfo\\n\\nType: `Boolean`\\n\\nCauses the line number and file where a selector is defined to be emitted into the compiled CSS in a format that can be understood by the browser. Automatically disabled when using `outputStyle: 'compressed'`.\\n\\n#### quiet\\n\\nType: `Boolean`\\n\\nQuiet mode.\\n\\n#### trace\\n\\nType: `Boolean`\\n\\nShow a full stacktrace on error.\\n\\n#### force\\n\\nType: `Boolean`\\n\\nAllows Compass to overwrite existing files.\\n\\n#### dryRun\\n\\nType: `Boolean`\\n\\nDry Run. Tells you what it plans to do.\\n\\n#### boring\\n\\nType: `Boolean`\\n\\nTurn off colorized output.\\n\\n#### bundleExec\\n\\nType: `Boolean`\\n\\nRun `compass compile` with [bundle exec](http://gembundler.com/v1.3/man/bundle-exec.1.html): `bundle exec compass compile`.\\n\\n#### clean\\n\\nType: `Boolean`\\n\\nRemove generated files and the sass cache. Runs `compass clean` instead of `compass compile`.\\n\\n#### watch\\n\\nType: `Boolean`\\n\\nRuns `compass watch` instead of `compass compile`. This will use Compass' native watch command to listen for changes to Sass files and recompile your CSS on changes. While much faster than running `compass compile` each time you want to compile your Sass, Compass becomes a blocking task. This means that if you would like to use it in conjunction with another blocking task, such as `watch`, you will need to use it in conjunction with a paralleling task such as [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent).\\n\\n\\n[config]: http://compass-style.org/help/tutorials/configuration-reference/\\n\\n### Usage Examples\\n\\n#### Example config\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {                  // Task\\n    dist: {                   // Target\\n      options: {              // Target options\\n        sassDir: 'sass',\\n        cssDir: 'css',\\n        environment: 'production'\\n      }\\n    },\\n    dev: {                    // Another target\\n      options: {\\n        sassDir: 'sass',\\n        cssDir: 'css'\\n      }\\n    }\\n  }\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-compass');\\n\\ngrunt.registerTask('default', ['jshint', 'compass']);\\n```\\n\\n\\n#### Example usage\\n\\n\\n##### Use external config file\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        config: 'config/config.rb'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n##### Override setting in external config file\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        config: 'config/config.rb',  // css_dir = 'dev/css'\\n        cssDir: 'dist/css'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n##### Use `raw` option\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        sassDir: 'sass',\\n        cssDir: 'css',\\n        raw: 'preferred_syntax = :sass\\\\n' // Use `raw` since it's not directly available\\n      }\\n    }\\n  }\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-01-26   v0.7.1   Fix `assetCacheBuster` option.\\n * 2013-12-07   v0.7.0   Add `cacheDir` option.\\n * 2013-10-04   v0.6.0   Add `watch` option. Fix Compass errors not propagating.\\n * 2013-08-08   v0.5.0   Add `assetCacheBuster` option.\\n * 2013-07-28   v0.4.1   Fix `banner` option with `.css.scss` files.\\n * 2013-07-19   v0.4.0   Add `banner` option. Show compilation time.\\n * 2013-06-24   v0.3.0   Add `extensionDir` and `extensionPath` options. *Requires Compass >=0.12.2*.\\n * 2013-04-11   v0.2.0   Add `clean` option. Expose `raw` options as Grunt options. Fix detection of `Nothing to compile` situation.\\n * 2013-02-27   v0.1.3   Fixes bundleExec.\\n * 2013-02-17   v0.1.2   Ensure Gruntfile.js is included on npm.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-02-05   v0.1.1rc8   Added new options: basePath specify, debugInfo.\\n * 2013-01-25   v0.1.1rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-10   v0.1.1rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-10-22   v0.1.0   Initial release\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Sun Jan 26 2014 19:54:34.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-compass/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-compass');\n  359: grunt.loadNpmTasks('grunt-contrib-compass');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-concat/package.json:\n   49:   \"readme\": \"# grunt-contrib-concat v0.4.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-concat.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-concat)\\n\\n> Concatenate files.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-concat --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-concat');\\n```\\n\\n\\n\\n\\n## Concat task\\n_Run this task with the `grunt concat` command._\\n\\nTask targets, files and options may be specified according to the Grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Options\\n\\n#### separator\\nType: `String`\\nDefault: `grunt.util.linefeed`\\n\\nConcatenated files will be joined on this string. If you're post-processing concatenated JavaScript files with a minifier, you may need to use a semicolon `';'` as the separator.\\n\\n#### banner\\nType: `String`\\nDefault: empty string\\n\\nThis string will be prepended to the beginning of the concatenated output. It is processed using [grunt.template.process][], using the default options.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n#### footer\\nType: `String`\\nDefault: empty string\\n\\nThis string will be appended to the end of the concatenated output. It is processed using [grunt.template.process][], using the default options.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n#### stripBanners\\nType: `Boolean` `Object`\\nDefault: `false`\\n\\nStrip JavaScript banner comments from source files.\\n\\n* `false` - No comments are stripped.\\n* `true` - `/* ... */` block comments are stripped, but _NOT_ `/*! ... */` comments.\\n* `options` object:\\n  * By default, behaves as if `true` were specified.\\n  * `block` - If true, _all_ block comments are stripped.\\n  * `line` - If true, any contiguous _leading_ `//` line comments are stripped.\\n\\n#### process\\nType: `Boolean` `Object` `Function`\\nDefault: `false`\\n\\nProcess source files before concatenating, either as [templates][] or with a custom function.\\n\\n* `false` - No processing will occur.\\n* `true` - Process source files using [grunt.template.process][] defaults.\\n* `data` object - Process source files using [grunt.template.process][], using the specified options.\\n* `function(src, filepath)` - Process source files using the given function, called once for each file. The returned value will be used as source code.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n  [templates]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md\\n  [grunt.template.process]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md#grunttemplateprocess\\n\\n### Usage Examples\\n\\n#### Concatenating with a custom separator\\n\\nIn this example, running `grunt concat:dist` (or `grunt concat` because `concat` is a [multi task][multitask]) will concatenate the three specified source files (in order), joining files with `;` and writing the output to `dist/built.js`.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    options: {\\n      separator: ';',\\n    },\\n    dist: {\\n      src: ['src/intro.js', 'src/project.js', 'src/outro.js'],\\n      dest: 'dist/built.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Banner comments\\n\\nIn this example, running `grunt concat:dist` will first strip any preexisting banner comment from the `src/project.js` file, then concatenate the result with a newly-generated banner comment, writing the output to `dist/built.js`.\\n\\nThis generated banner will be the contents of the `banner` template string interpolated with the config object. In this case, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\\n\\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  concat: {\\n    options: {\\n      stripBanners: true,\\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\\n        '<%= grunt.template.today(\\\"yyyy-mm-dd\\\") %> */',\\n    },\\n    dist: {\\n      src: ['src/project.js'],\\n      dest: 'dist/built.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Multiple targets\\n\\nIn this example, running `grunt concat` will build two separate files. One \\\"basic\\\" version, with the main file essentially just copied to `dist/basic.js`, and another \\\"with_extras\\\" concatenated version written to `dist/with_extras.js`.\\n\\nWhile each concat target can be built individually by running `grunt concat:basic` or `grunt concat:extras`, running `grunt concat` will build all concat targets. This is because `concat` is a [multi task][multitask].\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    basic: {\\n      src: ['src/main.js'],\\n      dest: 'dist/basic.js',\\n    },\\n    extras: {\\n      src: ['src/main.js', 'src/extras.js'],\\n      dest: 'dist/with_extras.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Multiple files per target\\n\\nLike the previous example, in this example running `grunt concat` will build two separate files. One \\\"basic\\\" version, with the main file essentially just copied to `dist/basic.js`, and another \\\"with_extras\\\" concatenated version written to `dist/with_extras.js`.\\n\\nThis example differs in that both files are built under the same target.\\n\\nUsing the `files` object, you can have list any number of source-destination pairs.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    basic_and_extras: {\\n      files: {\\n        'dist/basic.js': ['src/main.js'],\\n        'dist/with_extras.js': ['src/main.js', 'src/extras.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\n#### Dynamic filenames\\n\\nFilenames can be generated dynamically by using `<%= %>` delimited underscore templates as filenames.\\n\\nIn this example, running `grunt concat:dist` generates a destination file whose name is generated from the `name` and `version` properties of the referenced `package.json` file (via the `pkg` config property).\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  concat: {\\n    dist: {\\n      src: ['src/main.js'],\\n      dest: 'dist/<%= pkg.name %>-<%= pkg.version %>.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Advanced dynamic filenames\\n\\nIn this more involved example, running `grunt concat` will build two separate files (because `concat` is a [multi task][multitask]). The destination file paths will be expanded dynamically based on the specified templates, recursively if necessary.\\n\\nFor example, if the `package.json` file contained `{\\\"name\\\": \\\"awesome\\\", \\\"version\\\": \\\"1.0.0\\\"}`, the files `dist/awesome/1.0.0/basic.js` and `dist/awesome/1.0.0/with_extras.js` would be generated.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  dirs: {\\n    src: 'src/files',\\n    dest: 'dist/<%= pkg.name %>/<%= pkg.version %>',\\n  },\\n  concat: {\\n    basic: {\\n      src: ['<%= dirs.src %>/main.js'],\\n      dest: '<%= dirs.dest %>/basic.js',\\n    },\\n    extras: {\\n      src: ['<%= dirs.src %>/main.js', '<%= dirs.src %>/extras.js'],\\n      dest: '<%= dirs.dest %>/with_extras.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Invalid or Missing Files Warning\\nIf you would like the `concat` task to warn if a given file is missing or invalid be sure to set `nonull` to `true`:\\n\\n```js\\ngrunt.initConfig({\\n  concat: {\\n    missing: {\\n      src: ['src/invalid_or_missing_file'],\\n      dest: 'compiled.js',\\n      nonull: true,\\n    },\\n  },\\n});\\n```\\n\\nSee [configuring files for a task](http://gruntjs.com/configuring-tasks#files) for how to configure file globbing in Grunt.\\n\\n\\n#### Custom process function\\nIf you would like to do any custom processing before concatenating, use a custom process function:\\n\\n```js\\ngrunt.initConfig({\\n  concat: {\\n    dist: {\\n      options: {\\n        // Replace all 'use strict' statements in the code with a single one at the top\\n        banner: \\\"'use strict';\\\\n\\\",\\n        process: function(src, filepath) {\\n          return '// Source: ' + filepath + '\\\\n' +\\n            src.replace(/(^|\\\\n)[ \\\\t]*('use strict'|\\\"use strict\\\");?\\\\s*/g, '$1');\\n        },\\n      },\\n      files: {\\n        'dist/built.js': ['src/project.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\n[multitask]: http://gruntjs.com/creating-tasks#multi-tasks\\n\\n\\n## Release History\\n\\n * 2014-03-21   v0.4.0   README updates. Output updates.\\n * 2013-04-25   v0.3.0   Add option to process files with a custom function.\\n * 2013-04-08   v0.2.0   Don't normalize separator to allow user to set LF even on a Windows environment.\\n * 2013-02-22   v0.1.3   Support footer option.\\n * 2013-02-15   v0.1.2   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.2rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.2rc5   Updating to work with grunt v0.4.0rc5. Switching back to this.files api.\\n * 2012-11-13   v0.1.1   Switch to this.file api internally.\\n * 2012-10-03   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com/)\\n\\n*This file was generated on Mon Mar 31 2014 11:20:28.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-concat/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-concat');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-connect/package.json:\n   56:   \"readme\": \"# grunt-contrib-connect v0.7.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-connect.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-connect)\\n\\n> Start a connect web server.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-connect --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-connect');\\n```\\n\\n\\n\\n\\n## Connect task\\n_Run this task with the `grunt connect` command._\\n\\nNote that this server only runs as long as grunt is running. Once grunt's tasks have completed, the web server stops. This behavior can be changed with the [keepalive](#keepalive) option, and can be enabled ad-hoc by running the task like `grunt connect:keepalive`.\\n\\nThis task was designed to be used in conjunction with another task that is run immediately afterwards, like the [grunt-contrib-qunit plugin](https://github.com/gruntjs/grunt-contrib-qunit) `qunit` task.\\n### Options\\n\\n#### port\\nType: `Integer`  \\nDefault: `8000`\\n\\nThe port on which the webserver will respond. The task will fail if the specified port is already in use. You can use the special values `0` or `'?'` to use a system-assigned port.\\n\\n#### protocol\\nType: `String`  \\nDefault: `'http'`\\n\\nMay be `'http'` or `'https'`.\\n\\n#### hostname\\nType: `String`  \\nDefault: `'0.0.0.0'`\\n\\nThe hostname the webserver will use.\\n\\nSetting it to `'*'` will make the server accessible from anywhere.\\n\\n#### base\\nType: `String` or `Array`  \\nDefault: `'.'`\\n\\nThe base (or root) directory from which files will be served. Defaults to the project Gruntfile's directory.\\n\\nCan be an array of bases to serve multiple directories. The last base given will be the directory to become browse-able.\\n\\n#### directory\\nType: `String`  \\nDefault: `null`\\n\\nSet to the directory you wish to be browse-able. Used to override the `base` option browse-able directory.\\n\\n#### keepalive\\nType: `Boolean`  \\nDefault: `false`\\n\\nKeep the server alive indefinitely. Note that if this option is enabled, any tasks specified after this task will _never run_. By default, once grunt's tasks have completed, the web server stops. This option changes that behavior.\\n\\nThis option can also be enabled ad-hoc by running the task like `grunt connect:targetname:keepalive`\\n\\n#### debug\\nType: `Boolean`  \\nDefault: `false`\\n\\nSet the `debug` option to true to enable logging instead of using the `--debug` flag.\\n\\n#### livereload\\nType: `Boolean` or `Number`  \\nDefault: `false`\\n\\nSet to `true` or a port number to inject a live reload script tag into your page using [connect-livereload](https://github.com/intesso/connect-livereload).\\n\\n*This does not perform live reloading. It is intended to be used in tandem with grunt-contrib-watch or another task that will trigger a live reload server upon files changing.*\\n\\n#### open\\nType: `Boolean` or `String` or `Object`\\nDefault: `false`\\n\\nOpen the served page in your default browser. Specifying `true` opens the default server URL, specifying a URL opens that URL or specify an object with the following keys to configure open directly (each are optional):\\n\\n```js\\n{\\n  target: 'http://localhost:8000', // target url to open\\n  appName: 'open', // name of the app that opens, ie: open, start, xdg-open\\n  callback: function() {} // called when the app has opened\\n}\\n```\\n\\n#### useAvailablePort\\n  Type: `Boolean`\\n  Default: `false`\\n\\nIf `true` the task will look for the next available port after the set `port` option.\\nThis also applies to `livereload`.\\n\\n#### middleware\\nType: `Function` or `Array`\\nDefault: `Array` of connect middlewares that use `options.base` for static files and directory browsing\\n\\nAs an `Array`:\\n\\n```js\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        middleware: [\\n          function myMiddleware(req, res, next) {\\n            res.end('Hello, world!');\\n          }\\n        ],\\n      },\\n    },\\n  },\\n});\\n```\\n\\nAs a `function`:\\n\\n```js\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        middleware: function(connect, options, middlewares) {\\n          // inject a custom middleware into the array of default middlewares\\n          middlewares.push(function(req, res, next) {\\n            if (req.url !== '/hello/world') return next();\\n\\n            res.end('Hello, world from port #' + options.port + '!');\\n          });\\n\\n          return middlewares;\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nLets you add in your own Connect middlewares. This option expects a function that returns an array of middlewares. See the [project Gruntfile][] and [project unit tests][] for a usage example.\\n\\n[project Gruntfile]: Gruntfile.js\\n[project unit tests]: test/connect_test.js\\n\\n### Usage examples\\n\\n#### Basic Use\\nIn this example, `grunt connect` (or more verbosely, `grunt connect:server`) will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile, and any tasks run afterwards will be able to access it.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        port: 9001,\\n        base: 'www-root'\\n      }\\n    }\\n  }\\n});\\n```\\n\\nIf you want your web server to use the default options, just omit the `options` object. You still need to specify a target (`uses_defaults` in this example), but the target's configuration object can otherwise be empty or nonexistent. In this example, `grunt connect` (or more verbosely, `grunt connect:uses_defaults`) will start a static web server using the default options.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    uses_defaults: {}\\n  }\\n});\\n```\\n\\n#### Multiple Servers\\nYou can specify multiple servers to be run alone or simultaneously by creating a target for each server. In this example, running either `grunt connect:site1` or `grunt connect:site2` will  start the appropriate web server, but running `grunt connect` will run _both_. Note that any server for which the [keepalive](#keepalive) option is specified will prevent _any_ task or target from running after it.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    site1: {\\n      options: {\\n        port: 9000,\\n        base: 'www-roots/site1'\\n      }\\n    },\\n    site2: {\\n      options: {\\n        port: 9001,\\n        base: 'www-roots/site2'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Roll Your Own\\nLike the [Basic Use](#basic-use) example, this example will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile. Unlike the other example, this is done by creating a brand new task. in fact, this plugin isn't even installed!\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({ /* Nothing needed here! */ });\\n\\n// After running \\\"npm install connect --save-dev\\\" to add connect as a dev\\n// dependency of your project, you can require it in your gruntfile with:\\nvar connect = require('connect');\\n\\n// Now you can define a \\\"connect\\\" task that starts a webserver, using the\\n// connect lib, with whatever options and configuration you need:\\ngrunt.registerTask('connect', 'Start a custom static web server.', function() {\\n  grunt.log.writeln('Starting static web server in \\\"www-root\\\" on port 9001.');\\n  connect(connect.static('www-root')).listen(9001);\\n});\\n```\\n\\n#### Support for HTTPS\\n\\nA default certificate authority, certificate and key file are provided and pre-\\nconfigured for use when `protocol` has been set to `https`.\\n\\nNOTE: No passphrase set for the certificate.\\nIf you are getting warnings in Google Chrome, add 'server.crt' (from 'node_modules/tasks/certs')\\nto your keychain.\\nIn OS X, after you add 'server.crt', right click on the certificate,\\nselect 'Get Info' - 'Trust' - 'Always Trust', close window, restart Chrome.\\n\\n###### Advanced HTTPS config\\n\\nIf the default certificate setup is unsuitable for your environment, OpenSSL\\ncan be used to create a set of self-signed certificates with a local ca root.\\n\\n```shell\\n### Create ca.key, use a password phrase when asked\\n### When asked 'Common Name (e.g. server FQDN or YOUR name) []:' use your hostname, i.e 'mysite.dev'\\nopenssl genrsa -des3 -out ca.key 1024\\nopenssl req -new -key ca.key -out ca.csr\\nopenssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\\n\\n### Create server certificate\\nopenssl genrsa -des3 -out server.key 1024\\nopenssl req -new -key server.key -out server.csr\\n\\n### Remove password from the certificate\\ncp server.key server.key.org\\nopenssl rsa -in server.key.org -out server.key\\n\\n### Generate self-siged certificate\\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\\n```\\n\\nFor more details on the various options that can be set when configuring SSL,\\nplease see the Node documentation for [TLS][].\\n\\nGrunt configuration would become\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        protocol: 'https',\\n        port: 8443,\\n        key: grunt.file.read('server.key').toString(),\\n        cert: grunt.file.read('server.crt').toString(),\\n        ca: grunt.file.read('ca.crt').toString()\\n      },\\n    },\\n  },\\n});\\n```\\n\\n[TLS]: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener\\n\\n#### Grunt Events\\nThe connect plugin will emit a grunt event, `connect.{taskName}.listening`, once the server has started. You can listen for this event to run things against a keepalive server, for example:\\n\\n```javascript\\ngrunt.registerTask('jasmine-server', 'start web server for jasmine tests in browser', function() {\\n  grunt.task.run('jasmine:tests:build');\\n\\n  grunt.event.once('connect.tests.listening', function(host, port) {\\n    var specRunnerUrl = 'http://' + host + ':' + port + '/_SpecRunner.html';\\n    grunt.log.writeln('Jasmine specs available at: ' + specRunnerUrl);\\n    require('open')(specRunnerUrl);\\n  });\\n\\n  grunt.task.run('connect:tests:keepalive');\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-02-27   v0.7.1   Fixes issue with the '*' hostname option.\\n * 2014-02-18   v0.7.0   Update connect to ~2.13.0. Default hostname switched to '0.0.0.0'. Modified options.middleware to accept an array or a function.\\n * 2013-12-29   v0.6.0   Open options.hostname if provided. Update connect-livereload to ~0.3.0. Update connect to ~2.12.0. Use well-formed ssl certificates. Support all options of open. Make directory browseable when base is a string.\\n * 2013-09-05   v0.5.0   Add 'open' option.\\n * 2013-09-05   v0.4.2   Un-normalize options.base as it should be a string or an array as the user has set. Fix setting target hostname option.\\n * 2013-09-02   v0.4.1   Browse-able directory is the last item supplied to bases. Added directory option to override browse-able directory.\\n * 2013-09-01   v0.4.0   Fix logging of which server address. Ability to set multiple bases. Event emitted when server starts listening. Support for HTTPS. debug option added to display debug logging like the --debug flag. livereload option added to inject a livereload snippet into the page.\\n * 2013-04-10   v0.3.0   Add ability to listen on system-assigned port.\\n * 2013-03-07   v0.2.0   Upgrade connect dependency.\\n * 2013-02-17   v0.1.2   Ensure Gruntfile.js is included on npm.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-11-01   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com)\\n\\n*This file was generated on Thu Feb 27 2014 15:45:07.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-connect/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-connect');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-copy/package.json:\n   46:   \"readme\": \"# grunt-contrib-copy v0.5.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-copy.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-copy)\\n\\n> Copy files and folders.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-copy --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-copy');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-copy/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Copy task\\n_Run this task with the `grunt copy` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n### Options\\n\\n#### process\\nType: `Function(content, srcpath)`\\n\\nThis option is passed to `grunt.file.copy` as an advanced way to control the file contents that are copied.\\n\\n*`processContent` has been renamed to `process` and the option name will be removed in the future.*\\n\\n#### noProcess\\nType: `String`\\n\\nThis option is passed to `grunt.file.copy` as an advanced way to control which file contents are processed.\\n\\n*`processContentExclude` has been renamed to `noProcess` and the option name will be removed in the future.*\\n\\n#### encoding\\nType: `String`  \\nDefault: `grunt.file.defaultEncoding`\\n\\nThe file encoding to copy files with.\\n\\n#### mode\\nType: `Boolean` or `Number`  \\nDefault: `false`\\n\\nWhether to copy or set the existing file permissions. Set to `true` to copy the existing file permissions. Or set to the mode, i.e.: `0644`, that copied files will be set to.\\n\\n### Usage Examples\\n\\n```js\\ncopy: {\\n  main: {\\n    files: [\\n      // includes files within path\\n      {expand: true, src: ['path/*'], dest: 'dest/', filter: 'isFile'},\\n\\n      // includes files within path and its sub-directories\\n      {expand: true, src: ['path/**'], dest: 'dest/'},\\n\\n      // makes all src relative to cwd\\n      {expand: true, cwd: 'path/', src: ['**'], dest: 'dest/'},\\n\\n      // flattens results to a single level\\n      {expand: true, flatten: true, src: ['path/**'], dest: 'dest/', filter: 'isFile'}\\n    ]\\n  }\\n}\\n```\\n\\nThis task supports all the file mapping format Grunt supports. Please read [Globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns) and [Building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically) for additional details.\\n\\nHere are some additional examples, given the following file tree:\\n```shell\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n2 directories, 3 files\\n```\\n\\n**Copy a single file tree:**\\n```js\\ncopy: {\\n  main: {\\n    src: 'src/*',\\n    dest: 'dest/',\\n  },\\n},\\n```\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nCreated 1 directories, copied 1 files\\n\\nDone, without errors.\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n├── dest\\n│   └── src\\n│       ├── a\\n│       └── subdir\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n5 directories, 4 files\\n```\\n\\n**Flattening the filepath output:**\\n\\n```js\\ncopy: {\\n  main: {\\n    expand: true,\\n    cwd: 'src/',\\n    src: '**',\\n    dest: 'dest/',\\n    flatten: true,\\n    filter: 'isFile',\\n  },\\n},\\n```\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nCopied 2 files\\n\\nDone, without errors.\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n├── dest\\n│   ├── a\\n│   └── b\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n3 directories, 5 files\\n```\\n\\n\\n**Copy and modify a file:**\\n\\nTo change the contents of a file as it is copied, set an `options.process` function as follows:\\n\\n```js\\ncopy: {\\n  main: {\\n    src: 'src/a',\\n    dest: 'src/a.bak',\\n    options: {\\n      process: function (content, srcpath) {\\n        return content.replace(/[sad ]/g,\\\"_\\\");\\n      }\\n    }\\n  },\\n},\\n```\\n\\nHere all occurences of the letters \\\"s\\\", \\\"a\\\" and \\\"d\\\", as well as all spaces, will be changed to underlines in \\\"a.bak\\\". Of course, you are not limited to just using regex replacements.\\n\\nTo process all files in a directory, the `process` function is used in exactly the same way.\\n\\nNOTE: If `process` is not working, be aware it was called `processContent` in v0.4.1 and earlier.\\n\\n\\n##### Troubleshooting\\n\\nBy default, if a file or directory is not found it is quietly ignored. If the file should exist, and non-existence generate an error, then add `nonull:true`. For instance, this Gruntfile.js entry:\\n\\n```js\\ncopy: {\\n  main: {\\n    nonull: true,\\n    src: 'not-there',\\n    dest: 'create-me',\\n  },\\n},\\n```\\n\\ngives this output:\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nWarning: Unable to read \\\"not-there\\\" file (Error code: ENOENT). Use --force to continue.\\n\\nAborted due to warnings.\\n```\\n\\n\\n\\n## Release History\\n\\n * 2013-12-23   v0.5.0   If an encoding is specified, overwrite grunt.file.defaultEncoding. Rename processContent/processContentExclude to process/noProcess to match Grunt API. mode option to copy existing or set file permissions.\\n * 2013-03-26   v0.4.1   Output summary by default (\\\"Copied N files, created M folders\\\"). Individual transaction output available via `--verbose`.\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-23   v0.4.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-14   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Conversion to grunt v0.4 conventions. Replace basePath with cwd. Empty directory support.\\n * 2012-10-18   v0.3.2   Pass copyOptions on single file copy.\\n * 2012-10-12   v0.3.1   Rename grunt-contrib-lib dep to grunt-lib-contrib.\\n * 2012-09-24   v0.3.0   General cleanup and consolidation. Global options depreciated.\\n * 2012-09-18   v0.2.4   No valid source check.\\n * 2012-09-17   v0.2.3   Path.sep fallback for node <= 0.7.9.\\n * 2012-09-17   v0.2.2   Single file copy support. Test refactoring.\\n * 2012-09-07   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Chris Talkington](http://christalkington.com/)\\n\\n*This file was generated on Mon Dec 23 2013 20:21:57.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-copy/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-copy');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-cssmin/package.json:\n   51:   \"readme\": \"# grunt-contrib-cssmin v0.8.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-cssmin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-cssmin)\\n\\n> Compress CSS files.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.1`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-cssmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-cssmin');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-cssmin/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Cssmin task\\n_Run this task with the `grunt cssmin` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\nFiles are compressed with [clean-css](https://github.com/GoalSmashers/clean-css).\\n### Options\\n\\n#### banner\\n\\nType: `String`  \\nDefault: `null`\\n\\nPrefix the compressed source with the given banner, with a linebreak inbetween.\\n\\n#### keepSpecialComments\\n\\nType: `String` `Number`  \\nDefault: `'*'`\\n\\nTo keep or remove special comments, exposing the underlying option from [clean-css](https://github.com/GoalSmashers/clean-css). `'*'` for keeping all (default), `1` for keeping first one, `0` for removing all.\\n\\n#### report\\nChoices: `'min'`, `'gzip'`  \\nDefault: `'min'`\\n\\nEither report only minification result or report minification and gzip results.\\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\\n\\n### Usage Examples\\n\\n#### Combine two files into one output file\\n\\n```js\\ncssmin: {\\n  combine: {\\n    files: {\\n      'path/to/output.css': ['path/to/input_one.css', 'path/to/input_two.css']\\n    }\\n  }\\n}\\n```\\n\\n#### Add a banner\\n```js\\ncssmin: {\\n  add_banner: {\\n    options: {\\n      banner: '/* My minified css file */'\\n    },\\n    files: {\\n      'path/to/output.css': ['path/to/**/*.css']\\n    }\\n  }\\n}\\n```\\n\\n#### Minify all contents of a release directory and add a `.min.css` extension\\n```js\\ncssmin: {\\n  minify: {\\n    expand: true,\\n    cwd: 'release/css/',\\n    src: ['*.css', '!*.min.css'],\\n    dest: 'release/css/',\\n    ext: '.min.css'\\n  }\\n}\\n```\\n\\n\\n## Release History\\n\\n * 2014-02-14   v0.8.0   update clean-css v2.1.0\\n * 2013-11-23   v0.7.0   update clean-css v2.0.0\\n * 2013-09-14   v0.6.2   Support relative URLs via clean-css ~1.1.1.\\n * 2013-05-25   v0.6.1   Support import in-lining vis clean-css ~1.0.4.\\n * 2013-04-05   v0.6.0   Update clean-css dependency to ~1.0.0\\n * 2013-03-14   v0.5.0   Support for 'report' option (false by default)\\n * 2013-03-10   v0.4.2   Add banner option Support clean-css keepSpecialComments\\n * 2013-02-17   v0.4.1   Update clean-css dependency to ~0.10.0\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-23   v0.4.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\\n * 2012-11-01   v0.3.2   Update clean-css dep.\\n * 2012-10-12   v0.3.1   Rename grunt-contrib-lib dep to grunt-lib-contrib.\\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Tim Branyen](http://tbranyen.com/)\\n\\n*This file was generated on Sat Mar 01 2014 19:58:58.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-cssmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-cssmin');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/cli/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-htmlmin/package.json:\n   51:   \"readme\": \"# grunt-contrib-htmlmin v0.3.0 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-htmlmin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-htmlmin)\\n\\n> Minify HTML\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-htmlmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-htmlmin');\\n```\\n\\n\\n\\n\\n## Htmlmin task\\n_Run this task with the `grunt htmlmin` command._\\n\\nMinifies HTML using [html-minifier](https://github.com/kangax/html-minifier). Bugs regarding the output should be reported [here](https://github.com/kangax/html-minifier/issues/new).\\n\\n### Options\\n\\nSee the html-minifier [options](https://github.com/kangax/html-minifier#options-quick-reference).\\n\\n#### Example config\\n\\n```javascript\\ngrunt.initConfig({\\n  htmlmin: {                                     // Task\\n    dist: {                                      // Target\\n      options: {                                 // Target options\\n        removeComments: true,\\n        collapseWhitespace: true\\n      },\\n      files: {                                   // Dictionary of files\\n        'dist/index.html': 'src/index.html',     // 'destination': 'source'\\n        'dist/contact.html': 'src/contact.html'\\n      }\\n    },\\n    dev: {                                       // Another target\\n      files: {\\n        'dist/index.html': 'src/index.html',\\n        'dist/contact.html': 'src/contact.html'\\n      }\\n    }\\n  }\\n});\\n\\ngrunt.registerTask('default', ['htmlmin']);\\n```\\n\\n\\n## Release History\\n\\n * 2014-05-05   v0.3.0   Drop node.js 0.8 support. Updated to htmlmin 0.6.0.\\n * 2014-02-09   v0.2.0   Rewrite task. Drop concat support.\\n * 2013-04-06   v0.1.3   Fail target when minify encounters an error.\\n * 2013-04-05   v0.1.2   Update html-minifier which fixes IE conditional comments and prefixed HTML elements `<ng-include>` `<ng:include>`.\\n * 2013-02-18   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-30   v0.1.1rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-11-01   v0.1.0   Initial release.\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Mon May 05 2014 02:02:08.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-htmlmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-imagemin/package.json:\n   57:   \"readme\": \"# grunt-contrib-imagemin v0.7.1 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-imagemin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-imagemin) <a href=\\\"https://ci.appveyor.com/project/gruntjs/grunt-contrib-imagemin\\\"><img src=\\\"https://ci.appveyor.com/api/projects/status/s1cpt9m3e5ihuoqj/branch/master\\\" alt=\\\"Build Status: Windows\\\" height=\\\"18\\\" /></a>\\n\\n> Minify images\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `^0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-imagemin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-imagemin');\\n```\\n\\n\\n\\n\\n## Imagemin task\\n_Run this task with the `grunt imagemin` command._\\n\\nMinify images using [imagemin](https://github.com/kevva/imagemin).\\n\\nComes bundled with the following optimizers:\\n\\n- [gifsicle](https://github.com/kevva/imagemin-gifsicle) — *Compress GIF images*\\n- [jpegtran](https://github.com/kevva/imagemin-jpegtran) — *Compress JPEG images*\\n- [optipng](https://github.com/kevva/imagemin-optipng) — *Compress PNG images*\\n- [svgo](https://github.com/kevva/imagemin-svgo) — *Compress SVG images*\\n\\nWe recommend using [grunt-newer](https://github.com/tschaub/grunt-newer) to only process changed files as minifying images can be quite slow.\\n\\n### Options\\n\\nOptions will only apply to the relevant files, so you don't need separate targets for png/jpg.\\n\\n\\n#### optimizationLevel *(png)*\\n\\nType: `Number`  \\nDefault: `3`\\n\\nSelect optimization level between `0` and `7`.\\n\\n> The optimization level 0 enables a set of optimization operations that require minimal effort. There will be no changes to image attributes like bit depth or color type, and no recompression of existing IDAT datastreams. The optimization level 1 enables a single IDAT compression trial. The trial chosen is what. OptiPNG thinks it’s probably the most effective. The optimization levels 2 and higher enable multiple IDAT compression trials; the higher the level, the more trials.\\n\\nLevel and trials:\\n\\n1. 1 trial\\n2. 8 trials\\n3. 16 trials\\n4. 24 trials\\n5. 48 trials\\n6. 120 trials\\n7. 240 trials\\n\\n\\n#### progressive *(jpg)*\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nLossless conversion to progressive.\\n\\n\\n#### interlaced *(gif)*\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nInterlace gif for progressive rendering.\\n\\n\\n#### use\\n\\nType: `Array`  \\nDefault: `null`\\n\\nAdditional [plugins](https://npmjs.org/keyword/imageminplugin) to use with imagemin.\\n\\n#### Example config\\n\\nYou can either map your files statically or [dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically).\\n\\n```js\\nvar mozjpeg = require('imagemin-mozjpeg');\\n\\ngrunt.initConfig({\\n  imagemin: {                          // Task\\n    static: {                          // Target\\n      options: {                       // Target options\\n        optimizationLevel: 3,\\n        use: [mozjpeg()]\\n      },\\n      files: {                         // Dictionary of files\\n        'dist/img.png': 'src/img.png', // 'destination': 'source'\\n        'dist/img.jpg': 'src/img.jpg',\\n        'dist/img.gif': 'src/img.gif'\\n      }\\n    },\\n    dynamic: {                         // Another target\\n      files: [{\\n        expand: true,                  // Enable dynamic expansion\\n        cwd: 'src/',                   // Src matches are relative to this path\\n        src: ['**/*.{png,jpg,gif}'],   // Actual patterns to match\\n        dest: 'dist/'                  // Destination path prefix\\n      }]\\n    }\\n  }\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-imagemin');\\ngrunt.registerTask('default', ['imagemin']);\\n```\\n\\n\\n## Release History\\n\\n * 2014-05-31   v0.7.1   Caching original image size before optimization. Remove unused dependencies.\\n * 2014-04-29   v0.7.0   Update \\\"imagemin\\\" to 0.4\\n * 2014-04-01   v0.6.1   Fix problem with corrupt images being created\\n * 2014-03-28   v0.6.0   Updated \\\"imagemin\\\" to 0.2 Added percentage to size saved view - fixes cache option removed. Adds \\\"pretty-bytes\\\".\\n * 2014-01-13   v0.5.0   Extract the logic into an external lib [imagemin](https://github.com/kevva/imagemin).\\n * 2014-01-08   v0.4.1   Prevent \\\"Maximum call stack size exceeded\\\". Speed up loading this task by lazy requiring bin deps.\\n * 2013-11-22   v0.4.0   The `pngquant` option is now `false` by default instead of `true`.\\n * 2013-09-09   v0.3.0   Add `interlace` option for gif files.\\n * 2013-08-16   v0.2.0   Add `gifsicle` and `pngquant`. Cache images so only changed images are optimized. Default `optimizationLevel` to `7` and `progressive` to `true`.\\n * 2013-04-10   v0.1.4   Fix exception when running in verbose mode.\\n * 2013-04-05   v0.1.3   Fix OptiPNG not being able to overwrite file. Allow overwriting src when dest/src is the same. Limit to 10 concurrent optimizations.\\n * 2013-02-22   v0.1.2   Fix OptiPNG not working on some systems. Prevent OptiPNG from producing .bak files.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-30   v0.1.1rc8   Fix task not creating destination folders\\n * 2013-01-30   v0.1.1rc7   Updating to work with grunt v0.4.0rc7. Switching to this.files api.\\n * 2012-11-01   v0.1.0   Initial release.\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Sat May 31 2014 16:32:27.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-imagemin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-imagemin');\n  118: grunt.loadNpmTasks('grunt-contrib-imagemin');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-jshint/node_modules/jshint/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-jshint/package.json:\n   48:   \"readme\": \"# grunt-contrib-jshint v0.10.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-jshint.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-jshint)\\n\\n> Validate files with JSHint.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-jshint --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-jshint');\\n```\\n\\n\\n\\n\\n## Jshint task\\n_Run this task with the `grunt jshint` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\nFor more explanations of the lint errors JSHint will throw at you please visit [jslinterrors.com](http://jslinterrors.com/).\\n\\n### Options\\n\\nAny specified option will be passed through directly to [JSHint][], thus you can specify any option that JSHint supports. See the [JSHint documentation][] for a list of supported options.\\n\\n[JSHint]: http://www.jshint.com/\\n[JSHint documentation]: http://www.jshint.com/docs/\\n\\nA few additional options are supported:\\n\\n\\n#### globals\\n\\nType: `Object`  \\nDefault: `null`\\n\\nA map of global variables, with keys as names and a boolean value to determine if they are assignable. This is not a standard JSHint option, but is passed into the `JSHINT` function as its third argument. See the [JSHint documentation][] for more information.\\n\\n\\n#### jshintrc\\n\\nType: `String` or `true`  \\nDefault: `null`\\n\\nIf set to `true`, no config will be sent to jshint and jshint will search for `.jshintrc` files relative to the files being linted.\\n\\nIf a filename is specified, options and globals defined therein will be used. The `jshintrc` file must be valid JSON and looks something like this:\\n\\n```json\\n{\\n  \\\"curly\\\": true,\\n  \\\"eqnull\\\": true,\\n  \\\"eqeqeq\\\": true,\\n  \\\"undef\\\": true,\\n  \\\"globals\\\": {\\n    \\\"jQuery\\\": true\\n  }\\n}\\n```\\n\\n*Be aware that `jshintrc` settings are not merged with your Grunt options.*\\n\\n\\n#### extensions\\n\\nType: `String`  \\nDefault: `''`\\n\\nA list of non-dot-js extensions to check.\\n\\n\\n#### ignores\\n\\nType: `Array`  \\nDefault: `null`\\n\\nA list of files and dirs to ignore. This will override your `.jshintignore` file if set and does not merge.\\n\\n\\n#### force\\n\\nType: `Boolean`  \\nDefault: `false`\\n\\nSet `force` to `true` to report JSHint errors but not fail the task.\\n\\n\\n#### reporter\\n\\nType: `String`  \\nDefault: `null`\\n\\nAllows you to modify this plugins output. By default it will use a built-in Grunt reporter. Set the path to your own custom reporter or to one of the built-in JSHint reporters: `jslint` or `checkstyle`.\\n\\nSee also: [Writing your own JSHint reporter.](http://jshint.com/docs/reporters/)\\n\\nYou can also use an external reporter. For example [jshint-stylish](https://github.com/sindresorhus/jshint-stylish):\\n\\n```\\n$ npm install --save-dev jshint-stylish\\n```\\n\\n```js\\noptions: {\\n    reporter: require('jshint-stylish')\\n}\\n```\\n\\n#### reporterOutput\\n\\nType: `String`  \\nDefault: `null`\\n\\nSpecify a filepath to output the results of a reporter. If `reporterOutput` is specified then all output will be written to the given filepath instead of printed to stdout.\\n\\n### Usage examples\\n\\n#### Wildcards\\nIn this example, running `grunt jshint:all` (or `grunt jshint` because `jshint` is a [multi task](http://gruntjs.com/configuring-tasks#task-configuration-and-targets)) will lint the project's Gruntfile as well as all JavaScript files in the `lib` and `test` directories and their subdirectores, using the default JSHint options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  jshint: {\\n    all: ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js']\\n  }\\n});\\n```\\n\\n#### Linting before and after concatenating\\nIn this example, running `grunt jshint` will lint both the \\\"beforeconcat\\\" set and \\\"afterconcat\\\" sets of files. This is not ideal, because `dist/output.js` may get linted before it gets created via the [grunt-contrib-concat plugin](https://github.com/gruntjs/grunt-contrib-concat) `concat` task.\\n\\nIn this case, you should lint the \\\"beforeconcat\\\" files first, then concat, then lint the \\\"afterconcat\\\" files, by running `grunt jshint:beforeconcat concat jshint:afterconcat`.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    dist: {\\n      src: ['src/foo.js', 'src/bar.js'],\\n      dest: 'dist/output.js'\\n    }\\n  },\\n  jshint: {\\n    beforeconcat: ['src/foo.js', 'src/bar.js'],\\n    afterconcat: ['dist/output.js']\\n  }\\n});\\n```\\n\\n#### Specifying JSHint options and globals\\n\\nIn this example, custom JSHint options are specified. Note that when `grunt jshint:uses_defaults` is run, those files are linted using the default options, but when `grunt jshint:with_overrides` is run, those files are linted using _merged_ task/target options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  jshint: {\\n    options: {\\n      curly: true,\\n      eqeqeq: true,\\n      eqnull: true,\\n      browser: true,\\n      globals: {\\n        jQuery: true\\n      },\\n    },\\n    uses_defaults: ['dir1/**/*.js', 'dir2/**/*.js'],\\n    with_overrides: {\\n      options: {\\n        curly: false,\\n        undef: true,\\n      },\\n      files: {\\n        src: ['dir3/**/*.js', 'dir4/**/*.js']\\n      },\\n    }\\n  },\\n});\\n```\\n\\n#### Ignoring specific warnings\\n\\nIf you would like to ignore a specific warning:\\n\\n```shell\\n[L24:C9] W015: Expected '}' to have an indentation at 11 instead at 9.\\n```\\n\\nYou can toggle it by prepending `-` to the warning id as an option:\\n\\n```js\\ngrunt.initConfig({\\n  jshint: {\\n    ignore_warning: {\\n      options: {\\n        '-W015': true,\\n      },\\n      src: ['**/*.js'],\\n    },\\n  },\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-04-02   v0.10.0   Update to JSHint 2.5.0.\\n * 2014-03-12   v0.9.2   Fixes a bug where reporterOutput was still passed to jshint.\\n * 2014-03-12   v0.9.1   Don't pass reporterOutput option to jshint.\\n * 2014-03-12   v0.9.0   Replace deprecated grunt.util._.clone with Object.create() Replace deprecated grunt.util.hooker with hooker lib Enhancing the readability of the output. Reporter output is relative to the output file. Pass jshint options to the external reporter.\\n * 2013-12-25   v0.8.0   Update to jshint 2.4.0.\\n * 2013-11-16   v0.7.2   Only print file name once per error.\\n * 2013-10-31   v0.7.1   Ability to set jshintrc option to true to use jshint's native ability for finding .jshintrc files relative to the linted files.\\n * 2013-10-23   v0.7.0   Update to jshint 2.3.0.\\n * 2013-10-23   v0.6.5   Fix output when maxerr is low.\\n * 2013-08-29   v0.6.4   jshintrc now loaded by jshint allowing comments.\\n * 2013-08-15   v0.6.3   Fix module location for jshint 2.1.10.\\n * 2013-07-29   v0.6.2   Update to jshint 2.1.7.\\n * 2013-07-27   v0.6.1   Peg jshint to 2.1.4 until breaking changes in 2.1.5 are fixed.\\n * 2013-06-02   v0.6.0   Dont always succeed the task when using a custom reporter. Bump jshint to 2.1.3.\\n * 2013-05-22   v0.5.4   Fix default reporter to show offending file.\\n * 2013-05-19   v0.5.3   Performance: Execute the reporter once rather than per file.\\n * 2013-05-18   v0.5.2   Fix printing too many erroneous ignored file errors.\\n * 2013-05-17   v0.5.1   Fix for when only 1 file is lint free.\\n * 2013-05-17   v0.5.0   Bump to jshint 2.0. Add support for .jshintignore files and ignores option Add support for extensions option. Add support for custom reporters and output report to a file.\\n * 2013-04-08   v0.4.3   Fix evaluation of predef option when it's an object.\\n * 2013-04-08   v0.4.2   Avoid wiping force option when jshintrc is used.\\n * 2013-04-06   v0.4.1   Fix to allow object type for deprecated predef.\\n * 2013-04-04   v0.4.0   Revert task level options to override jshintrc files.\\n * 2013-03-13   v0.3.0   Bump to JSHint 1.1.0. Add force option to report JSHint errors but not fail the task. Add error/warning code to message. Allow task level options to override jshintrc file.\\n * 2013-02-26   v0.2.0   Bump to JSHint 1.0\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-10-18   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com/)\\n\\n*This file was generated on Wed Apr 02 2014 09:05:43.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-jshint/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-uglify/package.json:\n   51:   \"readme\": \"# grunt-contrib-uglify v0.4.1 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-uglify.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-uglify)\\n\\n> Minify files with UglifyJS.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-uglify --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-uglify');\\n```\\n\\n\\n\\n\\n## Uglify task\\n_Run this task with the `grunt uglify` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Migrating from 2.x to 3.x\\n\\nVersion `3.x` introduced changes to configuring source maps. Accordingly, if you don't use the source map options you should be able to upgrade seamlessly. If you do use source maps, see below.\\n\\n#### Removed options\\n\\n`sourceMapRoot` - The location of your sources is now calculated for you when `sourceMap` is set to `true`  \\n`sourceMapPrefix` - No longer necessary for the above reason  \\n`sourceMappingURL` - Once again, this is calculated automatically\\n\\n#### Changed options\\n\\n`sourceMap` - Only accepts a `Boolean` value. Generates a map with a default name for you  \\n\\n#### New options\\n\\n`sourceMapName` - Accepts a string or function to change the location or name of your map\\n`sourceMapIncludeSources` - Embed the content of your source files directly into the map\\n\\n### Options\\n\\nThis task primarily delegates to [UglifyJS2][], so please consider the [UglifyJS documentation][] as required reading for advanced configuration.\\n\\n[UglifyJS2]: https://github.com/mishoo/UglifyJS2\\n[UglifyJS documentation]: http://lisperator.net/uglifyjs/\\n\\n#### mangle\\nType: `Boolean` `Object`  \\nDefault: `{}`\\n\\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior).\\n\\n#### compress\\nType: `Boolean` `Object`  \\nDefault: `{}`\\n\\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`.\\n\\n#### beautify\\nType: `Boolean` `Object`  \\nDefault: `false`\\n\\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`\\n\\n#### report\\nChoices: `'min'`, `'gzip'`  \\nDefault: `'min'`\\n\\nEither report only minification result or report minification and gzip results.\\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\\n\\n#### sourceMap\\nType: `Boolean`  \\nDefault: `false`\\n\\nIf `true`, a source map file will be generated in the same directory as the `dest` file. By default it will have the same basename as the `dest` file, but with a `.map` extension.\\n\\n#### sourceMapName\\nType: `String`  `Function`  \\nDefault: `undefined`\\n\\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name.\\n\\n#### sourceMapIn\\nType: `String`  `Function`  \\nDefault: `undefined`\\n\\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the\\nuglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense\\nwhen there's one source file.\\n\\n#### sourceMapIncludeSources\\nType: `Boolean`\\nDefault: `false`\\n\\nPass this flag if you want to include the content of source files in the source map as sourcesContent property.\\n\\n###### enclose\\nType: `Object`  \\nDefault: `undefined`\\n\\nWrap all of the code in a closure with a configurable arguments/parameters list.\\nEach key-value pair in the `enclose` object is effectively an argument-parameter pair.\\n\\n#### wrap\\nType: `String`  \\nDefault: `undefined`\\n\\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\\nFor variables that need to be public `exports` and `global` variables are made available.\\nThe value of wrap is the global variable exports will be available as.\\n\\n#### exportAll\\nType: `Boolean`  \\nDefault: `false`\\n\\nWhen using `wrap` this will make all global functions and variables available via the export variable.\\n\\n#### preserveComments\\nType: `Boolean` `String` `Function`  \\nDefault: `undefined`  \\nOptions: `false` `'all'` `'some'`\\n\\nTurn on preservation of comments.\\n\\n- `false` will strip all comments\\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\\n- `'some'` will preserve all comments that start with a bang (`!`) or include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\\n\\n#### banner\\nType: `String`  \\nDefault: empty string\\n\\nThis string will be prepended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\\n\\n#### footer\\nType: `String`  \\nDefault: empty string\\n\\nThis string will be appended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\\n\\n### Usage examples\\n\\n#### Basic compression\\n\\nThis configuration will compress and mangle the input files using the default options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### No mangling\\n\\nSpecify `mangle: false` to prevent changes to your variable and function names.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      mangle: false\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Reserved identifiers\\n\\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      mangle: {\\n        except: ['jQuery', 'Backbone']\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Source maps\\n\\nGenerate a source map by setting the `sourceMap` option to `true`. The generated\\nsource map will be in the same directory as the destination file. Its name will be the\\nbasename of the destination file with a `.map` extension. Override these\\ndefaults with the `sourceMapName` attribute.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        sourceMap: true,\\n        sourceMapName: 'path/to/sourcemap.map'\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Advanced source maps\\n\\nSet the `sourceMapIncludeSources` option to `true` to embed your sources directly into the map. To include\\na source map from a previous compilation pass it as the value of the `sourceMapIn` option.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        sourceMap: true,\\n        sourceMapIncludeSources: true,\\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\\n\\n\\n#### Discard console.* functions\\n\\nSpecify `drop_console: true` as part of the `compress` options to discard calls to `console.*` functions.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      compress: {\\n        drop_console: true\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Beautify\\n\\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\\n\\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\\n\\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        beautify: true\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    },\\n    my_advanced_target: {\\n      options: {\\n        beautify: {\\n          width: 80,\\n          beautify: true\\n        }\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Banner comments\\n\\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\\n\\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  uglify: {\\n    options: {\\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\\n        '<%= grunt.template.today(\\\"yyyy-mm-dd\\\") %> */'\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Conditional compilation\\n\\nYou can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds.\\n\\nSee [UglifyJS global definitions documentation](http://lisperator.net/uglifyjs/compress#global-defs) for more information.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      compress: {\\n        global_defs: {\\n          \\\"DEBUG\\\": false\\n        },\\n        dead_code: true\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n#### Compiling all files in a folder dynamically\\n\\nThis configuration will compress and mangle the files dynamically.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      files: [{\\n          expand: true,\\n          cwd: 'src/js',\\n          src: '**/*.js',\\n          dest: 'dest/js'\\n      }]\\n    }\\n  }\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-07-25   v0.4.1   fixes npm 2 peerDep issues.\\n * 2014-03-01   v0.4.0   remove grunt-lib-contrib dependency and add more colors\\n * 2014-02-27   v0.3.3   remove unnecessary calls to `grunt.template.process`\\n * 2014-01-22   v0.3.2   fix handling of `sourceMapIncludeSources` option.\\n * 2014-01-20   v0.3.1   fix relative path issue in sourcemaps\\n * 2014-01-16   v0.3.0   refactor sourcemap support\\n * 2013-11-09   v0.2.7   prepending banner if sourceMap option not set, addresses\\n * 2013-11-08   v0.2.6   merged 45, 53, 85 (105 by way of duping 53) Added support for banners in uglified files with sourcemaps Updated docs\\n * 2013-10-28   v0.2.5   Added warning for banners when using sourcemaps\\n * 2013-09-02   v0.2.4   updated sourcemap format via /83\\n * 2013-06-10   v0.2.3   added footer option\\n * 2013-05-31   v0.2.2   Reverted /56 due to /58 until [chrome/239660](https://code.google.com/p/chromium/issues/detail?id=239660&q=sourcemappingurl&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified) [firefox/870361](https://bugzilla.mozilla.org/show_bug.cgi?id=870361) drop\\n * 2013-05-22   v0.2.1   Bumped uglify to ~2.3.5 /55 /40 Changed sourcemappingUrl syntax /56 Disabled sorting of names for consistent mangling /44 Updated docs for sourceMapRoot /47 /25\\n * 2013-03-14   v0.2.0   No longer report gzip results by default. Support `report` option.\\n * 2013-01-30   v0.1.2   Added better error reporting Support for dynamic names of multiple sourcemaps\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching back to this.files api.\\n * 2012-11-28   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com)\\n\\n*This file was generated on Fri Jul 25 2014 12:04:58.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-uglify/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-uglify');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-watch/node_modules/gaze/node_modules/globule/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/package.json:\n   44:   \"readme\": \"This is a fork of tiny-lr. The maintainer of tiny-lr appears to be on a hiatus and this fork takes care of lingering issues until the maintainer of tiny-lr (hopefully) returns.\\n\\n**Changes made:**\\n\\n* Quieter, removes `console.log`s\\n* Use WSS when livereload.js is on HTTPS\\n* Normalize windows paths in livereload.js\\n\\n---\\n\\ntiny-lr\\n-------\\n\\nThis script manages a tiny [LiveReload](http://livereload.com/) server\\nimplementation you can spawn in the background.\\n\\nIt exposes:\\n\\n- a background-friendly bin wrapper (thanks to\\n  [@FGRibreau](https://github.com/FGRibreau) [pid.js\\n  gist](https://gist.github.com/1846952))\\n\\n- [Grunt tasks](https://github.com/mklabs/tiny-lr#using-grunt) to start the server and trigger reload notification. Every task\\n  name is prefixed by `tinylr-`.\\n\\n- [Generic targets](https://github.com/mklabs/tiny-lr#using-make) to include in\\n  your Makefile (`include node_modules/tiny-lr/tasks/tiny-lr.mk`)\\n\\nIt doesn't have any watch ability, it must be done at the build process or\\napplication level.\\n\\nInstead, it exposes a very simple API to notify the server that some\\nchanges have been made, that is then broadcasted to every livereload client\\nconnected.\\n\\n    # notify a single change\\n    curl http://localhost:35729/changed?files=style.css\\n\\n    # notify using a longer path\\n    curl http://localhost:35729/changed?files=js/app.js\\n\\n    # notify multiple changes, comma or space delimited\\n    curl http://localhost:35729/changed?files=index.html,style.css,docs/docco.css\\n\\nOr you can bulk the information into a POST request, with body as a JSON array of files.\\n\\n    curl -X POST http://localhost:35729/changed -d '{ \\\"files\\\": [\\\"style.css\\\", \\\"app.js\\\"] }'\\n\\nAs for the livereload client, you need to install the browser extension:\\nhttp://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\\n(**note**: you need to listen on port 35729 to be able to use with your\\nbrower extension)\\n\\nor add the livereload script tag manually:\\nhttp://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-\\n(and here you can choose whatever port you want)\\n\\n## Integration\\n\\nThis package exposes a `bin` you can decide to install globally, but it's not recommended.\\n\\n    tiny-lr --help\\n\\n    Usage: tiny-lr [options]\\n\\n    Options:\\n      -h, --help        - Show help usage\\n      -v, --version     - Show package version\\n      -p, --port        - Port to listen on (default: 35729)\\n      --pid             - Path to the generated PID file (default: ./tiny-lr.pid)\\n\\n\\nThe best way to integrate the runner in your workflow is to add it as a `reload`\\nstep within your build tool. This build tool can then use the internal binary\\nlinked by npm in `node_modules/.bin/tiny-lr` to not rely on global installs (or\\nuse the server programmtically).\\n\\nYou can start the server using the binary provided, or use your own start script.\\n\\n```js\\nvar tinylr = require('tiny-lr');\\n\\n// standard LiveReload port\\nvar port = 35729;\\n\\n// tinylr(opts) => new tinylr.Server(opts);\\ntinylr().listen(port, function() {\\n  if(err) {\\n    // deal with err\\n    return;\\n  }\\n\\n  console.log('... Listening on %s (pid: %s) ...', port);\\n})\\n```\\n\\nYou can define your own route and listen for specific request:\\n\\n```js\\nvar server = tinylr();\\n\\nserver.on('GET /myplace', function(req, res) {\\n  res.write('Mine');\\n  res.end();\\n})\\n```\\n\\nAnd stop the server manually:\\n\\n```js\\nserver.close();\\n```\\n\\nThis will close any websocket connection established and emit a close event.\\n\\n### Middleware\\n\\nTo use as a connect / express middleware, tiny-lr needs query /\\nbodyParse middlewares prior in the stack.\\n\\nAny handled requests ends at the tinylr level, not found and errors are\\nnexted to the rest of the stack.\\n\\n```js\\n// This binds both express app and tinylr on the same port\\nvar app = express();\\napp.use(express.query())\\n  .use(express.bodyParser())\\n  .use(tinylr.middleware({ app: app }))\\n  .use(express.static(path.resolve('./')))\\n  .use(express.directory(path.resolve('./')))\\n  .listen(35729, function() {\\n    console.log('Listening on %d', 35729);\\n  })\\n```\\n\\nThe port you listen on is important, and tinylr should **always** listen on\\nthe LiveReload standard one: `35729`. Otherwise, you won't be able to rely\\non the browser extensions, though you can still use the manual snippet\\napproach.\\n\\nYou can also start two different servers, one on your app port, the\\nother listening on the LiveReload port. Check the\\n`examples/express/server.js` file to see how.\\n\\n### Using grunt\\n\\nThis package exposes a `tasks/` directory, that you can use within your Gruntfile with:\\n\\n```js\\ngrunt.loadNpmTasks('tiny-lr');\\n```\\n\\n- tinylr-start    - Starts a new tiny-lr Server, with the provided port.\\n- tinylr-reload   - Sends a reload notification to the previously started server.\\n\\n`tinylr-start` should be used with the `watch` task, probably with an alias\\nthat triggers both `tinylr-start watch` tasks.\\n\\n`tinylr-reload` should be configured as a \\\"watch\\\" task in your Gruntfile.\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    reload: {\\n      files: ['**/*.html', '**/*.js', '**/*.css', '**/*.{png,jpg}'],\\n      tasks: 'tinylr-reload'\\n    }\\n  }\\n});\\n\\ngrunt.registerTask('reload', ['tinylr-start', 'watch']);\\n```\\n\\n\\n### Using make\\n\\nSee `tasks/tiny-lr.mk`.\\n\\nInclude this file into your project Makefile to bring in the following targets:\\n\\n- start \\t\\t\\t\\t\\t\\t- Start the LiveReload server\\n- stop \\t\\t\\t\\t\\t\\t\\t- Stops the LiveReload server\\n- livereload \\t\\t\\t\\t- alias to start\\n- livereload-stop \\t- aias to stop\\n\\nThen define your \\\"empty\\\" targets, and the list of files you want to monitor.\\n\\n```make\\nCSS_DIR = app/styles\\nCSS_FILES = $(shell find $(CSS_DIR) -name '*.css')\\n\\n# include the livereload targets\\ninclude node_modules/tiny-lr/tasks/*.mk\\n\\n$(CSS_DIR): $(CSS_FILES)\\n  @echo CSS files changed: $?\\n    @touch $@\\n  curl -X POST http://localhost:35729/changed -d '{ \\\"files\\\": \\\"$?\\\" }'\\n\\nreload-css: livereload $(CSS_DIR)\\n\\n.PHONY: reload-css\\n```\\n\\nThe pattern is always the same:\\n\\n- define a target for your root directory that triggers a POST request\\n- `touch` the directory to update its mtime\\n- add reload target with `livereload` and the list of files to \\\"watch\\\" as\\n  prerequisites\\n\\nYou can chain multiple \\\"reload\\\" targets in a single one:\\n\\n```make\\nreload: reload-js reload-css reload-img reload-EVERYTHING\\n```\\n\\nCombine this with [visionmedia/watch](https://github.com/visionmedia/watch) and\\nyou have a livereload environment.\\n\\n    watch make reload\\n\\n    # add a -q flag to the watch command to suppress most of the annoying output\\n    watch -q reload\\n\\nThe `-q` flag only outputs STDERR, you can in your Makefile redirect the\\noutput of your commands to `>&2` to see them in `watch -q` mode.\\n\\n\\n## Tests\\n\\n    npm test\\n\\n---\\n\\n\\n# TOC\\n   - [tiny-lr](#tiny-lr)\\n     - [GET /](#tiny-lr-get-)\\n     - [GET /changed](#tiny-lr-get-changed)\\n     - [POST /changed](#tiny-lr-post-changed)\\n     - [GET /livereload.js](#tiny-lr-get-livereloadjs)\\n     - [GET /kill](#tiny-lr-get-kill)\\n<a name=\\\"\\\" />\\n\\n<a name=\\\"tiny-lr\\\" />\\n# tiny-lr\\naccepts ws clients.\\n\\n```js\\nvar url = parse(this.request.url);\\nvar server = this.app;\\n\\nvar ws = this.ws = new WebSocket('ws://' + url.host + '/livereload');\\n\\nws.onopen = function(event) {\\n  var hello = {\\n    command: 'hello',\\n    protocols: ['http://livereload.com/protocols/official-7']\\n  };\\n\\n  ws.send(JSON.stringify(hello));\\n};\\n\\nws.onmessage = function(event) {\\n  assert.deepEqual(event.data, JSON.stringify({\\n    command: 'hello',\\n    protocols: ['http://livereload.com/protocols/official-7'],\\n    serverName: 'tiny-lr'\\n  }));\\n\\n  assert.ok(Object.keys(server.clients).length);\\n  done();\\n};\\n```\\n\\nproperly cleans up established connection on exit.\\n\\n```js\\nvar ws = this.ws;\\n\\nws.onclose = done.bind(null, null);\\n\\nrequest(this.server)\\n  .get('/kill')\\n  .expect(200, function() {\\n    console.log('server shutdown');\\n  });\\n```\\n\\n<a name=\\\"tiny-lr\\\" />\\n# tiny-lr\\n<a name=\\\"tiny-lr-get-\\\" />\\n## GET /\\nrespond with nothing, but respond.\\n\\n```js\\nrequest(this.server)\\n  .get('/')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"tinylr\\\":\\\"Welcome\\\",\\\"version\\\":\\\"0.0.1\\\"}')\\n  .expect(200, done);\\n```\\n\\nunknown route respond with proper 404 and error message.\\n\\n```js\\nrequest(this.server)\\n  .get('/whatev')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"error\\\":\\\"not_found\\\",\\\"reason\\\":\\\"no such route\\\"}')\\n  .expect(404, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-changed\\\" />\\n## GET /changed\\nwith no clients, no files.\\n\\n```js\\nrequest(this.server)\\n  .get('/changed')\\n  .expect('Content-Type', /json/)\\n  .expect(/\\\"clients\\\":\\\\[\\\\]/)\\n  .expect(/\\\"files\\\":\\\\[\\\\]/)\\n  .expect(200, done);\\n```\\n\\nwith no clients, some files.\\n\\n```js\\nrequest(this.server)\\n  .get('/changed?files=gonna.css,test.css,it.css')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"clients\\\":[],\\\"files\\\":[\\\"gonna.css\\\",\\\"test.css\\\",\\\"it.css\\\"]}')\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-post-changed\\\" />\\n## POST /changed\\nwith no clients, no files.\\n\\n```js\\nrequest(this.server)\\n  .post('/changed')\\n  .expect('Content-Type', /json/)\\n  .expect(/\\\"clients\\\":\\\\[\\\\]/)\\n  .expect(/\\\"files\\\":\\\\[\\\\]/)\\n  .expect(200, done);\\n```\\n\\nwith no clients, some files.\\n\\n```js\\nvar data = { clients: [], files: ['cat.css', 'sed.css', 'ack.js'] };\\n\\nrequest(this.server)\\n  .post('/changed')\\n  .send({ files: data.files })\\n  .expect('Content-Type', /json/)\\n  .expect(JSON.stringify(data))\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-livereloadjs\\\" />\\n## GET /livereload.js\\nrespond with livereload script.\\n\\n```js\\nrequest(this.server)\\n  .get('/livereload.js')\\n  .expect(/LiveReload/)\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-kill\\\" />\\n## GET /kill\\nshutdown the server.\\n\\n```js\\nvar server = this.server;\\nrequest(server)\\n  .get('/kill')\\n  .expect(200, function(err) {\\n    if(err) return done(err);\\n    assert.ok(!server._handle);\\n    done();\\n  });\\n```\\n\\n---\\n\\n- 2013-01-21 - v0.0.5 - [PR #18](https://github.com/mklabs/tiny-lr/pull/18) / [PR #21](https://github.com/mklabs/tiny-lr/pull/21) - https support / expose reload flags through options\\n- 2013-01-21 - v0.0.4 - middleware support\\n- 2013-01-20 - v0.0.3 - serve livereload from repo (#4)\\n- 2013-01-12 - v0.0.2 - tasks - support for grunt 0.3.x (#1)\\n- 2013-01-05 - v0.0.1 - Initial release\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/readme.md:\n  151: grunt.loadNpmTasks('tiny-lr');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-watch/package.json:\n   53:   \"readme\": \"# grunt-contrib-watch v0.6.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-watch.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-watch)\\n\\n> Run predefined tasks whenever watched file patterns are added, changed or deleted.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-watch --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-watch');\\n```\\n\\n\\n\\n\\n## Watch task\\n_Run this task with the `grunt watch` command._\\n\\n\\n### Settings\\n\\nThere are a number of options available. Please review the [minimatch options here](https://github.com/isaacs/minimatch#options). As well as some additional options as follows:\\n\\n#### files\\nType: `String|Array`\\n\\nThis defines what file patterns this task will watch. Can be a string or an array of files and/or minimatch patterns.\\n\\n#### tasks\\nType: `String|Array`\\n\\nThis defines which tasks to run when a watched file event occurs.\\n\\n#### options.spawn\\nType: `Boolean`\\nDefault: true\\n\\nWhether to spawn task runs in a child process. Setting this option to `false` speeds up the reaction time of the watch (usually 500ms faster for most) and allows subsequent task runs to share the same context. Not spawning task runs can make the watch more prone to failing so please use as needed.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: ['**/*.js'],\\n    tasks: ['jshint'],\\n    options: {\\n      spawn: false,\\n    },\\n  },\\n},\\n```\\n\\n*For backwards compatibility the option `nospawn` is still available and will do the opposite of `spawn`.*\\n\\n#### options.interrupt\\nType: `Boolean`\\nDefault: false\\n\\nAs files are modified this watch task will spawn tasks in child processes. The default behavior will only spawn a new child process per target when the previous process has finished. Set the `interrupt` option to true to terminate the previous process and spawn a new one upon later changes.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['jshint'],\\n    options: {\\n      interrupt: true,\\n    },\\n  },\\n},\\n```\\n\\n#### options.debounceDelay\\nType: `Integer`\\nDefault: 500\\n\\nHow long to wait before emitting events in succession for the same filepath and status. For example if your `Gruntfile.js` file was `changed`, a `changed` event will only fire again after the given milliseconds.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['jshint'],\\n    options: {\\n      debounceDelay: 250,\\n    },\\n  },\\n},\\n```\\n\\n#### options.interval\\nType: `Integer`\\nDefault: 100\\n\\nThe `interval` is passed to `fs.watchFile`. Since `interval` is only used by `fs.watchFile` and this watcher also uses `fs.watch`; it is recommended to ignore this option. *Default is 100ms*.\\n\\n#### options.event\\nType: `String|Array`\\nDefault: `'all'`\\n\\nSpecify the type watch event that trigger the specified task. This option can be one or many of: `'all'`, `'changed'`, `'added'` and `'deleted'`.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['generateFileManifest'],\\n    options: {\\n      event: ['added', 'deleted'],\\n    },\\n  },\\n},\\n```\\n\\n#### options.reload\\nType: `Boolean`\\nDefault: `false`\\n\\nBy default, if `Gruntfile.js` is being watched, then changes to it will trigger the watch task to restart, and reload the `Gruntfile.js` changes.\\nWhen `reload` is set to `true`, changes to *any* of the watched files will trigger the watch task to restart.\\nThis is especially useful if your `Gruntfile.js` is dependent on other files.\\n\\n```js\\nwatch: {\\n  configFiles: {\\n    files: [ 'Gruntfile.js', 'config/*.js' ],\\n    options: {\\n      reload: true\\n    }\\n  }\\n}\\n```\\n\\n\\n#### options.forever\\nType: `Boolean`\\nDefault: true\\n\\nThis is *only a task level option* and cannot be configured per target. By default the watch task will duck punch `grunt.fatal` and `grunt.warn` to try and prevent them from exiting the watch process. If you don't want `grunt.fatal` and `grunt.warn` to be overridden set the `forever` option to `false`.\\n\\n#### options.dateFormat\\nType: `Function`\\n\\nThis is *only a task level option* and cannot be configured per target. By default when the watch has finished running tasks it will display the message `Completed in 1.301s at Thu Jul 18 2013 14:58:21 GMT-0700 (PDT) - Waiting...`. You can override this message by supplying your own function:\\n\\n```js\\nwatch: {\\n  options: {\\n    dateFormat: function(time) {\\n      grunt.log.writeln('The watch finished in ' + time + 'ms at' + (new Date()).toString());\\n      grunt.log.writeln('Waiting for more changes...');\\n    },\\n  },\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: 'jshint',\\n  },\\n},\\n```\\n\\n#### options.atBegin\\nType: `Boolean`\\nDefault: false\\n\\nThis option will trigger the run of each specified task at startup of the watcher.\\n\\n#### options.livereload\\nType: `Boolean|Number|Object`\\nDefault: false\\n\\nSet to `true` or set `livereload: 1337` to a port number to enable live reloading. Default and recommended port is `35729`.\\n\\nIf enabled a live reload server will be started with the watch task per target. Then after the indicated tasks have ran, the live reload server will be triggered with the modified files.\\n\\nExample:\\n```js\\nwatch: {\\n  css: {\\n    files: '**/*.sass',\\n    tasks: ['sass'],\\n    options: {\\n      livereload: true,\\n    },\\n  },\\n},\\n```\\n\\nIt's possible to get livereload working over https connections. To do this, pass an object to `livereload` with a `key` and `cert` paths specified.\\n\\nExample:\\n```js\\nwatch: {\\n  css: {\\n    files: '**/*.sass',\\n    tasks: ['sass'],\\n    options: {\\n      livereload: {\\n        port: 9000,\\n        key: grunt.file.read('path/to/ssl.key'),\\n        cert: grunt.file.read('path/to/ssl.crt')\\n        // you can pass in any other options you'd like to the https server, as listed here: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener\\n      }\\n    },\\n  },\\n},\\n```\\n\\n\\n#### options.cwd\\nType: `String|Object`\\nDefault: `process.cwd()`\\n\\nAbility to set the current working directory. Defaults to `process.cwd()`. Can either be a string to set the cwd to match files and spawn tasks. Or an object to set each independently. Such as `options: { cwd: { files: 'match/files/from/here', spawn: 'but/spawn/files/from/here' } }`.\\n\\n#### options.livereloadOnError\\nType: `Boolean`  \\nDefault: `true`  \\n\\nOption to prevent the livereload if the executed tasks encountered an error.  If set to `false`, the livereload will only be triggered if all tasks completed successfully.\\n\\n### Examples\\n\\n```js\\n// Simple config to run jshint any time a file is added, changed or deleted\\ngrunt.initConfig({\\n  watch: {\\n    files: ['**/*'],\\n    tasks: ['jshint'],\\n  },\\n});\\n```\\n\\n```js\\n// Advanced config. Run specific tasks when specific files are added, changed or deleted.\\ngrunt.initConfig({\\n  watch: {\\n    gruntfile: {\\n      files: 'Gruntfile.js',\\n      tasks: ['jshint:gruntfile'],\\n    },\\n    src: {\\n      files: ['lib/*.js', 'css/**/*.scss', '!lib/dontwatch.js'],\\n      tasks: ['default'],\\n    },\\n    test: {\\n      files: '<%= jshint.test.src %>',\\n      tasks: ['jshint:test', 'qunit'],\\n    },\\n  },\\n});\\n```\\n\\n#### Using the `watch` event\\nThis task will emit a `watch` event when watched files are modified. This is useful if you would like a simple notification when files are edited or if you're using this task in tandem with another task. Here is a simple example using the `watch` event:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    scripts: {\\n      files: ['lib/*.js'],\\n    },\\n  },\\n});\\ngrunt.event.on('watch', function(action, filepath, target) {\\n  grunt.log.writeln(target + ': ' + filepath + ' has ' + action);\\n});\\n```\\n\\n**The `watch` event is not intended for replacing the standard Grunt API for configuring and running tasks. If you're trying to run tasks from within the `watch` event you're more than likely doing it wrong. Please read [configuring tasks](http://gruntjs.com/configuring-tasks).**\\n\\n##### Compiling Files As Needed\\nA very common request is to only compile files as needed. Here is an example that will only lint changed files with the `jshint` task:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    scripts: {\\n      files: ['lib/*.js'],\\n      tasks: ['jshint'],\\n      options: {\\n        spawn: false,\\n      },\\n    },\\n  },\\n  jshint: {\\n    all: {\\n      src: ['lib/*.js'],\\n    },\\n  },\\n});\\n\\n// on watch events configure jshint:all to only run on changed file\\ngrunt.event.on('watch', function(action, filepath) {\\n  grunt.config('jshint.all.src', filepath);\\n});\\n```\\n\\nIf you need to dynamically modify your config, the `spawn` option must be disabled to keep the watch running under the same context.\\n\\nIf you save multiple files simultaneously you may opt for a more robust method:\\n\\n```js\\nvar changedFiles = Object.create(null);\\nvar onChange = grunt.util._.debounce(function() {\\n  grunt.config('jshint.all.src', Object.keys(changedFiles));\\n  changedFiles = Object.create(null);\\n}, 200);\\ngrunt.event.on('watch', function(action, filepath) {\\n  changedFiles[filepath] = action;\\n  onChange();\\n});\\n```\\n\\n#### Live Reloading\\nLive reloading is built into the watch task. Set the option `livereload` to `true` to enable on the default port `35729` or set to a custom port: `livereload: 1337`.\\n\\nThe simplest way to add live reloading to all your watch targets is by setting `livereload` to `true` at the task level. This will run a single live reload server and trigger the live reload for all your watch targets:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    options: {\\n      livereload: true,\\n    },\\n    css: {\\n      files: ['public/scss/*.scss'],\\n      tasks: ['compass'],\\n    },\\n  },\\n});\\n```\\n\\nYou can also configure live reload for individual watch targets or run multiple live reload servers. Just be sure if you're starting multiple servers they operate on different ports:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    css: {\\n      files: ['public/scss/*.scss'],\\n      tasks: ['compass'],\\n      options: {\\n        // Start a live reload server on the default port 35729\\n        livereload: true,\\n      },\\n    },\\n    another: {\\n      files: ['lib/*.js'],\\n      tasks: ['anothertask'],\\n      options: {\\n        // Start another live reload server on port 1337\\n        livereload: 1337,\\n      },\\n    },\\n    dont: {\\n      files: ['other/stuff/*'],\\n      tasks: ['dostuff'],\\n    },\\n  },\\n});\\n```\\n\\n##### Enabling Live Reload in Your HTML\\nOnce you've started a live reload server you'll be able to access the live reload script. To enable live reload on your page, add a script tag before your closing `</body>` tag pointing to the `livereload.js` script:\\n\\n```html\\n<script src=\\\"//localhost:35729/livereload.js\\\"></script>\\n```\\n\\nFeel free to add this script to your template situation and toggle with some sort of `dev` flag.\\n\\n##### Using Live Reload with the Browser Extension\\nInstead of adding a script tag to your page, you can live reload your page by installing a browser extension. Please visit [how do I install and use the browser extensions](http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-) for help installing an extension for your browser.\\n\\nOnce installed please use the default live reload port `35729` and the browser extension will automatically reload your page without needing the `<script>` tag.\\n\\n##### Using Connect Middleware\\nSince live reloading is used when developing, you may want to disable building for production (and are not using the browser extension). One method is to use Connect middleware to inject the script tag into your page. Try the [connect-livereload](https://github.com/intesso/connect-livereload) middleware for injecting the live reload script into your page.\\n\\n##### Rolling Your Own Live Reload\\nLive reloading is made easy by the library [tiny-lr](https://github.com/mklabs/tiny-lr). It is encouraged to read the documentation for `tiny-lr`. If you would like to trigger the live reload server yourself, simply POST files to the URL: `http://localhost:35729/changed`. Or if you rather roll your own live reload implementation use the following example:\\n\\n```js\\n// Create a live reload server instance\\nvar lrserver = require('tiny-lr')();\\n\\n// Listen on port 35729\\nlrserver.listen(35729, function(err) { console.log('LR Server Started'); });\\n\\n// Then later trigger files or POST to localhost:35729/changed\\nlrserver.changed({body:{files:['public/css/changed.css']}});\\n```\\n\\n##### Live Reload with Preprocessors\\nAny time a watched file is edited with the `livereload` option enabled, the file will be sent to the live reload server. Some edited files you may desire to have sent to the live reload server, such as when preprocessing (`sass`, `less`, `coffeescript`, etc). As any file not recognized will reload the entire page as opposed to just the `css` or `javascript`.\\n\\nThe solution is to point a `livereload` watch target to your destination files:\\n\\n```js\\ngrunt.initConfig({\\n  sass: {\\n    dev: {\\n      src: ['src/sass/*.sass'],\\n      dest: 'dest/css/index.css',\\n    },\\n  },\\n  watch: {\\n    sass: {\\n      // We watch and compile sass files as normal but don't live reload here\\n      files: ['src/sass/*.sass'],\\n      tasks: ['sass'],\\n    },\\n    livereload: {\\n      // Here we watch the files the sass task will compile to\\n      // These files are sent to the live reload server after sass compiles to them\\n      options: { livereload: true },\\n      files: ['dest/**/*'],\\n    },\\n  },\\n});\\n```\\n\\n### FAQs\\n\\n#### How do I fix the error `EMFILE: Too many opened files.`?\\nThis is because of your system's max opened file limit. For OSX the default is very low (256). Temporarily increase your limit with `ulimit -n 10480`, the number being the new max limit.\\n\\nIn some versions of OSX the above solution doesn't work. In that case try `launchctl limit maxfiles 10480 10480 ` and restart your terminal. See [here](http://superuser.com/questions/261023/how-to-change-default-ulimit-values-in-mac-os-x-10-6).\\n\\n#### Can I use this with Grunt v0.3?\\n`grunt-contrib-watch@0.1.x` is compatible with Grunt v0.3 but it is highly recommended to upgrade Grunt instead.\\n\\n#### Why is the watch devouring all my memory/cpu?\\nLikely because of an enthusiastic pattern trying to watch thousands of files. Such as `'**/*.js'` but forgetting to exclude the `node_modules` folder with `'!**/node_modules/**'`. Try grouping your files within a subfolder or be more explicit with your file matching pattern.\\n\\nAnother reason if you're watching a large number of files could be the low default `interval`. Try increasing with `options: { interval: 5007 }`. Please see issues [#35](https://github.com/gruntjs/grunt-contrib-watch/issues/145) and [#145](https://github.com/gruntjs/grunt-contrib-watch/issues/145) for more information.\\n\\n#### Why spawn as child processes as a default?\\nThe goal of this watch task is as files are changed, run tasks as if they were triggered by the user themself. Each time a user runs `grunt` a process is spawned and tasks are ran in succession. In an effort to keep the experience consistent and continually produce expected results, this watch task spawns tasks as child processes by default.\\n\\nSandboxing task runs also allows this watch task to run more stable over long periods of time. As well as more efficiently with more complex tasks and file structures.\\n\\nSpawning does cause a performance hit (usually 500ms for most environments). It also cripples tasks that rely on the watch task to share the context with each subsequent run (i.e., reload tasks). If you would like a faster watch task or need to share the context please set the `spawn` option to `false`. Just be aware that with this option enabled, the watch task is more prone to failure.\\n\\n\\n## Release History\\n\\n * 2014-03-19   v0.6.1   Fix for watch targets named \\\"default\\\"\\n * 2014-03-11   v0.6.0   Clear changed files after triggering live reload to ensure they're only triggered once. cwd option now accepts separate settings for files and spawn. Fix to make interrupt work more than once. Enable live reload over HTTPS. Print newline after initial 'Waiting...' Remove deprecated grunt.util libs Add reload option to specify files other than Gruntfile files to reload. Update to gaze@0.5.1 Use fork of tiny-lr (which has quiter operation, support for HTTPS and windows path fixes) Add livereloadOnError, which if set to false will not trigger live reload if there is an error.\\n * 2013-08-25   v0.5.3   Fixed for live reload missing files.\\n * 2013-08-16   v0.5.2   Fixed issue running tasks after gruntfile is reloaded. Ignores empty file paths.\\n * 2013-07-20   v0.5.1   Fixed issue with options resetting.\\n * 2013-07-18   v0.5.0   Added target name to watch event. Added atBegin option to run tasks when watcher starts. Changed nospawn option to spawn (nospawn still available for backwards compatibility). Moved libs/vars into top scope to prevent re-init. Bumped Gaze version to ~0.4. Re-grab task/target options upon each task run. Add dateFormat option to override the date/time output upon completion.\\n * 2013-05-27   v0.4.4   Remove gracefully closing SIGINT. Not needed and causes problems for Windows. Ensure tasks are an array to not conflict with cliArgs.\\n * 2013-05-11   v0.4.3   Only group changed files per target to send correct files to live reload.\\n * 2013-05-09   v0.4.2   Fix for closing watchers.\\n * 2013-05-09   v0.4.1   Removed \\\"beep\\\" notification. Tasks now optional with livereload option. Reverted \\\"run again\\\" with interrupt off to fix infinite recursion issue. Watchers now close more properly on task run.\\n * 2013-05-03   v0.4.0   Option livereload to start live reload servers. Will reload a Gruntfile before running tasks if Gruntfile is modified. Option event to only trigger watch on certain events. Refactor watch task into separate task runs per target. Option forever to override grunt.fatal/warn to help keeping the watch alive with nospawn enabled. Emit a beep upon complete. Logs all watched files with verbose flag set. If interrupt is off, will run the tasks once more if watch triggered during a previous task run. tasks property is optional for use with watch event. Watchers properly closed when exiting.\\n * 2013-02-28   v0.3.1   Fix for top level options.\\n * 2013-02-27   v0.3.0   nospawn option added to run tasks without spawning as child processes. Watch emits 'watch' events upon files being triggered with grunt.event. Completion time in seconds and date/time shown after tasks ran. Negate file patterns fixed. Tasks debounced individually to handle simultaneous triggering for multiple targets. Errors handled better and viewable with --stack cli option. Code complexity reduced making the watch task code easier to read.\\n * 2013-02-15   v0.2.0   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.2.0rc7   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.2.0rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-12-15   v0.2.0a   Conversion to grunt v0.4 conventions. Remove node v0.6 and grunt v0.3 support. Allow watch task to be renamed. Use grunt.util.spawn \\\"grunt\\\" option. Updated to gaze@0.3.0, forceWatchMethod option removed.\\n * 2012-11-01   v0.1.4   Prevent watch from spawning duplicate watch tasks\\n * 2012-10-28   v0.1.3   Better method to spawn the grunt bin Bump gaze to v0.2.0. Better handles some events and new option forceWatchMethod Only support Node.js >= v0.8\\n * 2012-10-17   v0.1.2   Only spawn a process per task one at a time Add interrupt option to cancel previous spawned process Grunt v0.3 compatibility changes\\n * 2012-10-16   v0.1.1   Fallback to global grunt bin if local doesnt exist. Fatal if bin cannot be found Update to gaze 0.1.6\\n * 2012-10-08   v0.1.0   Release watch task Remove spawn from helper Run on Grunt v0.4\\n\\n---\\n\\nTask submitted by [Kyle Robinson Young](http://dontkry.com)\\n\\n*This file was generated on Wed Mar 19 2014 13:09:11.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-watch/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/Gruntfile.js:\n   39:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   40:     grunt.loadNpmTasks('grunt-contrib-watch');\n   41:     grunt.loadNpmTasks('grunt-simple-mocha');\n   42:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/inquirer/Gruntfile.js:\n   23:   grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n   24:   grunt.loadNpmTasks(\"grunt-simple-mocha\");\n   25:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/cdnjs-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/google-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/package.json:\n   35:   \"readme\": \"# grunt-google-cdn [![Build Status](https://travis-ci.org/btford/grunt-google-cdn.png)](https://travis-ci.org/btford/grunt-google-cdn)\\n Grunt task for replacing refs to resources on the [Google CDN](https://developers.google.com/speed/libraries/devguide)\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-google-cdn\\n```\\n\\nInstall CDN data module: `npm install google-cdn-data` (see list of more [data modules](#cdn-data-modules) below)\\n\\nIt manages dependencies using [Bower](http://bower.io/), be sure to have it installed, and a bower.json/component.json in your project.\\n\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-google-cdn');\\n```\\n\\nRun this task with the `grunt cdnify` command.\\n\\n### Configuration\\n\\nWithin your Gruntfile.js file, you need to specify the html directory that contains the html referencing your CDN files.\\n\\n```js\\ncdnify: {\\n  options: {\\n    cdn: require('google-cdn-data')\\n  }\\n  dist: {\\n    html: ['app/*.html']\\n  }\\n}\\n```\\nYou will need a valid bower.json/component.json file in your project, that has dependencies and a version listed accordingly\\n\\n```json\\n{\\n  \\\"name\\\": \\\"myAwesomeApp\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"dependencies\\\": {\\n    \\\"rsvp\\\": \\\"*\\\",\\n    \\\"carve\\\": \\\">=0.0.1\\\",\\n    \\\"es5-shim\\\": \\\"~2.0.8\\\",\\n    \\\"optimist\\\" :  \\\"0.2.x\\\"\\n  }\\n```\\n\\nIf any updates are found, it will go through the files you specified, updating any references to those scripts.\\n\\n\\n### Options\\n\\n- `cdn`: defaults to `require('google-cdn-data')`. CDN you want to use. Object of the following format:\\n\\n  ```javascript\\n  {\\n    jquery: {\\n      versions: ['2.0.3', '2.0.2', '2.0.1', '2.0.0'],\\n      url: function (version) {\\n        return '//my.own.cdn/libs/jquery/' + version + '/jquery.min.js';\\n      }\\n    }\\n  }\\n  ```\\nFor options consult the [google-cdn docs](https://github.com/passy/google-cdn#api).\\n  \\n## CDN data modules\\n\\n- [google-cdn-data](https://github.com/shahata/google-cdn-data)\\n- [cdnjs-cdn-data](https://github.com/shahata/cdnjs-cdn-data)\\n- [jsdelivr-cdn-data](https://github.com/shahata/jsdelivr-cdn-data)\\n\\n## Release History\\n\\n * 2013-04-24   v0.1.4   removed the extra s in component.json\\n * 2013-04-22   v0.1.3   Made 'components.json' configurable via bowerrc, added unstable AngularJS and jQuery 2.0.0\\n * 2013-04-07   v0.1.2   update available AngularJS versions, add .jshintrc\\n * 2013-02-24   v0.1.0   add support for versions, hositing to avoid conflicts with usemin\\n * 2013-02-18   v0.0.1   Initial Commit\\n\\n---\\n\\n## License\\nBSD\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/README.md:\n   21: grunt.loadNpmTasks('grunt-google-cdn');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-karma/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n    5:   grunt.loadNpmTasks('grunt-contrib-watch');\n    6:   grunt.loadNpmTasks('grunt-conventional-changelog');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-karma/package.json:\n   45:   \"readme\": \"# grunt-karma [![Build Status](https://travis-ci.org/karma-runner/grunt-karma.png?branch=master)](https://travis-ci.org/karma-runner/grunt-karma)\\n\\n> Grunt plugin for [Karma](https://github.com/karma-runner/karma)\\n\\nThis current version `0.8.0` uses `karma@0.12.x`. For using older versions see the\\nold releases of grunt-karma.\\n\\n## Getting Started\\nFrom the same directory as your project's Gruntfile and package.json, install\\nthis plugin with the following command:\\n\\n```bash\\n$ npm install grunt-karma --save-dev\\n```\\n\\nOnce that's done, add this line to your project's Gruntfile:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-karma');\\n```\\n\\n## Config\\nInside your `Gruntfile.js` file, add a section named `karma`, containing\\nany number of configurations for running karma. You can either put your\\nconfig in a [karma config file] or leave it all in your Gruntfile (recommended).\\n\\n### Here's an example that points to the config file:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js'\\n  }\\n}\\n```\\n\\n### Here's an example that puts the config in the Gruntfile:\\n\\n```js\\nkarma: {\\n  unit: {\\n    options: {\\n      files: ['test/**/*.js']\\n    }\\n  }\\n}\\n```\\n\\nYou can override any of the config file's settings by putting them\\ndirectly in the Gruntfile:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    runnerPort: 9999,\\n    singleRun: true,\\n    browsers: ['PhantomJS'],\\n    logLevel: 'ERROR'\\n  }\\n}\\n```\\n\\nTo change the `logLevel` in the grunt config file instead of the karma config, use one of the following strings:\\n`OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`\\n\\n### Config with Grunt Template Strings in `files`\\n\\nWhen using template strings in the `files` option, the results will flattened. Therefore, if you include a variable that includes an array, the array will be flattened before being passed to Karma.\\n\\nExample:\\n\\n```js\\nmeta: {\\n  jsFiles: ['jquery.js','angular.js']\\n},\\nkarma: {\\n  options: {\\n    files: ['<%= meta.jsFiles %>','angular-mocks.js','**/*-spec.js']\\n  }\\n}\\n```\\n\\n## Sharing Configs\\nIf you have multiple targets, it may be helpful to share common\\nconfiguration settings between them. Grunt-karma supports this by\\nusing the `options` property:\\n\\n```js\\nkarma: {\\n  options: {\\n    configFile: 'karma.conf.js',\\n    runnerPort: 9999,\\n    browsers: ['Chrome', 'Firefox']\\n  },\\n  continuous: {\\n    singleRun: true,\\n    browsers: ['PhantomJS']\\n  },\\n  dev: {\\n    reporters: 'dots'\\n  }\\n}\\n```\\n\\nIn this example the `continuous` and `dev` targets will both use\\nthe `configFile` and `runnerPort` specified in the `options`. But\\nthe `continuous` target will override the browser setting to use\\nPhantomJS, and also run as a singleRun. The `dev` target will simply\\nchange the reporter to dots.\\n\\n## Running tests\\nThere are three ways to run your tests with karma:\\n\\n### Karma Server with Auto Runs on File Change\\nSetting the `autoWatch` option to true will instruct karma to start\\na server and watch for changes to files, running tests automatically:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    autoWatch: true\\n  }\\n}\\n```\\nNow run `$ grunt karma`\\n\\n### Karma Server with Grunt Watch\\nMany Grunt projects watch several types of files using [grunt-contrib-watch].\\nConfig karma like usual (without the autoWatch option), and add\\n`background:true`:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    background: true\\n  }\\n}\\n```\\nThe `background` option will tell grunt to run karma in a child process\\nso it doesn't block subsequent grunt tasks.\\n\\nConfig your `watch` task to run the karma task with the `:run` flag. For example:\\n\\n```js\\nwatch: {\\n  //run unit tests with karma (server needs to be already running)\\n  karma: {\\n    files: ['app/js/**/*.js', 'test/browser/**/*.js'],\\n    tasks: ['karma:unit:run'] //NOTE the :run flag\\n  }\\n},\\n```\\n\\nIn your terminal window run `$ grunt karma:unit:start watch`, which starts the\\nkarma server and the watch task. Now when grunt watch detects a change to\\none of your watched files, it will run the tests specified in the `unit`\\ntarget using the already running karma server. This is the preferred method\\nfor development.\\n\\n### Single Run\\nKeeping a browser window & karma server running during development is\\nproductive, but not a good solution for build processes. For that reason karma\\nprovides a \\\"continuous integration\\\" mode, which will launch the specified\\nbrowser(s), run the tests, and close the browser(s). It also supports running\\ntests in [PhantomJS], a headless webkit browser which is great for running tests as part of a build. To run tests in continous integration mode just add the `singleRun` option:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'config/karma.conf.js',\\n  },\\n  //continuous integration mode: run tests once in PhantomJS browser.\\n  continuous: {\\n    configFile: 'config/karma.conf.js',\\n    singleRun: true,\\n    browsers: ['PhantomJS']\\n  },\\n}\\n```\\n\\nThe build would then run `grunt karma:continuous` to start PhantomJS,\\nrun tests, and close PhantomJS.\\n\\n## Using additional client.args\\nYou can pass arbitrary `client.args` through the commandline like this:\\n\\n```bash\\n$ grunt karma:dev watch --grep=mypattern\\n```\\n\\n\\n## License\\nMIT License\\n\\n[karma-config-file]: http://karma-runner.github.com/0.8/config/configuration-file.html\\n[grunt-contrib-watch]: https://github.com/gruntjs/grunt-contrib-watch\\n[PhantomJS]: http://phantomjs.org/\\n[karma-mocha]: https://github.com/karma-runner/karma-mocha\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-karma/README.md:\n   19: grunt.loadNpmTasks('grunt-karma');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-newer/gruntfile.js:\n   68:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   69:   grunt.loadNpmTasks('grunt-contrib-watch');\n   70:   grunt.loadNpmTasks('grunt-cafe-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-newer/package.json:\n   56:   \"readme\": \"# grunt-newer\\n\\nConfigure [Grunt](http://gruntjs.com/) tasks to run with newer files only.\\n\\n**Synopsis:**  The [`newer`](#newer) task will configure another task to run with `src` files that are *a)* newer than the `dest` files or *b)* newer than the last successful run (if there are no `dest` files).  See below for examples and more detail.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.1`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [`gruntfile.js`](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-newer --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your `gruntfile.js` with this line:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-newer');\\n```\\n\\n<a name=\\\"newer\\\"></a>\\n## The `newer` task\\n\\nThe `newer` task doesn't require any special configuration.  To use it, just add `newer` as the first argument when running other tasks.\\n\\nFor example, if you want to use [Uglify](https://npmjs.org/package/grunt-contrib-uglify) to minify your source files only when one or more of them is newer than the previously minified destination file, configure the `uglify` task as you would otherwise, and then register a task with `newer` at the front.\\n\\n```js\\n  grunt.initConfig({\\n    uglify: {\\n      all: {\\n        files: {\\n          'dest/app.min.js': ['src/**/*.js']\\n        }\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-uglify');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n  grunt.registerTask('minify', ['newer:uglify:all']);\\n```\\n\\nWith the above configuration the `minify` task will only run `uglify` if one or more of the `src/**/*.js` files is newer than the `dest/app.min.js` file.\\n\\nThe above example shows how the `newer` task works with other tasks that specify both `src` and `dest` files.  In this case, the modification time of `src` files are compared to modification times of corresponding `dest` files to determine which `src` files to include.\\n\\nThe `newer` task can also be used with tasks that don't generate any `dest` files.  In this case, `newer` will only use files that are newer than the last successful run of the same task.\\n\\nFor example, if you want to run [JSHint](https://npmjs.org/package/grunt-contrib-jshint) on only those files that have been modified since the last successful run, configure the `jshint` task as you would otherwise, and then register a task with `newer` at the front.\\n\\n```js\\n  grunt.initConfig({\\n    jshint: {\\n      options: {\\n        jshintrc: '.jshintrc'\\n      },\\n      all: {\\n        src: 'src/**/*.js'\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-jshint');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n  grunt.registerTask('lint', ['newer:jshint:all']);\\n```\\n\\nWith the above configuration, running `grunt lint` will configure your `jshint:all` task to use only files in the `jshint.all.src` config that have been modified since the last successful run of the same task.  The first time the `jshint:newer:all` task runs, all source files will be used.  After that, only the files you modify will be run through the linter.\\n\\nAnother example is to use the `newer` task in conjunction with `watch`.  For example, you might want to set up a watch to run a linter on all your `.js` files whenever one changes.  With the `newer` task, instead of re-running the linter on all files, you only need to run it on the files that changed.\\n\\n```js\\n  var srcFiles = 'src/**/*.js';\\n\\n  grunt.initConfig({\\n    jshint: {\\n      all: {\\n        src: srcFiles\\n      }\\n    },\\n    watch: {\\n      all: {\\n        files: srcFiles,\\n        tasks: ['newer:jshint:all']\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-jshint');\\n  grunt.loadNpmTasks('grunt-contrib-watch');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n```\\n\\nWith the above configuration, running `grunt jshint watch` will first lint all your files with `jshint` and then set up a watch.  Whenever one of your source files changes, the `jshint` task will be run on just the modified file.\\n\\n*Note:* If your task is configured with `dest` files, `newer` will run your task with only those files that are newer than the corresponding `dest` files.\\n\\n## Options for the `newer` task\\n\\nIn most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\\n\\n#### <a id=\\\"optionscache\\\">options.cache</a>\\n * type: `string`\\n * default: `node_modules/grunt-newer/.cache`\\n\\nTo keep track of timestamps for successful runs, the `newer` task writes to a cache directory.  The default is to use a `.cache` directory within the `grunt-newer` installation directory.  If you need timestamp info to be written to a different location, configure the task with a `cache` option.\\n\\nExample use of the `cache` option:\\n\\n```js\\n  grunt.initConfig({\\n    newer: {\\n      options: {\\n        cache: 'path/to/custom/cache/directory'\\n      }\\n    }\\n  });\\n```\\n\\n#### <a id=\\\"optionsoverride\\\">options.override</a>\\n * type: `function(Object, function(boolean))`\\n * default: `null`\\n\\nThe `newer` task determines which files to include for a specific task based on file modification time.  There are occassions where you may want to include a file even if it has not been modified.  For example, if a LESS file imports some other files, you will want to include it if any of the imports have been modified.  To support this, you can provide an `override` function that takes two arguments:\\n\\n * **details** - `Object`\\n   * **task** - `string` The currently running task name.\\n   * **target** - `string` The currently running target name.\\n   * **path** - `string` The path to a `src` file that appears to be \\\"older\\\" (not modified since the time below).\\n   * **time** - `Date` The comparison time.  For tasks with `dest` files, this is the modification time of the `dest` file.  For tasks without `dest` files, this is the last successful run time of the same task.\\n * **include** - `function(boolean)` A callback that determines whether this `src` file should be included.  Call with `true` to include or `false` to exclude the file.\\n\\nExample use of the `override` option:\\n\\n```js\\n  grunt.initConfig({\\n    newer: {\\n      options: {\\n        override: function(detail, include) {\\n          if (detail.task === 'less') {\\n            checkForModifiedImports(detail.path, detail.time, include);\\n          } else {\\n            include(false);\\n          }\\n        }\\n      }\\n    }\\n  });\\n```\\n\\n## That's it\\n\\nPlease [submit an issue](https://github.com/tschaub/grunt-newer/issues) if you encounter any trouble.  Contributions or suggestions for improvements welcome!\\n\\n[![Current Status](https://secure.travis-ci.org/tschaub/grunt-newer.png?branch=master)](https://travis-ci.org/tschaub/grunt-newer)\\n\\n## Known limitations\\n\\nThe `newer` task relies on Grunt's convention for specifying [`src`/`dest` mappings](http://gruntjs.com/configuring-tasks#files).  So it should be expected to work with two types of tasks:\\n\\n1) Tasks that specify both `src` and `dest` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the corresponding `dest` file (based on the `mtime` of files).\\n\\n2) Tasks that specify only `src` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the previous successful run of the same task.\\n\\nThe `newer` task will *not* work as a prefix for the following tasks:\\n\\n * [`grunt-rsync`](http://npmjs.org/package/grunt-rsync) - Though this task specifies `src` and `dest` files, the `dest` file is not generated based on `src` files (instead it is a directory).\\n\\n * [`grunt-spritesmith`](https://npmjs.org/package/grunt-spritesmith) - This task uses multiple `src` images to produce `destImg` and `destCSS` files.  Instead use the [`grunt-spritely`](https://npmjs.org/package/grunt-spritely) task configured with `src` and `dest` files.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-newer/README.md:\n   19: grunt.loadNpmTasks('grunt-newer');\n   40:   grunt.loadNpmTasks('grunt-contrib-uglify');\n   41:   grunt.loadNpmTasks('grunt-newer');\n   66:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   67:   grunt.loadNpmTasks('grunt-newer');\n   93:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   94:   grunt.loadNpmTasks('grunt-contrib-watch');\n   95:   grunt.loadNpmTasks('grunt-newer');\n  105: In most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-ngmin/Gruntfile.js:\n    3:   grunt.loadNpmTasks('grunt-contrib-clean');\n    4:   grunt.loadNpmTasks('grunt-mocha-cli');\n    5:   grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-ngmin/node_modules/ngmin/node_modules/escodegen/Gruntfile.js:\n   51:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   52:     grunt.loadNpmTasks('grunt-mocha-test');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-ngmin/package.json:\n   34:   \"readme\": \"#grunt-ngmin\\n\\nGrunt plugin for pre-minifying Angular apps. Learn why this is awesome by reading up on the [ngmin](https://github.com/btford/ngmin) cli tool.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-ngmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-ngmin');\\n```\\n\\n## ngmin task\\n_Run this task with the `grunt ngmin` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Example\\n\\n```js\\nngmin: {\\n  controllers: {\\n    src: ['test/src/controllers/one.js'],\\n    dest: 'test/generated/controllers/one.js'\\n  },\\n  directives: {\\n    expand: true,\\n    cwd: 'test/src',\\n    src: ['directives/**/*.js'],\\n    dest: 'test/generated'\\n  }\\n},\\n```\\n\\n##Running the Tests\\nRun `grunt test`.\\n\\n## License\\nBSD\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-ngmin/README.md:\n   17: grunt.loadNpmTasks('grunt-ngmin');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-svgmin/package.json:\n   50:   \"readme\": \"# grunt-svgmin [![Build Status](https://secure.travis-ci.org/sindresorhus/grunt-svgmin.png?branch=master)](http://travis-ci.org/sindresorhus/grunt-svgmin) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Minify SVG using [SVGO](https://github.com/svg/svgo)\\n\\n*Issues with the output should be reported on the SVGO [issue tracker](https://github.com/svg/svgo/issues).*\\n\\n\\n## Getting Started\\n\\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\\n\\n```sh\\nnpm install --save-dev grunt-svgmin\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-svgmin');\\n```\\n\\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\\n\\n[grunt]: http://gruntjs.com\\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\\n\\n\\n## Documentation\\n\\nSee the [Gruntfile](Gruntfile.js) in this repo for a full example.\\n\\n\\n### Example config (static)\\n\\n```js\\ngrunt.initConfig({\\n\\tsvgmin: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Task\\n\\t\\toptions: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Configuration that will be passed directly to SVGO\\n\\t\\t\\tplugins: [\\n\\t\\t\\t  { removeViewBox: false },\\n\\t\\t\\t  { removeUselessStrokeAndFill: false }\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\tdist: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Target\\n\\t\\t\\tfiles: {\\t\\t\\t\\t\\t\\t\\t\\t\\t// Dictionary of files\\n\\t\\t\\t\\t'dist/figure.svg': 'app/figure.svg'\\t\\t// 'destination': 'source'\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.registerTask('default', ['svgmin']);\\n```\\n\\n### Example config (dynamic)\\n\\n```js\\ngrunt.initConfig({\\n\\tsvgmin: {\\t\\t\\t\\t\\t\\t// Task\\n\\t\\toptions: {\\t\\t\\t\\t\\t// Configuration that will be passed directly to SVGO\\n\\t\\t\\tplugins: [\\n\\t\\t\\t  { removeViewBox: false },\\n\\t\\t\\t  { removeUselessStrokeAndFill: false }\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\tdist: {\\t\\t\\t\\t\\t\\t// Target\\n\\t\\t\\tfiles: [{\\t\\t\\t\\t// Dictionary of files\\n\\t\\t\\t\\texpand: true,\\t\\t// Enable dynamic expansion.\\n\\t\\t\\t\\tcwd: 'img/src',\\t\\t// Src matches are relative to this path.\\n\\t\\t\\t\\tsrc: ['**/*.svg'],\\t// Actual pattern(s) to match.\\n\\t\\t\\t\\tdest: 'img/',\\t\\t// Destination path prefix.\\n\\t\\t\\t\\text: '.min.svg'\\t\\t// Dest filepaths will have this extension.\\n\\t\\t\\t\\t// ie: optimise img/src/branding/logo.svg and store it in img/branding/logo.min.svg\\n\\t\\t\\t}]\\n\\t\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.registerTask('default', ['svgmin']);\\n```\\n\\n### Available Options/Plugins\\n\\nsvgmin makes use of the standard SVGO plugin architecture. Therefore, to customize SVG optimisation, you can disable/enable any SVGO plugins listed at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins).\\n\\nTo disable plugins with the Gruntfile.js, look for the plugin name at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins) and copy the plugin name (minus the file extension). Then set its value in the JSON to `false` in comma-separated objects. To exemplify, here is how the plugins section in the example configuration (illustrated above) might be written with some of the standard SVGO plugins disabled:\\n\\n```js\\nplugins: [\\n\\t{ removeViewBox: false }, \\t\\t\\t\\t// don't remove the viewbox atribute from the SVG\\n\\t{ removeUselessStrokeAndFill: false },\\t// don't remove Useless Strokes and Fills\\n\\t{ removeEmptyAttrs: false }\\t\\t\\t\\t// don't remove Empty Attributes from the SVG\\n]\\n```\\n\\nCheck each plugin for `exports.active = [true/false]` to see if the plugin is enabled. Most of the plugins are enabled by default but you may want to prevent a couple, particularly `removeUselessStrokeAndFill` as that may remove small details with subtracted / extruded complex paths.\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-svgmin/readme.md:\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   52: grunt.loadNpmTasks('grunt-svgmin');\n   79: grunt.loadNpmTasks('grunt-svgmin');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-wiredep/package.json:\n   42:   \"readme\": \"> -\\n# grunt-wiredep\\n*Inject Bower packages into your source code with Grunt.*\\n>\\n> -\\n\\n## What is this?\\n[Grunt](http://gruntjs.com) is great.\\n\\n[Bower](http://bower.io) is great.\\n\\n**And now they work great together.**\\n\\n`grunt-wiredep` is a Grunt plug-in, which finds your components and injects them directly into the HTML file you specify.\\n\\nWhether you're already using Bower and Grunt, or new to both, `grunt-wiredep` will be easy to plug in, as you will see in the steps below.\\n\\n_**do note**: Bower is still a young little birdy, so things are changing rapidly. Authors of Bower components must follow certain conventions and best practices in order for this plug-in to be as accurate as possible. It's not a perfect world out there, so needless to say, some Bower components may not work as well as others._\\n\\n## Getting Started\\n\\n*If you are new to Grunt, you will find a lot of answers to your questions in their [getting started guide](http://gruntjs.com/getting-started).\\n\\nTo install the module:\\n```\\nnpm install --save-dev grunt-wiredep\\n```\\n\\nInclude the task in your Gruntfile:\\n```js\\ngrunt.loadNpmTasks('grunt-wiredep');\\n```\\n\\nCreate a config block within your Gruntfile:\\n```js\\nwiredep: {\\n\\n  target: {\\n\\n    // Point to the files that should be updated when\\n    // you run `grunt wiredep`\\n    src: [\\n      'app/views/**/*.html',   // .html support...\\n      'app/views/**/*.jade',   // .jade support...\\n      'app/styles/main.scss',  // .scss & .sass support...\\n      'app/config.yml'         // and .yml & .yaml support out of the box!\\n    ],\\n\\n    // Optional:\\n    // ---------\\n    cwd: '',\\n    dependencies: true,\\n    devDependencies: false,\\n    exclude: [],\\n    fileTypes: {},\\n    ignorePath: '',\\n    overrides: {}\\n  }\\n}\\n```\\n\\n*See [wiredep's readme](http://github.com/stephenplusplus/wiredep) for more options of customization, such as other file types, regex patterns, exclusions, and more.*\\n\\n\\nFor JavaScript dependencies, pop this in your HTML file:\\n```html\\n<!-- bower:js -->\\n<!-- endbower -->\\n```\\n\\nInstall a Bower component:\\n```\\nbower install jquery --save\\n```\\n\\nCall the Grunt task:\\n```\\ngrunt wiredep\\n```\\n\\nYou're in business!\\n```html\\n<!-- bower:js -->\\n<script src=\\\"bower_components/jquery/jquery.js\\\"></script>\\n<!-- endbower -->\\n```\\n\\n## Behind the Scenes\\nThis plug-in uses [wiredep](https://github.com/stephenplusplus/wiredep), which takes a look at all of the components you have, then determines the best order to inject your scripts in to your HTML file.\\n\\nPutting script tags that aren't managed by `grunt-wiredep` is not advised, as anything between `<!-- bower:js -->` and `<!-- endbower -->` will be overwritten with each command.\\n\\n## Examples\\nA simple sample apple:\\n[website](http://stephenplusplus.github.io/grunt-wiredep) | [github](https://github.com/stephenplusplus/grunt-wiredep/tree/gh-pages)\\n\\n## License\\nCopyright (c) 2014 Stephen Sawchuk\\nLicensed under the MIT license.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-wiredep/readme.md:\n   31: grunt.loadNpmTasks('grunt-wiredep');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/lib/grunt.js:\n   58: gExpose(task, 'loadNpmTasks');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/lib/grunt/cli.js:\n   80:     info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/lib/grunt/task.js:\n  380: task.loadNpmTasks = function(name) {\n  398:         task.loadNpmTasks(path.relative(root, filepath));\n  455:   (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/getobject/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/grunt-legacy-log/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/grunt-legacy-util/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/jshint-stylish/package.json:\n   41:   \"readme\": \"# jshint-stylish [![Build Status](https://travis-ci.org/sindresorhus/jshint-stylish.svg?branch=master)](https://travis-ci.org/sindresorhus/jshint-stylish)\\n\\n> Stylish reporter for [JSHint](https://github.com/jshint/jshint)\\n\\n![screenshot](screenshot.png)\\n\\nCompared to the default reporter:\\n\\n![default reporter](screenshot-default-formatter.png)\\n\\n\\n## Install\\n\\n```bash\\n$ npm install --save-dev jshint-stylish\\n```\\n\\n\\n## Getting started\\n\\nUse it with:\\n\\n#### JSHint CLI\\n\\n```\\njshint --reporter node_modules/jshint-stylish/stylish.js file.js\\n```\\n\\n#### [gulp-jshint](https://github.com/wearefractal/gulp-jshint)\\n\\n```js\\ngulp.task('default', function () {\\n\\tgulp.src(['file.js'])\\n\\t\\t.pipe(jshint('.jshintrc'))\\n\\t\\t.pipe(jshint.reporter('jshint-stylish'));\\n});\\n```\\n\\n#### [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint)\\n\\n```js\\ngrunt.initConfig({\\n\\tjshint: {\\n\\t\\toptions: {\\n\\t\\t\\treporter: require('jshint-stylish')\\n\\t\\t},\\n\\t\\ttarget: ['file.js']\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-jshint');\\ngrunt.registerTask('default', ['jshint']);\\n```\\n\\n\\n## License\\n\\n[MIT](http://opensource.org/licenses/MIT) © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/jshint-stylish/readme.md:\n   51: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/load-grunt-tasks/load-grunt-tasks.js:\n   27: 	multimatch(names, pattern).forEach(grunt.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/load-grunt-tasks/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/load-grunt-tasks/package.json:\n   45:   \"readme\": \"# load-grunt-tasks [![Build Status](https://secure.travis-ci.org/sindresorhus/load-grunt-tasks.png?branch=master)](http://travis-ci.org/sindresorhus/load-grunt-tasks) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Load multiple grunt tasks using globbing patterns\\n\\nUsually you would have to load each task one by one, which is unnecessarily cumbersome.\\n\\nThis module will read the `dependencies`/`devDependencies`/`peerDependencies` in your package.json and load grunt tasks that match the provided patterns.\\n\\n**Note the new argument signature as of 0.2.0.**\\n\\n\\n#### Before\\n\\n```js\\ngrunt.loadNpmTasks('grunt-shell');\\ngrunt.loadNpmTasks('grunt-sass');\\ngrunt.loadNpmTasks('grunt-recess');\\ngrunt.loadNpmTasks('grunt-sizediff');\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.loadNpmTasks('grunt-styl');\\ngrunt.loadNpmTasks('grunt-php');\\ngrunt.loadNpmTasks('grunt-eslint');\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.loadNpmTasks('grunt-bower-requirejs');\\n```\\n\\n#### After\\n\\n```js\\nrequire('load-grunt-tasks')(grunt);\\n```\\n\\n\\n## Install\\n\\nInstall with [npm](https://npmjs.org/package/load-grunt-tasks): `npm install --save-dev load-grunt-tasks`\\n\\n\\n## Example config\\n\\n```js\\n// Gruntfile.js\\nmodule.exports = function (grunt) {\\n\\t// load all grunt tasks matching the `grunt-*` pattern\\n\\trequire('load-grunt-tasks')(grunt);\\n\\n\\tgrunt.initConfig({});\\n\\tgrunt.registerTask('default', []);\\n}\\n```\\n\\n\\n## Usage examples\\n\\n### Load all grunt tasks\\n\\n```js\\nrequire('load-grunt-tasks')(grunt);\\n```\\n\\nEquivalent to:\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: 'grunt-*'});\\n```\\n\\n### Load all grunt-contrib tasks\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: 'grunt-contrib-*'});\\n```\\n\\n### Load all grunt-contrib tasks and another non-contrib task\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: ['grunt-contrib-*', 'grunt-shell']});\\n```\\n\\n### Load all grunt-contrib tasks excluding one\\n\\nYou can exclude tasks using the negate `!` globbing pattern:\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: ['grunt-contrib-*', '!grunt-contrib-coffee']});\\n```\\n\\n### Set custom path to package.json\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {config: '../package'});\\n```\\n\\n### Only load from `devDependencies`\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {scope: 'devDependencies'});\\n```\\n\\n### Only load from `devDependencies` and `dependencies`\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {scope: ['devDependencies', 'dependencies']});\\n```\\n\\n### All options in use\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {\\n\\tpattern: 'grunt-contrib-*',\\n\\tconfig: '../package.json',\\n\\tscope: 'devDependencies'\\n});\\n```\\n\\n\\n## Options\\n\\n### pattern\\n\\nType: `String|Array`  \\nDefault: `'grunt-*'` ([globbing pattern](https://github.com/isaacs/minimatch))\\n\\n### config\\n\\nType: `String|Object`  \\nDefault: Path to nearest package.json\\n\\n### scope\\n\\nType: `String|Array`  \\nDefault: `['dependencies', 'devDependencies', 'peerDependencies']`\\n\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo/node_modules/load-grunt-tasks/readme.md:\n   15: grunt.loadNpmTasks('grunt-shell');\n   16: grunt.loadNpmTasks('grunt-sass');\n   17: grunt.loadNpmTasks('grunt-recess');\n   18: grunt.loadNpmTasks('grunt-sizediff');\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   20: grunt.loadNpmTasks('grunt-styl');\n   21: grunt.loadNpmTasks('grunt-php');\n   22: grunt.loadNpmTasks('grunt-eslint');\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   24: grunt.loadNpmTasks('grunt-bower-requirejs');\n\n167 matches across 74 files\n\n\nSearching 17 files for \"loadNpmTasks\"\n\n0 matches across 0 files\n\n\nSearching 21176 files for \"loadNpmTasks\"\n\n/Users/hroussel/Documents/workspace/yodemo2/Gruntfile.js:\n  466:   grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/node_modules/autoprefixer/package.json:\n   40:   \"readme\": \"# Autoprefixer\\n\\n<img align=\\\"right\\\" width=\\\"94\\\" src=\\\"http://ai.github.io/autoprefixer/logo.svg\\\" title=\\\"Autoprefixer logo by Anton Lovchikov\\\">\\n\\nParse CSS and add vendor prefixes to CSS rules using values\\nfrom [Can I Use](http://caniuse.com/).\\n\\nWrite your CSS rules without vendor prefixes (in fact, forget about them\\nentirely):\\n\\n```css\\n:fullscreen a {\\n    transition: transform 1s\\n}\\n```\\n\\nProcess your CSS by Autoprefixer:\\n\\n```js\\nvar prefixed = autoprefixer.process(css).css;\\n```\\n\\nIt will use the data on current browser popularity and properties support\\nto apply prefixes for you:\\n\\n```css\\n:-webkit-full-screen a {\\n    -webkit-transition: -webkit-transform 1s;\\n    transition: transform 1s\\n}\\n:-moz-full-screen a {\\n    transition: transform 1s\\n}\\n:-ms-fullscreen a {\\n    transition: transform 1s\\n}\\n:fullscreen a {\\n    -webkit-transition: -webkit-transform 1s;\\n    transition: transform 1s\\n}\\n```\\n\\nYou can play with your CSS in the [interactive demo] of Autoprefixer.\\n\\nTwitter account for news and releases: [@autoprefixer].\\n\\nSponsored by [Evil Martians]. Based on [PostCSS] framework.\\n\\n[interactive demo]: http://jsfiddle.net/simevidas/udyTs/show/light/\\n[@autoprefixer]:    https://twitter.com/autoprefixer\\n[Evil Martians]:    http://evilmartians.com/\\n[PostCSS]:          https://github.com/ai/postcss\\n\\n## Features\\n\\n### Forget about prefixes\\n\\nThe best tool is a tool you can't see and one that does the work for you.\\nThis is the main idea behind Autoprefixer.\\n\\nAutoprefixer interface is simple: just forget about vendor prefixes\\nand write normal CSS according to the latest W3C specs. You don’t need\\na special language (like Sass) or special mixins.\\n\\nBecause Autoprefixer is a postprocessor for CSS,\\nyou can also use it with preprocessors, such as Sass, Stylus or LESS.\\n\\n### Actual data from Can I Use\\n\\nAutoprefixer uses the most recent data from [Can I Use](http://caniuse.com/),\\nunderstands which browsers are actual and popular and adds only the necessary\\nvendor prefixes.\\n\\nIt also cleans your CSS from old prefixes (like prefixed `border-radius`,\\nproduced by many CSS libraries):\\n\\n```css\\na {\\n    -webkit-border-radius: 5px;\\n    border-radius: 5px\\n}\\n```\\n\\ncompiles to:\\n\\n```css\\na {\\n    border-radius: 5px\\n}\\n```\\n\\nNote, that Autoprefixer doesn’t load Can I Use data every time. It takes it from\\n[caniuse-db](https://www.npmjs.org/package/caniuse-db) dependency.\\nSo, if you use Autoprefixer from `npm`, try to keep your `autoprefixer`\\nand `caniuse-db` packages fresh to have only actual prefixes in your CSS.\\n\\n### Flexbox, Gradients, etc.\\n\\nFlexbox or gradients have different syntaxes in different browsers\\n(sometimes you need to recalculate angles, sometimes you need 2 old properties\\ninstead of new one), but Autoprefixer hides this from you.\\n\\nJust code by latest W3C specs and Autoprefixer will produce the code\\nfor old browsers:\\n\\n```css\\na {\\n    display: flex;\\n}\\n```\\n\\ncompiles to:\\n\\n```css\\na {\\n    display: -webkit-box;\\n    display: -webkit-flex;\\n    display: -moz-box;\\n    display: -ms-flexbox;\\n    display: flex\\n}\\n```\\n\\nAutoprefixer has [22 special hacks] to fix browser’s differences.\\n\\n[22 special hacks]: https://github.com/ai/autoprefixer/tree/master/lib/hacks\\n\\n### Fast\\n\\nAutoprefixer is about several times faster than Compass and Stylus.\\n\\nOn a Core i7 with 10 GB of RAM and SSD, benchmark with GitHub styles is:\\n\\n```\\n~/Dev/autoprefixer$ ./node_modules/.bin/cake bench\\nLoad GitHub styles\\nAutoprefixer: 466 ms\\nCompass:      2828 ms (6.1 times slower)\\nStylus:       1491 ms (3.2 times slower)\\n```\\n\\nUnlike [-prefix-free](http://leaverou.github.io/prefixfree/), Autoprefixer\\ncompiles CSS once on deploy and doesn’t hurt client-side performance.\\n\\n## Browsers\\n\\nYou can specify the browsers you want to target in your project:\\n\\n```js\\nautoprefixer(\\\"last 1 version\\\", \\\"> 1%\\\", \\\"Explorer 7\\\").process(css).css;\\n```\\n\\n* `last 2 versions` is last versions for each browser. Like “last 2 versions”\\n  [strategy](http://support.google.com/a/bin/answer.py?answer=33864) in\\n  Google.\\n* `last 2 Chrome versions` is last versions of the specified browser.\\n* `> 5%` is browser versions, selected by global usage statistics.\\n* `Firefox > 20` is Firefox versions newer than 20.\\n* `Firefox >= 20` is Firefox version 20 or newer.\\n* `Firefox ESR` is the latest [Firefox ESR] version.\\n* `none` don’t set any browsers to clean CSS from any vendor prefixes.\\n* `ios 7` to set browser version directly.\\n\\nBlackberry and stock Android browsers will not be used in `last n versions`.\\nYou can add them by name:\\n\\n```js\\nautoprefixer(\\\"last 1 version\\\", \\\"BlackBerry 10\\\", \\\"Android 4\\\").process(css).css;\\n```\\n\\nBrowsers names (case insensitive):\\n* `Android` for old Android stock browser.\\n* `BlackBerry` or `bb` for Blackberry browser.\\n* `Chrome` for Google Chrome.\\n* `Firefox` or `ff` for Mozilla Firefox.\\n* `Explorer` or `ie` for Internet Explorer.\\n* `iOS` for iOS Safari.\\n* `Opera` for Opera.\\n* `Safari` for desktop Safari.\\n\\nBy default, Autoprefixer uses `> 1%, last 2 versions, Firefox ESR, Opera 12.1`:\\n* Latest [Firefox ESR] is a 24 version.\\n* Opera 12.1 will be in list until Opera supports non-Blink 12.x branch.\\n\\n[Firefox ESR]: http://www.mozilla.org/en/firefox/organizations/faq/\\n\\n## Source Map\\n\\nYou must set input and output CSS files paths (by `from` and `to` options)\\nto generate a correct map.\\n\\nAutoprefixer can modify previous source maps (for example, from Sass):\\nit will autodetect a previous map if it is listed in an annotation comment or\\nin a file near the input CSS. You can disable source map with `map: false` or\\nset the previous source map content manually to `map` option (as a string or a\\nJS object).\\n\\n```js\\nvar result = autoprefixer.process(css, {\\n    map:   fs.readFileSync('main.sass.css.map'),\\n    from: 'main.sass.css',\\n    to:   'main.min.css'\\n});\\n\\nresult.css //=> CSS with source map annotation comment\\nresult.map //=> Source map from main.sass to main.min.css\\n\\nfs.writeFileSync('main.min.css.map', result.map);\\n```\\n\\nAutoprefixer supports inline source maps too. If input CSS contains annotation\\nfrom the previous step with map in `data:uri`, Autoprefixer will update the\\nsource map with prefixes changes and inine the new map back into the output CSS.\\n\\nYou can read more about source map options in\\n[PostCSS documentation](https://github.com/ai/postcss#source-map-1).\\n\\n## Visual Cascade\\n\\nAutoprefixer can change CSS indentation to create a nice visual cascade\\nof prefixes. You need to send `cascade: true` option to processor constructor:\\n\\n```js\\nautoprefixer(\\\"> 1 %\\\", \\\"last 2 version\\\", { cascade: true }).process(css).css\\n```\\n\\nand, if CSS will be uncompressed, output would be like:\\n\\n```css\\na {\\n    -webkit-box-sizing: border-box;\\n       -moz-box-sizing: border-box;\\n            box-sizing: border-box\\n}\\n```\\n\\n## Debug\\n\\nYou can check which browsers are selected and which properties will be prefixed:\\n\\n```js\\ninfo = autoprefixer(\\\"last 1 version\\\").info();\\nconsole.log(info);\\n```\\n\\nOr by CLI command:\\n\\n```sh\\nautoprefixer -i\\n```\\n\\n## FAQ\\n\\n### Does it add polyfills for old browsers?\\n\\nNo. Autoprefixer only adds prefixes, not polyfills. There are two reasons:\\n\\n1. Prefixes and polyfills are very different and need a different API.\\n   Two separate libraries would be much better.\\n2. Most of IE polyfills are very bad for client perfomance. They use slow hacks\\n   and old IEs is mostly used on old hardware. Most CSS3 features used only\\n   for styling should be ignored in old IEs as is recommended for\\n   Graceful Degradation.\\n\\n### Why don’t gradients work in Firefox?\\n\\nCheck that you use correct [direction syntax]. For example, you should use\\n`to bottom` instead of `top`:\\n\\n```css\\na {\\n  background: linear-gradient(to bottom, white, black)\\n}\\n```\\n\\nUnfortunately, unprefixed gradients use a different direction syntax and most\\nexamples you find use an old gradient syntax, so be careful and use always the\\nlatest W3C specs with Autoprefixer.\\n\\n[direction syntax]: https://developer.mozilla.org/en-US/docs/Web/CSS/linear-gradient\\n\\n### Why doesn’t Autoprefixer add prefixes to `border-radius`?\\n\\nDevelopers are often surprised by how few prefixes are required today.\\nIf Autoprefixer doesn’t add prefixes to your CSS, check if they’re still\\nrequired on [Can I Use](http://caniuse.com/).\\n\\nIf a prefix is required, but Autoprefixer doesn’t add it or adds it\\nincorrectly, please\\n[report an issue](https://github.com/ai/autoprefixer/issues/new)\\nand include your source CSS and expected output.\\n\\n### Why doesn’t Autoprefixer support `appearance`?\\n\\nUnlike `transition`, the `appearance` property is not a part of\\nany specification. So there is no `appearance`, only `-moz-appearance`\\nand `-webkit-appearance`. Quote from [MDN](https://developer.mozilla.org/en-US/docs/Web/CSS/-moz-appearance):\\n\\n> Do not use this property on Web sites: not only is it non-standard, but its\\n> behavior changes from one browser to another. Even the keyword `none` does not\\n> have the same behavior on each form element across different browsers, and\\n> some do not support it at all.\\n\\n### Why does Autoprefixer use CoffeeScript?\\n\\nJavaScript is very popular, but this is the same reason why its syntax does not\\nevolve. There is an entire Internet with a lot of legacy code which should\\nbe supported by browsers. If developers add an inappropriate feature then\\nit can’t be removed in then next versions but must be supported for a very\\nlong time. This is very bad for innovation. To create new, we need to experiment\\nand to choose.\\n\\nAs a result JavaScript doesn’t have even basic syntax features, which are\\npresent in other languages like Ruby or Python. There are no string\\ninterpolation, short lambda syntax, foreach statement for arrays, string and\\narrays slicing, etc. This features are really important and they will be in\\nECMAScript 6 (first update of JS syntax after 15 years), but this\\nnew specification is still not released and, of course, we must wait until\\nall browsers support it.\\n\\nWith JavaScript preprocessors like CoffeeScript or TypeScript we can bring\\ninnovation back. We can add a new operator and use it right now, without waiting\\nfor support in all browsers.\\n\\nAutoprefixer was written in pure JavaScript before. But CoffeeScript made\\nAutoprefixer code much cleaner and more readable. Often, 2 lines of code\\nbecame 1.\\n\\nDon’t be afraid of CoffeeScript. It is just a new syntax, not another language\\n(like ClojureScript). You can open [examples on CoffeeScript.org] and start\\nto code. After a week your eyes will adjust and you will see that CoffeeScript\\nis cleaner and more readable.\\n\\nSituation with CoffeeScript and JavaScript is absolutely the same as with\\nCSS preprocessors and postprocessors. How can we develop a CSS postprocessor\\nand avoid using a JS preproccesor :).\\n\\n[examples on CoffeeScript.org]: http://coffeescript.org/\\n\\n## Usage\\n\\n### Grunt\\n\\nYou can use the\\n[grunt-autoprefixer](https://github.com/nDmitry/grunt-autoprefixer)\\nplugin for Grunt. Install the npm package and add it to Gruntfile:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-autoprefixer');\\n```\\n\\n### Gulp\\n\\nYou can use [gulp-autoprefixer](https://github.com/Metrime/gulp-autoprefixer)\\nto use Autoprefixer in your Gulp build configuration.\\n\\n```js\\nvar prefix = require('gulp-autoprefixer');\\ngulp.src('./css/*.css')\\n  .pipe(prefix([\\\"last 1 version\\\", \\\"> 1%\\\", \\\"ie 8\\\", \\\"ie 7\\\"], { cascade: true }))\\n  .pipe(gulp.dest('./dist/'));\\n```\\n\\n### Brunch\\n\\nYou can use the\\n[autoprefixer-brunch](https://github.com/lydell/autoprefixer-brunch)\\nplugin for [Brunch](http://brunch.io/).\\n\\n### Compass\\n\\nIf you use Compass binary to compile your styles, you can easily integrate\\nAutoprefixer with it. Install `autoprefixer-rails` gem:\\n\\n```\\ngem install autoprefixer-rails\\n```\\n\\nand add post-compile hook to `config.rb`:\\n\\n```ruby\\nrequire 'autoprefixer-rails'\\n\\non_stylesheet_saved do |file|\\n  css = File.read(file)\\n  File.open(file, 'w') do |io|\\n    io << AutoprefixerRails.process(css)\\n  end\\nend\\n```\\n\\nYou can set the browsers option as the second argument in `process` method:\\n\\n```ruby\\nio << AutoprefixerRails.process(css, browsers: [\\\"last 1 version\\\", \\\"> 1%\\\"])\\n```\\n\\n### Stylus\\n\\nIf you use Stylus CLI, you can add Autoprefixer by\\n[autoprefixer-stylus](https://github.com/jenius/autoprefixer-stylus) plugin.\\n\\nJust install npm package and use it in `-u` option:\\n\\n```\\nstylus -u autoprefixer-stylus -w file.styl\\n```\\n\\n### Ruby on Rails\\n\\nAdd [autoprefixer-rails](https://github.com/ai/autoprefixer-rails) gem\\nto `Gemfile` and write CSS in a usual way:\\n\\n```ruby\\ngem \\\"autoprefixer-rails\\\"\\n```\\n\\n### Ruby\\n\\nYou can integrate Autoprefixer into your Sprockets environment\\nby `autoprefixer-rails` gem:\\n\\n```ruby\\nAutoprefixerRails.install(sprockets_env)\\n```\\n\\nor process CSS from plain Ruby:\\n\\n```ruby\\nprefixed = AutoprefixerRails.process(css)\\n```\\n\\n### CodeKit\\n\\nCodeKit, since the 2.0 version, contains Autoprefixer. In the After Compiling\\nsection, there is a checkbox to enable Autoprefixer.\\nRead [CodeKit docs](https://incident57.com/codekit/help.html#autoprefixer)\\nfor more inforamtion.\\n\\n### Prepros\\n\\nIf you want to build your assets with a GUI, try\\n[Prepros](http://alphapixels.com/prepros/). Just set “Auto Prefix CSS”\\n[checkbox](https://f.cloud.github.com/assets/3478693/930798/faa29892-0016-11e3-8901-87850de7aed2.jpg)\\nin right panel.\\n\\n<img src=\\\"http://alphapixels.com/prepros/static/img/prepros.jpg\\\" width=\\\"550\\\" height=\\\"340\\\" />\\n\\n### Broccoli\\n\\nYou can use the\\n[broccoli-autoprefixer](https://github.com/sindresorhus/broccoli-autoprefixer)\\nplugin for [Broccoli](https://github.com/joliss/broccoli).\\n\\n### Mincer\\n\\nTo use Autoprefixer in [Mincer](https://github.com/nodeca/mincer),\\ninstall `autoprefixer` npm package and enable it:\\n\\n```js\\nenvironment.enable('autoprefixer');\\n```\\n\\n### Middleman\\n\\nAdd [middleman-autoprefixer](https://github.com/porada/middleman-autoprefixer)\\ngem to `Gemfile`:\\n\\n```ruby\\ngem \\\"middleman-autoprefixer\\\"\\n```\\n\\nand activate the extension in your project’s `config.rb`:\\n\\n```ruby\\nactivate :autoprefixer\\n```\\n\\n### Node.js\\n\\nUse `autoprefixer` npm package:\\n\\n```js\\nvar autoprefixer = require('autoprefixer');\\nvar css          = 'a { transition: transform 1s }';\\nvar prefixed     = autoprefixer.process(css).css;\\n```\\n\\n### PHP\\n\\nYou can use Autoprefixer in PHP by\\n[autoprefixer-php](https://github.com/vladkens/autoprefixer-php) library:\\n\\n\\n```php\\n$autoprefixer = new Autoprefixer();\\n$css          = 'a { transition: transform 1s }';\\n$prefixed     = $autoprefixer->compile($css);\\n```\\n\\n### .NET\\n\\nYou can use Autoprefixer from .NET and BundleTransformer with the\\n[Autoprefixer](https://github.com/digitalcreations/autoprefixer) NuGet package.\\n\\n### JavaScript\\n\\nYou can use Autoprefixer in the browser or as a non-Node.js runtime\\nwith [standalone version](https://raw.github.com/ai/autoprefixer-rails/master/vendor/autoprefixer.js).\\n\\n### PostCSS\\n\\nAutoprefixer can be also used as a [PostCSS](https://github.com/ai/postcss)\\nprocessor, so you can combine it with other processors and parse CSS only once:\\n\\n```js\\npostcss().\\n    use( autoprefixer(['> 1%', 'opera 12.5']).postcss ).\\n    use( compressor ).\\n    process(css);\\n```\\n\\n### Sublime Text\\n\\nYou can process your styles directly in Sublime Text with the\\n[sublime-autoprefixer](https://github.com/sindresorhus/sublime-autoprefixer)\\nplugin.\\n\\n### Brackets\\n\\nStyles can processed automatically in Brackets using the\\n[brackets-autoprefixer](https://github.com/mikaeljorhult/brackets-autoprefixer)\\nextension.\\n\\n### Atom Editor\\n\\nYou can process your styles directly in Atom with the\\n[atom-autoprefixer](https://github.com/sindresorhus/atom-autoprefixer)\\npackage.\\n\\n### Others\\n\\nYou can use the `autoprefixer` binary to process CSS files using\\nany assets manager:\\n\\n```\\nsudo npm install --global autoprefixer\\nautoprefixer *.css\\n```\\n\\nSee `autoprefixer -h` for help.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/node_modules/autoprefixer/README.md:\n  349: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/package.json:\n   43:   \"readme\": \"# grunt-autoprefixer\\n[![Build Status](https://travis-ci.org/nDmitry/grunt-autoprefixer.png?branch=master)](https://travis-ci.org/nDmitry/grunt-autoprefixer) \\n[![Dependency Status](https://david-dm.org/nDmitry/grunt-autoprefixer.png)](https://david-dm.org/nDmitry/grunt-autoprefixer)\\n[![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> [Autoprefixer](https://github.com/ai/autoprefixer) parses CSS and adds vendor-prefixed CSS properties using the [Can I Use](http://caniuse.com/) database.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-autoprefixer --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-autoprefixer');\\n```\\n\\n## The \\\"autoprefixer\\\" task\\n\\n### Overview\\nIn your project's Gruntfile, add a section named `autoprefixer` to the data object passed into `grunt.initConfig()`.\\n\\n```js\\ngrunt.initConfig({\\n  autoprefixer: {\\n    options: {\\n      // Task-specific options go here.\\n    },\\n    your_target: {\\n      // Target-specific file lists and/or options go here.\\n    },\\n  },\\n})\\n```\\n\\n### Options\\n\\n#### options.browsers\\nType: `Array`\\nDefault value: `['> 1%', 'last 2 versions', 'Firefox ESR', 'Opera 12.1']`\\n\\nYou can specify browsers actual for your project:\\n\\n```js\\noptions: {\\n  browsers: ['last 2 version', 'ie 8', 'ie 9']\\n}\\n```\\n\\n[Read more](https://github.com/ai/autoprefixer#browsers).\\n\\n#### options.cascade\\nType: `Boolean`\\nDefault value: `false`\\n\\nPass `true` to enable ‘cascade’ indentation. Read more [here](https://github.com/ai/autoprefixer#visual-cascade).\\n\\n#### options.diff\\nType: `Boolean|String`\\nDefault value: `false`\\n\\nSet it to `true` if you want to get an output patch file:\\n\\n```js\\noptions: {\\n  diff: true // or 'custom/path/to/file.css.patch'\\n}\\n```\\nAlso you can specify a path where to save this file. More examples in [Gruntfile](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js).\\n\\n#### options.map\\nType: `Boolean|String|undefined`\\nDefault value: `undefined`\\n\\nIf the map option isn't defined, Autoprefixer will look for source map from a previous compilation step (either inline map or separate one) and update it automatically. Let's say you have `path/file.css` and `path/file.css.map` from SASS, Autoprefixer will find that map, update it and save to a specified destination.\\n\\nIf `true` is specified, Autoprefixer will try to find an input source map file as described above and generate a new map based on the found one (or just generate a new map, unlike the situation when the map option is undefined).\\n\\nIf you keep your map from a pre-processor in another directory (e.g. `path/file.css` and `another-path/file.css.map`), you can specify the path `another-path/` in the map option to point out where grunt-autoprefixer should look for an input map to update it.\\n\\nAlso you can specify `false`. In that case Autoprefixer will not generate or update source map even if there is one from a previous compilation step near an input file or inlined to it (Autoprefixer will delete a map annotation comment from an input file).\\n\\nYou cannot specify a path where to save a map file, it will be saved at the same directory as the output CSS file or inlined to it (check out the option below).\\n\\n#### options.mapInline\\nType: `Boolean|undefined`\\nDefault value: `undefined`\\n\\nIf the option isn't specified, Autoprefixer will inline its map if a map from a previous compilation step was inlined to an input file or save its map as a separate file respectively.\\n\\nYou can specify `true` or `false` to force that behaviour as you like.\\n\\n### Usage Examples\\n\\n```js\\ngrunt.initConfig({\\n\\n  autoprefixer: {\\n\\n    options: {\\n      // Task-specific options go here.\\n    },\\n\\n    // prefix the specified file\\n    single_file: {\\n      options: {\\n        // Target-specific options go here.\\n      },\\n      src: 'src/css/file.css',\\n      dest: 'dest/css/file.css'\\n    },\\n\\n    // prefix all files\\n    multiple_files: {\\n      expand: true,\\n      flatten: true,\\n      src: 'src/css/*.css', // -> src/css/file1.css, src/css/file2.css\\n      dest: 'dest/css/' // -> dest/css/file1.css, dest/css/file2.css\\n    },\\n\\n    // if you have specified only the `src` param, the destination will be set automatically,\\n    // so source files will be overwritten\\n    no_dest: {\\n      src: 'dest/css/file.css' // globbing is also possible here\\n    },\\n\\n    diff: {\\n        options: {\\n            diff: true\\n        },\\n        src: 'src/css/file.css',\\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.patch\\n    },\\n\\n    sourcemap: {\\n        options: {\\n            map: true\\n        },\\n        src: 'src/css/file.css',\\n        dest: 'dest/css/file.css' // -> dest/css/file.css, dest/css/file.css.map\\n    },\\n  }\\n\\n});\\n```\\n\\nCheck out project's [Gruntfile.js](https://github.com/nDmitry/grunt-autoprefixer/blob/master/Gruntfile.js) for more examples.\\n\\n### Updating prefixes database\\n\\n```\\n$ npm update caniuse-db\\n```\\n\\n## Contributing\\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/README.md:\n   20: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/Gruntfile.js:\n   39:   grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/package.json:\n   67:   \"readme\": \"# grunt-casperjs\\n\\n> With this grunt.js task you can run tests with CasperJS.\\n\\n## Getting Started\\n\\nFirst [Install CasperJS](http://casperjs.org/installation.html).\\n\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-casperjs --save-dev\\n```\\n\\nOne the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-casperjs');\\n```\\n\\n## The \\\"casperjs\\\" task\\n\\n### Overview\\nIn your project's Gruntfile, add a section named `casperjs` to the data object passed into `grunt.initConfig()`.\\n\\n```js\\ngrunt.initConfig({\\n  casperjs: {\\n    options: {\\n      // Task-specific options go here.\\n    },\\n    your_target: {\\n      // Target-specific file lists and/or options go here.\\n    }\\n  }\\n})\\n```\\n\\n### Usage Examples\\n\\n#### Default Options\\n\\n```js\\ngrunt.initConfig({\\n  casperjs: {\\n    options: {\\n      async: {\\n        parallel: false\\n      }\\n    },\\n    files: ['tests/casperjs/**/*.js']\\n  },\\n})\\n```\\n\\n#### Async Parallel\\n\\nBy default, tests are run in series. If your tests are independent, you can run them in parallel.\\n\\n```javascript\\ncasperjs: {\\n  options: {\\n    async: {\\n      parallel: true\\n    }\\n  },\\n  files: ['tests/casperjs/**/*.js']\\n}\\n```\\n\\n#### CasperJS Options\\n\\nCasperJS options (including user defined ones) can be passed in using 'casperjsOptions' in the options object\\n```javascript\\ncasperjs: {\\n  options: {\\n    casperjsOptions: ['--foo=bar', '--no-colors']\\n  },\\n  files: ['tests/casperjs/**/*.js']\\n}\\n```\\n\\n#### Install script and CasperJS version\\nThe install.js script is responsible for searching for existing CasperJS installations in the path. If found, as of grunt-casperjs v1.2.0, that version of CasperJS will be used. If not found, a stable version of CasperJS will be installed (under review).\\n\\ngrunt-casperjs was tested with the currently stable version of CasperJS, 1.1.x\\n\\n**If you would like to use a different version of casperjs**, install it yourself globally before installing grunt-casperjs. It will use that one.\\n\\n## Contributing\\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\\n\\n\\n## CHANGELOG\\n* 1.5.0 Fix critical install issue - https://github.com/ronaldlokers/grunt-casperjs/issues/55\\n* 1.4.1 Lock to casper js version `1.0.3` instead of `master` (to be incremented soon)\\n* 1.4.0 Options can be passed into CasperJS. Any option.\\n* 1.3.0 Bump to using the latest version of CasperJs\\n* 1.2.1 CasperJS installations in path will be used\\n* 1.2.0 Cleaner fix for installing grunt\\n* 1.1.2 Fix for windows installation\\n* 1.1.1 Use latest version of PhantomJS ~1.9\\n* 1.0.10 Fix env-vars dumping\\n* 1.0.9 If user has local casperjs, use that first.\\n* 1.0.7 Options to run tests in parallel\\n* 1.0.5 Changelog started :)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/README.md:\n   20: grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-concurrent/package.json:\n   45:   \"readme\": \"# grunt-concurrent [![Build Status](https://secure.travis-ci.org/sindresorhus/grunt-concurrent.png?branch=master)](http://travis-ci.org/sindresorhus/grunt-concurrent) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Run grunt tasks concurrently\\n\\nRunning slow tasks like Coffee and Sass concurrently can potentially improve your build time significantly. This task is also useful if you need to run multiple blocking tasks like `nodemon` and `watch` at once, as seen in the example config.\\n\\n![screenshot](screenshot.png)\\n\\nThis task is similar to grunt-parallel, but more focused by leaving out support for shell scripts which results in a leaner config. It also has a smaller dependency size and pads the output of concurrent tasks, as seen above.\\n\\n\\n## Getting Started\\n\\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\\n\\n```sh\\nnpm install grunt-concurrent --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-concurrent');\\n```\\n\\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\\n\\n\\n[grunt]: http://gruntjs.com\\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\\n\\n\\n## Documentation\\n\\nSee the [Gruntfile](Gruntfile.js) in this repo for a full example.\\n\\nJust specify the tasks you want to run concurrently as an array in a target of this task as shown below.\\n\\n\\n### Example config\\n\\nThis will first run the Coffee and Sass tasks at the same time, then the JSHint and Mocha tasks at the same time.\\n\\n```javascript\\ngrunt.initConfig({\\n\\tconcurrent: {\\n\\t\\ttarget1: ['coffee', 'sass'],\\n\\t\\ttarget2: ['jshint', 'mocha']\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.registerTask('default', ['concurrent:target1', 'concurrent:target2']);\\n```\\n\\n\\n## Options\\n\\n### limit\\n\\nType: `Number`  \\nDefault: Number of CPU cores (`require('os').cpus().length`) with a minimum of 2\\n\\nLimit of how many tasks that are run concurrently.\\n\\n### logConcurrentOutput\\n\\nType: `Boolean`  \\nDefault: `false`\\n\\nYou can optionally log the output of your concurrent tasks by specifying the `logConcurrentOutput` option. Here is an example config which runs [grunt-nodemon](https://github.com/ChrisWren/grunt-nodemon) to launch and monitor a node server and [grunt-contrib-watch](https://github.com/gruntjs/grunt-contrib-watch) to watch for asset changes all in one terminal tab:\\n\\n```javascript\\ngrunt.initConfig({\\n\\tconcurrent: {\\n\\t\\ttarget: {\\n\\t\\t\\ttasks: ['nodemon', 'watch'],\\n\\t\\t\\toptions: {\\n\\t\\t\\t\\tlogConcurrentOutput: true\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.registerTask('default', ['concurrent:target']);\\n```\\n\\n*Note the output will be messy when combining certain tasks. This option is best used with tasks that don't exit like watch and nodemon to monitor the output of long-running concurrent tasks.*\\n\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-concurrent/readme.md:\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   52: grunt.loadNpmTasks('grunt-concurrent');\n   85: grunt.loadNpmTasks('grunt-concurrent');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/Gruntfile.js:\n   44:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   45:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   46:   grunt.loadNpmTasks('grunt-contrib-internal');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/package.json:\n   71:   \"readme\": \"# grunt-contrib-clean [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-clean.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-clean)\\n\\n> Clean files and folders.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-clean --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-clean');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-clean/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Clean task\\n_Run this task with the `grunt clean` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n*Due to the destructive nature of this task, always be cautious of the paths you clean.*\\n### Options\\n\\n#### force\\nType: `Boolean`  \\nDefault: false\\n\\nThis overrides this task from blocking deletion of folders outside current working dir (CWD). Use with caution.\\n\\n#### no-write\\nType: `Boolean`  \\nDefault: false\\n\\nWill log messages of what would happen if the task was ran but doesn't actually delete the files.\\n\\n### Usage Examples\\n\\nThere are three formats you can use to run this task.\\n\\n#### Short\\n\\n```js\\nclean: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"]\\n```\\n\\n#### Medium (specific targets with global options)\\n\\n```js\\nclean: {\\n  build: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"],\\n  release: [\\\"path/to/another/dir/one\\\", \\\"path/to/another/dir/two\\\"]\\n},\\n```\\n\\n#### Long (specific targets with per target options)\\n\\n```js\\nclean: {\\n  build: {\\n    src: [\\\"path/to/dir/one\\\", \\\"path/to/dir/two\\\"]\\n  }\\n}\\n```\\n\\n## Release History\\n\\n * 2013-07-15   v0.5.0   Use rimraf directly, version 2.2.1 to fix issue on Windows. Add no-write option to mimic grunt.file.delete behavior.\\n * 2013-04-16   v0.4.1   Check if file exists to avoid trying to delete a non-existent file.\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.4.0rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-12-07   v0.4.0a   Conversion to grunt v0.4 conventions. Remove node v0.6 and grunt v0.3 support. Add force option to bypass CWD check.\\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Tim Branyen](http://tbranyen.com/)\\n\\n*This file was generated on Mon Jul 15 2013 20:45:46.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-clean');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-coffee/package.json:\n   51:   \"readme\": \"# grunt-contrib-coffee v0.10.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-coffee.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-coffee)\\n\\n> Compile CoffeeScript files to JavaScript.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-coffee --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-coffee');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-coffee/tree/grunt-0.3-stable).*\\n\\n\\n## Coffee task\\n_Run this task with the `grunt coffee` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n### Options\\n\\n#### separator\\nType: `String`\\nDefault: linefeed\\n\\nConcatenated files will be joined on this string.\\n\\n#### bare\\nType: `boolean`\\n\\nCompile the JavaScript without the top-level function safety wrapper.\\n\\n#### join\\nType: `boolean`\\nDefault: `false`\\n\\nWhen compiling multiple .coffee files into a single .js file, concatenate first.\\n\\n#### sourceMap\\nType: `boolean`\\nDefault: `false`\\n\\nCompile JavaScript and create a .map file linking it to the CoffeeScript source. When compiling multiple .coffee files to a single .js file, concatenation occurs as though the 'join' option is enabled\\n\\n#### sourceMapDir\\nType: `String`\\nDefault: (same path as your compiled js files)\\n\\nGenerated source map files will be created here.\\n\\n#### joinExt\\nType: `String`\\nDefault: '.src.coffee'\\n\\nResulting extension when joining multiple CoffeeScript files.\\n\\n### Usage Examples\\n\\n```js\\ncoffee: {\\n  compile: {\\n    files: {\\n      'path/to/result.js': 'path/to/source.coffee', // 1:1 compile\\n      'path/to/another.js': ['path/to/sources/*.coffee', 'path/to/more/*.coffee'] // compile and concat into single file\\n    }\\n  },\\n\\n  compileBare: {\\n    options: {\\n      bare: true\\n    },\\n    files: {\\n      'path/to/result.js': 'path/to/source.coffee', // 1:1 compile\\n      'path/to/another.js': ['path/to/sources/*.coffee', 'path/to/more/*.coffee'] // compile and concat into single file\\n    }\\n  },\\n\\n  compileJoined: {\\n    options: {\\n      join: true\\n    },\\n    files: {\\n      'path/to/result.js': 'path/to/source.coffee', // 1:1 compile, identical output to join = false\\n      'path/to/another.js': ['path/to/sources/*.coffee', 'path/to/more/*.coffee'] // concat then compile into single file\\n    }\\n  },\\n\\n  compileWithMaps: {\\n    options: {\\n      sourceMap: true\\n    },\\n    files: {\\n      'path/to/result.js': 'path/to/source.coffee', // 1:1 compile\\n      'path/to/another.js': ['path/to/sources/*.coffee', 'path/to/more/*.coffee'] // concat then compile into single file\\n    }\\n  },\\n\\n  compileWithMapsDir: {\\n    options: {\\n      sourceMap: true,\\n      sourceMapDir: 'path/to/maps/' // source map files will be created here\\n    },\\n    files: {\\n      'path/to/result.js': 'path/to/source.coffee'\\n    }\\n  }\\n\\n  glob_to_multiple: {\\n    expand: true,\\n    flatten: true,\\n    cwd: 'path/to',\\n    src: ['*.coffee'],\\n    dest: 'path/to/dest/',\\n    ext: '.js'\\n  },\\n\\n}\\n```\\n\\nFor more examples on how to use the `expand` API to manipulate the default dynamic path construction in the `glob_to_multiple` examples, see \\\"[Building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically)\\\" in the grunt wiki entry [Configuring Tasks](http://gruntjs.com/configuring-tasks).\\n\\n\\n## Release History\\n\\n * 2014-02-07   v0.10.0   SourceMappingURL calculated correctly\\n * 2014-01-29   v0.9.0   Source mapping fixes. Update coffee-script to 1.7.0 Use lodash directly instead of deprecated grunt.util._\\n * 2014-01-17   v0.8.2   Force coffeescript 1.6.3 Use new sourceMappingUrl syntax.\\n * 2014-01-17   v0.8.1   Fix sourcemap regression.\\n * 2013-12-24   v0.8.0   Support sourceMapDir\\n * 2013-04-19   v0.7.0   Place Sourcemaps at bottom of file Change extension for Sourcemaps from .maps to .js.map\\n * 2013-04-18   v0.6.7   Improved error reporting\\n * 2013-04-08   v0.6.6   Fix regression with single-file compilation.\\n * 2013-04-05   v0.6.5   Improved error reporting\\n * 2013-03-22   v0.6.4   Sourcemap support\\n * 2013-03-19   v0.6.3   Increase error logging verbosity.\\n * 2013-03-18   v0.6.2   Bump to CoffeeScript 1.6.2\\n * 2013-03-18   v0.6.1   Support `join` option\\n * 2013-03-06   v0.6.0   Bump to CoffeeScript 1.6 Support literate CoffeeScript extension coffee.md\\n * 2013-02-25   v0.5.0   Bump to CoffeeScript 1.5 Support literate CoffeeScript (.litcoffee)\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-23   v0.4.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions. Bump coffeescript dependency to 1.4.\\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-12-15   v0.4.0a   Conversion to grunt v0.4 conventions. Remove experimental destination wildcards.\\n * 2012-10-12   v0.3.2   Rename grunt-contrib-lib dep to grunt-lib-contrib.\\n * 2012-09-25   v0.3.1   Don't fail when there are no files.\\n * 2012-09-24   v0.3.0   Global options depreciated.\\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Eric Woroshow](http://ericw.ca/)\\n\\n*This file was generated on Mon Feb 17 2014 15:32:05.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-coffee/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-coffee');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-compass/package.json:\n   58:   \"readme\": \"# grunt-contrib-compass v0.7.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-compass.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-compass)\\n\\n> Compile Sass to CSS using Compass\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-compass --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-compass');\\n```\\n\\n\\n\\n\\n## Compass task\\n_Run this task with the `grunt compass` command._\\n\\n[Compass](http://compass-style.org/) is an open-source authoring framework for the [Sass](http://sass-lang.com/) css preprocessor. It helps you build stylesheets faster with a huge library of Sass mixins and functions, advanced tools for spriting, and workflow improvements including file based Sass configuration and a simple pattern for building and using Compass extensions.\\n\\nThis task requires you to have [Ruby](http://www.ruby-lang.org/en/downloads/), [Sass](http://sass-lang.com/tutorial.html), and [Compass](http://compass-style.org/install/) >=0.12.2 installed. If you're on OS X or Linux you probably already have Ruby installed; test with `ruby -v` in your terminal. When you've confirmed you have Ruby installed, run `gem update --system && gem install compass` to install Compass and Sass.\\n\\nCompass operates on a folder level. Because of this you don't specify any src/dest, but instead define the `sassDir` and `cssDir` options.\\n\\n### Options\\n\\nCompass doesn't expose all of its [options][config] through the CLI, which this task makes use of. If you need an option not mentioned below you can either specify a path to a config.rb file in the `config` option or embed it directly into the `raw` option. Options defined in your Gruntfile will override those specified in your config.rb or `raw` property. `config` and `raw` are mutually exclusive.\\n\\n#### config\\n\\nType: `String`  \\nDefault: same path as your Gruntfile\\n\\nSpecify the location of the Compass [configuration file][config] explicitly.\\n\\n#### raw\\n\\nType: `String`\\n\\nString form of the Compass [configuration file][config].\\n\\n#### basePath\\n\\nType: `String`\\n\\nThe path Compass will run from. Defaults to the same path as your Gruntfile.\\n\\n#### banner\\n\\nType: `String`\\n\\nPrepend the specified string to the output file. Useful for licensing\\ninformation. **Note:** This only works in combination with the `specify` option\\nand can conflict with sourcemap generation.\\n\\n#### app\\n\\nType: `String`  \\nDefault: `stand_alone`\\n\\nTell compass what kind of application it is integrating with. Can be `stand_alone` or `rails`.\\n\\n#### sassDir\\n\\nType: `String`\\n\\nThe source directory where you keep your Sass stylesheets.\\n\\n#### cssDir\\n\\nType: `String`\\n\\nThe target directory where you keep your CSS stylesheets.\\n\\n#### specify\\n\\nType: `String|Array`\\n\\nLets you specify which files you want to compile. Useful if you don't want to compile the whole folder. Globbing supported. Ignores filenames starting with underscore. Files must be in the directory you specified in `sassDir`.\\n\\n#### imagesDir\\n\\nType: `String`\\n\\nThe directory where you keep your images.\\n\\n#### javascriptsDir\\n\\nType: `String`\\n\\nThe directory where you keep your JavaScript files.\\n\\n#### fontsDir\\n\\nType: `String`\\n\\nThe directory where you keep your fonts.\\n\\n#### environment\\n\\nType: `String`  \\nDefault: `development`\\n\\nUse sensible defaults for your current environment. Can be: `development` or `production`\\n\\n#### outputStyle\\n\\nType: `String`\\n\\nCSS output mode. Can be: `nested`, `expanded`, `compact`, `compressed`.\\n\\n#### relativeAssets\\n\\nType: `Boolean`\\n\\nMake Compass asset helpers generate relative urls to assets.\\n\\n#### noLineComments\\n\\nType: `Boolean`\\n\\nDisable line comments.\\n\\n#### httpPath\\n\\nType: `String`  \\nDefault: `/`\\n\\nThe path to the project when running within the web server.\\n\\n#### cssPath\\n\\nType: `String`\\n\\nThe directory where the css stylesheets are kept. It is relative to the `projectPath`. Defaults to \\\"stylesheets\\\".\\n\\n#### httpStylesheetsPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + cssDir`\\n\\nThe full http path to stylesheets on the web server.\\n\\n#### sassPath\\n\\nType: `String`  \\nDefault: `sass`\\n\\nThe directory where the sass stylesheets are kept. It is relative to the `projectPath`.\\n\\n#### imagesPath\\n\\nType: `String`  \\nDefault: `images`\\n\\nThe directory where the images are kept. It is relative to the projectPath.\\n\\n#### httpImagesPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + imagesDir`\\n\\nThe full http path to images on the web server.\\n\\n#### generatedImagesDir\\n\\nType: `String`  \\nDefault: value of `imagesDir`\\n\\nThe directory where generated images are kept. It is relative to the `projectPath`.\\n\\n#### generatedImagesPath\\n\\nType: `String`  \\nDefault: value of `projectPath/generatedImagesDir`\\n\\nThe full path to where generated images are kept.\\n\\n#### httpGeneratedImagesPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + generatedImagesDir`\\n\\nThe full http path to generated images on the web server.\\n\\n#### javascriptsPath\\n\\nType: `String`  \\nDefault: `projectPath/javascriptsDir`\\n\\nThe full path to where javascripts are kept.\\n\\n#### httpJavascriptsPath\\n\\nType: `String`  \\nDefault: `httpPath + \\\"/\\\" + javascriptsDir`\\n\\nThe full http path to javascripts on the web server.\\n\\n#### fontsPath\\n\\nType: `String`  \\nDefault: `projectPath/fontsDir`\\n\\nThe full path to where font files are kept.\\n\\n#### httpFontsPath\\n\\nType: `String`\\n\\nThe full http path to font files on the web server.\\n\\n#### httpFontsDir\\n\\nType: `String`\\n\\nThe relative http path to font files on the web server.\\n\\n#### extensionsPath\\n\\nType: `String`  \\nDefault: `project_root/extensions`\\n\\nThe full http path to the ad-hoc extensions folder on the web server. This is used to access compass plugins that have been installed directly to the project (e.g. through [Bower](https://github.com/bower/bower)) instead of globally as gems. *Only Compass >=0.12.2*\\n\\n#### extensionsDir\\n\\nType: `String`\\n\\nThe relative http path to the ad-hoc extensions folder on the web server. *Only Compass >=0.12.2*\\n\\n#### assetCacheBuster\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nIf set to `false`, this disables the default asset cache buster.\\n\\n#### cacheDir\\n\\nType: `String`  \\nDefault: `.sass-cache`\\n\\nThe relative path to the folder where the sass cache files are generated.\\n\\n#### require\\n\\nType: `String|Array`\\n\\nRequire the given Ruby library before running commands. This is used to access Compass plugins without having a project configuration file.\\n\\n#### load\\n\\nType: `String|Array`\\n\\nLoad the framework or extensions found in the specified directory.\\n\\n#### loadAll\\n\\nType: `String|Array`\\n\\nLoad all the frameworks or extensions found in the specified directory.\\n\\n#### importPath\\n\\nType: `String|Array`\\n\\nMakes files under the specified folder findable by Sass's @import directive.\\n\\n#### debugInfo\\n\\nType: `Boolean`\\n\\nCauses the line number and file where a selector is defined to be emitted into the compiled CSS in a format that can be understood by the browser. Automatically disabled when using `outputStyle: 'compressed'`.\\n\\n#### quiet\\n\\nType: `Boolean`\\n\\nQuiet mode.\\n\\n#### trace\\n\\nType: `Boolean`\\n\\nShow a full stacktrace on error.\\n\\n#### force\\n\\nType: `Boolean`\\n\\nAllows Compass to overwrite existing files.\\n\\n#### dryRun\\n\\nType: `Boolean`\\n\\nDry Run. Tells you what it plans to do.\\n\\n#### boring\\n\\nType: `Boolean`\\n\\nTurn off colorized output.\\n\\n#### bundleExec\\n\\nType: `Boolean`\\n\\nRun `compass compile` with [bundle exec](http://gembundler.com/v1.3/man/bundle-exec.1.html): `bundle exec compass compile`.\\n\\n#### clean\\n\\nType: `Boolean`\\n\\nRemove generated files and the sass cache. Runs `compass clean` instead of `compass compile`.\\n\\n#### watch\\n\\nType: `Boolean`\\n\\nRuns `compass watch` instead of `compass compile`. This will use Compass' native watch command to listen for changes to Sass files and recompile your CSS on changes. While much faster than running `compass compile` each time you want to compile your Sass, Compass becomes a blocking task. This means that if you would like to use it in conjunction with another blocking task, such as `watch`, you will need to use it in conjunction with a paralleling task such as [grunt-concurrent](https://github.com/sindresorhus/grunt-concurrent).\\n\\n\\n[config]: http://compass-style.org/help/tutorials/configuration-reference/\\n\\n### Usage Examples\\n\\n#### Example config\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {                  // Task\\n    dist: {                   // Target\\n      options: {              // Target options\\n        sassDir: 'sass',\\n        cssDir: 'css',\\n        environment: 'production'\\n      }\\n    },\\n    dev: {                    // Another target\\n      options: {\\n        sassDir: 'sass',\\n        cssDir: 'css'\\n      }\\n    }\\n  }\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-compass');\\n\\ngrunt.registerTask('default', ['jshint', 'compass']);\\n```\\n\\n\\n#### Example usage\\n\\n\\n##### Use external config file\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        config: 'config/config.rb'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n##### Override setting in external config file\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        config: 'config/config.rb',  // css_dir = 'dev/css'\\n        cssDir: 'dist/css'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n##### Use `raw` option\\n\\n```javascript\\ngrunt.initConfig({\\n  compass: {\\n    dist: {\\n      options: {\\n        sassDir: 'sass',\\n        cssDir: 'css',\\n        raw: 'preferred_syntax = :sass\\\\n' // Use `raw` since it's not directly available\\n      }\\n    }\\n  }\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-01-26   v0.7.1   Fix `assetCacheBuster` option.\\n * 2013-12-07   v0.7.0   Add `cacheDir` option.\\n * 2013-10-04   v0.6.0   Add `watch` option. Fix Compass errors not propagating.\\n * 2013-08-08   v0.5.0   Add `assetCacheBuster` option.\\n * 2013-07-28   v0.4.1   Fix `banner` option with `.css.scss` files.\\n * 2013-07-19   v0.4.0   Add `banner` option. Show compilation time.\\n * 2013-06-24   v0.3.0   Add `extensionDir` and `extensionPath` options. *Requires Compass >=0.12.2*.\\n * 2013-04-11   v0.2.0   Add `clean` option. Expose `raw` options as Grunt options. Fix detection of `Nothing to compile` situation.\\n * 2013-02-27   v0.1.3   Fixes bundleExec.\\n * 2013-02-17   v0.1.2   Ensure Gruntfile.js is included on npm.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-02-05   v0.1.1rc8   Added new options: basePath specify, debugInfo.\\n * 2013-01-25   v0.1.1rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-10   v0.1.1rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-10-22   v0.1.0   Initial release\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Sun Jan 26 2014 19:54:34.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-compass/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-compass');\n  359: grunt.loadNpmTasks('grunt-contrib-compass');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-concat/package.json:\n   49:   \"readme\": \"# grunt-contrib-concat v0.4.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-concat.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-concat)\\n\\n> Concatenate files.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-concat --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-concat');\\n```\\n\\n\\n\\n\\n## Concat task\\n_Run this task with the `grunt concat` command._\\n\\nTask targets, files and options may be specified according to the Grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Options\\n\\n#### separator\\nType: `String`\\nDefault: `grunt.util.linefeed`\\n\\nConcatenated files will be joined on this string. If you're post-processing concatenated JavaScript files with a minifier, you may need to use a semicolon `';'` as the separator.\\n\\n#### banner\\nType: `String`\\nDefault: empty string\\n\\nThis string will be prepended to the beginning of the concatenated output. It is processed using [grunt.template.process][], using the default options.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n#### footer\\nType: `String`\\nDefault: empty string\\n\\nThis string will be appended to the end of the concatenated output. It is processed using [grunt.template.process][], using the default options.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n#### stripBanners\\nType: `Boolean` `Object`\\nDefault: `false`\\n\\nStrip JavaScript banner comments from source files.\\n\\n* `false` - No comments are stripped.\\n* `true` - `/* ... */` block comments are stripped, but _NOT_ `/*! ... */` comments.\\n* `options` object:\\n  * By default, behaves as if `true` were specified.\\n  * `block` - If true, _all_ block comments are stripped.\\n  * `line` - If true, any contiguous _leading_ `//` line comments are stripped.\\n\\n#### process\\nType: `Boolean` `Object` `Function`\\nDefault: `false`\\n\\nProcess source files before concatenating, either as [templates][] or with a custom function.\\n\\n* `false` - No processing will occur.\\n* `true` - Process source files using [grunt.template.process][] defaults.\\n* `data` object - Process source files using [grunt.template.process][], using the specified options.\\n* `function(src, filepath)` - Process source files using the given function, called once for each file. The returned value will be used as source code.\\n\\n_(Default processing options are explained in the [grunt.template.process][] documentation)_\\n\\n  [templates]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md\\n  [grunt.template.process]: https://github.com/gruntjs/grunt-docs/blob/master/grunt.template.md#grunttemplateprocess\\n\\n### Usage Examples\\n\\n#### Concatenating with a custom separator\\n\\nIn this example, running `grunt concat:dist` (or `grunt concat` because `concat` is a [multi task][multitask]) will concatenate the three specified source files (in order), joining files with `;` and writing the output to `dist/built.js`.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    options: {\\n      separator: ';',\\n    },\\n    dist: {\\n      src: ['src/intro.js', 'src/project.js', 'src/outro.js'],\\n      dest: 'dist/built.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Banner comments\\n\\nIn this example, running `grunt concat:dist` will first strip any preexisting banner comment from the `src/project.js` file, then concatenate the result with a newly-generated banner comment, writing the output to `dist/built.js`.\\n\\nThis generated banner will be the contents of the `banner` template string interpolated with the config object. In this case, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\\n\\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  concat: {\\n    options: {\\n      stripBanners: true,\\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\\n        '<%= grunt.template.today(\\\"yyyy-mm-dd\\\") %> */',\\n    },\\n    dist: {\\n      src: ['src/project.js'],\\n      dest: 'dist/built.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Multiple targets\\n\\nIn this example, running `grunt concat` will build two separate files. One \\\"basic\\\" version, with the main file essentially just copied to `dist/basic.js`, and another \\\"with_extras\\\" concatenated version written to `dist/with_extras.js`.\\n\\nWhile each concat target can be built individually by running `grunt concat:basic` or `grunt concat:extras`, running `grunt concat` will build all concat targets. This is because `concat` is a [multi task][multitask].\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    basic: {\\n      src: ['src/main.js'],\\n      dest: 'dist/basic.js',\\n    },\\n    extras: {\\n      src: ['src/main.js', 'src/extras.js'],\\n      dest: 'dist/with_extras.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Multiple files per target\\n\\nLike the previous example, in this example running `grunt concat` will build two separate files. One \\\"basic\\\" version, with the main file essentially just copied to `dist/basic.js`, and another \\\"with_extras\\\" concatenated version written to `dist/with_extras.js`.\\n\\nThis example differs in that both files are built under the same target.\\n\\nUsing the `files` object, you can have list any number of source-destination pairs.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    basic_and_extras: {\\n      files: {\\n        'dist/basic.js': ['src/main.js'],\\n        'dist/with_extras.js': ['src/main.js', 'src/extras.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\n#### Dynamic filenames\\n\\nFilenames can be generated dynamically by using `<%= %>` delimited underscore templates as filenames.\\n\\nIn this example, running `grunt concat:dist` generates a destination file whose name is generated from the `name` and `version` properties of the referenced `package.json` file (via the `pkg` config property).\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  concat: {\\n    dist: {\\n      src: ['src/main.js'],\\n      dest: 'dist/<%= pkg.name %>-<%= pkg.version %>.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Advanced dynamic filenames\\n\\nIn this more involved example, running `grunt concat` will build two separate files (because `concat` is a [multi task][multitask]). The destination file paths will be expanded dynamically based on the specified templates, recursively if necessary.\\n\\nFor example, if the `package.json` file contained `{\\\"name\\\": \\\"awesome\\\", \\\"version\\\": \\\"1.0.0\\\"}`, the files `dist/awesome/1.0.0/basic.js` and `dist/awesome/1.0.0/with_extras.js` would be generated.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  dirs: {\\n    src: 'src/files',\\n    dest: 'dist/<%= pkg.name %>/<%= pkg.version %>',\\n  },\\n  concat: {\\n    basic: {\\n      src: ['<%= dirs.src %>/main.js'],\\n      dest: '<%= dirs.dest %>/basic.js',\\n    },\\n    extras: {\\n      src: ['<%= dirs.src %>/main.js', '<%= dirs.src %>/extras.js'],\\n      dest: '<%= dirs.dest %>/with_extras.js',\\n    },\\n  },\\n});\\n```\\n\\n#### Invalid or Missing Files Warning\\nIf you would like the `concat` task to warn if a given file is missing or invalid be sure to set `nonull` to `true`:\\n\\n```js\\ngrunt.initConfig({\\n  concat: {\\n    missing: {\\n      src: ['src/invalid_or_missing_file'],\\n      dest: 'compiled.js',\\n      nonull: true,\\n    },\\n  },\\n});\\n```\\n\\nSee [configuring files for a task](http://gruntjs.com/configuring-tasks#files) for how to configure file globbing in Grunt.\\n\\n\\n#### Custom process function\\nIf you would like to do any custom processing before concatenating, use a custom process function:\\n\\n```js\\ngrunt.initConfig({\\n  concat: {\\n    dist: {\\n      options: {\\n        // Replace all 'use strict' statements in the code with a single one at the top\\n        banner: \\\"'use strict';\\\\n\\\",\\n        process: function(src, filepath) {\\n          return '// Source: ' + filepath + '\\\\n' +\\n            src.replace(/(^|\\\\n)[ \\\\t]*('use strict'|\\\"use strict\\\");?\\\\s*/g, '$1');\\n        },\\n      },\\n      files: {\\n        'dist/built.js': ['src/project.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\n[multitask]: http://gruntjs.com/creating-tasks#multi-tasks\\n\\n\\n## Release History\\n\\n * 2014-03-21   v0.4.0   README updates. Output updates.\\n * 2013-04-25   v0.3.0   Add option to process files with a custom function.\\n * 2013-04-08   v0.2.0   Don't normalize separator to allow user to set LF even on a Windows environment.\\n * 2013-02-22   v0.1.3   Support footer option.\\n * 2013-02-15   v0.1.2   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.2rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.2rc5   Updating to work with grunt v0.4.0rc5. Switching back to this.files api.\\n * 2012-11-13   v0.1.1   Switch to this.file api internally.\\n * 2012-10-03   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com/)\\n\\n*This file was generated on Mon Mar 31 2014 11:20:28.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-concat/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-concat');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-connect/package.json:\n   56:   \"readme\": \"# grunt-contrib-connect v0.7.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-connect.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-connect)\\n\\n> Start a connect web server.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-connect --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-connect');\\n```\\n\\n\\n\\n\\n## Connect task\\n_Run this task with the `grunt connect` command._\\n\\nNote that this server only runs as long as grunt is running. Once grunt's tasks have completed, the web server stops. This behavior can be changed with the [keepalive](#keepalive) option, and can be enabled ad-hoc by running the task like `grunt connect:keepalive`.\\n\\nThis task was designed to be used in conjunction with another task that is run immediately afterwards, like the [grunt-contrib-qunit plugin](https://github.com/gruntjs/grunt-contrib-qunit) `qunit` task.\\n### Options\\n\\n#### port\\nType: `Integer`  \\nDefault: `8000`\\n\\nThe port on which the webserver will respond. The task will fail if the specified port is already in use. You can use the special values `0` or `'?'` to use a system-assigned port.\\n\\n#### protocol\\nType: `String`  \\nDefault: `'http'`\\n\\nMay be `'http'` or `'https'`.\\n\\n#### hostname\\nType: `String`  \\nDefault: `'0.0.0.0'`\\n\\nThe hostname the webserver will use.\\n\\nSetting it to `'*'` will make the server accessible from anywhere.\\n\\n#### base\\nType: `String` or `Array`  \\nDefault: `'.'`\\n\\nThe base (or root) directory from which files will be served. Defaults to the project Gruntfile's directory.\\n\\nCan be an array of bases to serve multiple directories. The last base given will be the directory to become browse-able.\\n\\n#### directory\\nType: `String`  \\nDefault: `null`\\n\\nSet to the directory you wish to be browse-able. Used to override the `base` option browse-able directory.\\n\\n#### keepalive\\nType: `Boolean`  \\nDefault: `false`\\n\\nKeep the server alive indefinitely. Note that if this option is enabled, any tasks specified after this task will _never run_. By default, once grunt's tasks have completed, the web server stops. This option changes that behavior.\\n\\nThis option can also be enabled ad-hoc by running the task like `grunt connect:targetname:keepalive`\\n\\n#### debug\\nType: `Boolean`  \\nDefault: `false`\\n\\nSet the `debug` option to true to enable logging instead of using the `--debug` flag.\\n\\n#### livereload\\nType: `Boolean` or `Number`  \\nDefault: `false`\\n\\nSet to `true` or a port number to inject a live reload script tag into your page using [connect-livereload](https://github.com/intesso/connect-livereload).\\n\\n*This does not perform live reloading. It is intended to be used in tandem with grunt-contrib-watch or another task that will trigger a live reload server upon files changing.*\\n\\n#### open\\nType: `Boolean` or `String` or `Object`\\nDefault: `false`\\n\\nOpen the served page in your default browser. Specifying `true` opens the default server URL, specifying a URL opens that URL or specify an object with the following keys to configure open directly (each are optional):\\n\\n```js\\n{\\n  target: 'http://localhost:8000', // target url to open\\n  appName: 'open', // name of the app that opens, ie: open, start, xdg-open\\n  callback: function() {} // called when the app has opened\\n}\\n```\\n\\n#### useAvailablePort\\n  Type: `Boolean`\\n  Default: `false`\\n\\nIf `true` the task will look for the next available port after the set `port` option.\\nThis also applies to `livereload`.\\n\\n#### middleware\\nType: `Function` or `Array`\\nDefault: `Array` of connect middlewares that use `options.base` for static files and directory browsing\\n\\nAs an `Array`:\\n\\n```js\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        middleware: [\\n          function myMiddleware(req, res, next) {\\n            res.end('Hello, world!');\\n          }\\n        ],\\n      },\\n    },\\n  },\\n});\\n```\\n\\nAs a `function`:\\n\\n```js\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        middleware: function(connect, options, middlewares) {\\n          // inject a custom middleware into the array of default middlewares\\n          middlewares.push(function(req, res, next) {\\n            if (req.url !== '/hello/world') return next();\\n\\n            res.end('Hello, world from port #' + options.port + '!');\\n          });\\n\\n          return middlewares;\\n        },\\n      },\\n    },\\n  },\\n});\\n```\\n\\nLets you add in your own Connect middlewares. This option expects a function that returns an array of middlewares. See the [project Gruntfile][] and [project unit tests][] for a usage example.\\n\\n[project Gruntfile]: Gruntfile.js\\n[project unit tests]: test/connect_test.js\\n\\n### Usage examples\\n\\n#### Basic Use\\nIn this example, `grunt connect` (or more verbosely, `grunt connect:server`) will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile, and any tasks run afterwards will be able to access it.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        port: 9001,\\n        base: 'www-root'\\n      }\\n    }\\n  }\\n});\\n```\\n\\nIf you want your web server to use the default options, just omit the `options` object. You still need to specify a target (`uses_defaults` in this example), but the target's configuration object can otherwise be empty or nonexistent. In this example, `grunt connect` (or more verbosely, `grunt connect:uses_defaults`) will start a static web server using the default options.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    uses_defaults: {}\\n  }\\n});\\n```\\n\\n#### Multiple Servers\\nYou can specify multiple servers to be run alone or simultaneously by creating a target for each server. In this example, running either `grunt connect:site1` or `grunt connect:site2` will  start the appropriate web server, but running `grunt connect` will run _both_. Note that any server for which the [keepalive](#keepalive) option is specified will prevent _any_ task or target from running after it.\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    site1: {\\n      options: {\\n        port: 9000,\\n        base: 'www-roots/site1'\\n      }\\n    },\\n    site2: {\\n      options: {\\n        port: 9001,\\n        base: 'www-roots/site2'\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Roll Your Own\\nLike the [Basic Use](#basic-use) example, this example will start a static web server at `http://localhost:9001/`, with its base path set to the `www-root` directory relative to the gruntfile. Unlike the other example, this is done by creating a brand new task. in fact, this plugin isn't even installed!\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({ /* Nothing needed here! */ });\\n\\n// After running \\\"npm install connect --save-dev\\\" to add connect as a dev\\n// dependency of your project, you can require it in your gruntfile with:\\nvar connect = require('connect');\\n\\n// Now you can define a \\\"connect\\\" task that starts a webserver, using the\\n// connect lib, with whatever options and configuration you need:\\ngrunt.registerTask('connect', 'Start a custom static web server.', function() {\\n  grunt.log.writeln('Starting static web server in \\\"www-root\\\" on port 9001.');\\n  connect(connect.static('www-root')).listen(9001);\\n});\\n```\\n\\n#### Support for HTTPS\\n\\nA default certificate authority, certificate and key file are provided and pre-\\nconfigured for use when `protocol` has been set to `https`.\\n\\nNOTE: No passphrase set for the certificate.\\nIf you are getting warnings in Google Chrome, add 'server.crt' (from 'node_modules/tasks/certs')\\nto your keychain.\\nIn OS X, after you add 'server.crt', right click on the certificate,\\nselect 'Get Info' - 'Trust' - 'Always Trust', close window, restart Chrome.\\n\\n###### Advanced HTTPS config\\n\\nIf the default certificate setup is unsuitable for your environment, OpenSSL\\ncan be used to create a set of self-signed certificates with a local ca root.\\n\\n```shell\\n### Create ca.key, use a password phrase when asked\\n### When asked 'Common Name (e.g. server FQDN or YOUR name) []:' use your hostname, i.e 'mysite.dev'\\nopenssl genrsa -des3 -out ca.key 1024\\nopenssl req -new -key ca.key -out ca.csr\\nopenssl x509 -req -days 365 -in ca.csr -out ca.crt -signkey ca.key\\n\\n### Create server certificate\\nopenssl genrsa -des3 -out server.key 1024\\nopenssl req -new -key server.key -out server.csr\\n\\n### Remove password from the certificate\\ncp server.key server.key.org\\nopenssl rsa -in server.key.org -out server.key\\n\\n### Generate self-siged certificate\\nopenssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt\\n```\\n\\nFor more details on the various options that can be set when configuring SSL,\\nplease see the Node documentation for [TLS][].\\n\\nGrunt configuration would become\\n\\n```javascript\\n// Project configuration.\\ngrunt.initConfig({\\n  connect: {\\n    server: {\\n      options: {\\n        protocol: 'https',\\n        port: 8443,\\n        key: grunt.file.read('server.key').toString(),\\n        cert: grunt.file.read('server.crt').toString(),\\n        ca: grunt.file.read('ca.crt').toString()\\n      },\\n    },\\n  },\\n});\\n```\\n\\n[TLS]: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener\\n\\n#### Grunt Events\\nThe connect plugin will emit a grunt event, `connect.{taskName}.listening`, once the server has started. You can listen for this event to run things against a keepalive server, for example:\\n\\n```javascript\\ngrunt.registerTask('jasmine-server', 'start web server for jasmine tests in browser', function() {\\n  grunt.task.run('jasmine:tests:build');\\n\\n  grunt.event.once('connect.tests.listening', function(host, port) {\\n    var specRunnerUrl = 'http://' + host + ':' + port + '/_SpecRunner.html';\\n    grunt.log.writeln('Jasmine specs available at: ' + specRunnerUrl);\\n    require('open')(specRunnerUrl);\\n  });\\n\\n  grunt.task.run('connect:tests:keepalive');\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-02-27   v0.7.1   Fixes issue with the '*' hostname option.\\n * 2014-02-18   v0.7.0   Update connect to ~2.13.0. Default hostname switched to '0.0.0.0'. Modified options.middleware to accept an array or a function.\\n * 2013-12-29   v0.6.0   Open options.hostname if provided. Update connect-livereload to ~0.3.0. Update connect to ~2.12.0. Use well-formed ssl certificates. Support all options of open. Make directory browseable when base is a string.\\n * 2013-09-05   v0.5.0   Add 'open' option.\\n * 2013-09-05   v0.4.2   Un-normalize options.base as it should be a string or an array as the user has set. Fix setting target hostname option.\\n * 2013-09-02   v0.4.1   Browse-able directory is the last item supplied to bases. Added directory option to override browse-able directory.\\n * 2013-09-01   v0.4.0   Fix logging of which server address. Ability to set multiple bases. Event emitted when server starts listening. Support for HTTPS. debug option added to display debug logging like the --debug flag. livereload option added to inject a livereload snippet into the page.\\n * 2013-04-10   v0.3.0   Add ability to listen on system-assigned port.\\n * 2013-03-07   v0.2.0   Upgrade connect dependency.\\n * 2013-02-17   v0.1.2   Ensure Gruntfile.js is included on npm.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-11-01   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com)\\n\\n*This file was generated on Thu Feb 27 2014 15:45:07.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-connect/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-connect');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-copy/package.json:\n   46:   \"readme\": \"# grunt-contrib-copy v0.5.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-copy.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-copy)\\n\\n> Copy files and folders.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-copy --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-copy');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-copy/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Copy task\\n_Run this task with the `grunt copy` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n### Options\\n\\n#### process\\nType: `Function(content, srcpath)`\\n\\nThis option is passed to `grunt.file.copy` as an advanced way to control the file contents that are copied.\\n\\n*`processContent` has been renamed to `process` and the option name will be removed in the future.*\\n\\n#### noProcess\\nType: `String`\\n\\nThis option is passed to `grunt.file.copy` as an advanced way to control which file contents are processed.\\n\\n*`processContentExclude` has been renamed to `noProcess` and the option name will be removed in the future.*\\n\\n#### encoding\\nType: `String`  \\nDefault: `grunt.file.defaultEncoding`\\n\\nThe file encoding to copy files with.\\n\\n#### mode\\nType: `Boolean` or `Number`  \\nDefault: `false`\\n\\nWhether to copy or set the existing file permissions. Set to `true` to copy the existing file permissions. Or set to the mode, i.e.: `0644`, that copied files will be set to.\\n\\n### Usage Examples\\n\\n```js\\ncopy: {\\n  main: {\\n    files: [\\n      // includes files within path\\n      {expand: true, src: ['path/*'], dest: 'dest/', filter: 'isFile'},\\n\\n      // includes files within path and its sub-directories\\n      {expand: true, src: ['path/**'], dest: 'dest/'},\\n\\n      // makes all src relative to cwd\\n      {expand: true, cwd: 'path/', src: ['**'], dest: 'dest/'},\\n\\n      // flattens results to a single level\\n      {expand: true, flatten: true, src: ['path/**'], dest: 'dest/', filter: 'isFile'}\\n    ]\\n  }\\n}\\n```\\n\\nThis task supports all the file mapping format Grunt supports. Please read [Globbing patterns](http://gruntjs.com/configuring-tasks#globbing-patterns) and [Building the files object dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically) for additional details.\\n\\nHere are some additional examples, given the following file tree:\\n```shell\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n2 directories, 3 files\\n```\\n\\n**Copy a single file tree:**\\n```js\\ncopy: {\\n  main: {\\n    src: 'src/*',\\n    dest: 'dest/',\\n  },\\n},\\n```\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nCreated 1 directories, copied 1 files\\n\\nDone, without errors.\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n├── dest\\n│   └── src\\n│       ├── a\\n│       └── subdir\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n5 directories, 4 files\\n```\\n\\n**Flattening the filepath output:**\\n\\n```js\\ncopy: {\\n  main: {\\n    expand: true,\\n    cwd: 'src/',\\n    src: '**',\\n    dest: 'dest/',\\n    flatten: true,\\n    filter: 'isFile',\\n  },\\n},\\n```\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nCopied 2 files\\n\\nDone, without errors.\\n$ tree -I node_modules\\n.\\n├── Gruntfile.js\\n├── dest\\n│   ├── a\\n│   └── b\\n└── src\\n    ├── a\\n    └── subdir\\n        └── b\\n\\n3 directories, 5 files\\n```\\n\\n\\n**Copy and modify a file:**\\n\\nTo change the contents of a file as it is copied, set an `options.process` function as follows:\\n\\n```js\\ncopy: {\\n  main: {\\n    src: 'src/a',\\n    dest: 'src/a.bak',\\n    options: {\\n      process: function (content, srcpath) {\\n        return content.replace(/[sad ]/g,\\\"_\\\");\\n      }\\n    }\\n  },\\n},\\n```\\n\\nHere all occurences of the letters \\\"s\\\", \\\"a\\\" and \\\"d\\\", as well as all spaces, will be changed to underlines in \\\"a.bak\\\". Of course, you are not limited to just using regex replacements.\\n\\nTo process all files in a directory, the `process` function is used in exactly the same way.\\n\\nNOTE: If `process` is not working, be aware it was called `processContent` in v0.4.1 and earlier.\\n\\n\\n##### Troubleshooting\\n\\nBy default, if a file or directory is not found it is quietly ignored. If the file should exist, and non-existence generate an error, then add `nonull:true`. For instance, this Gruntfile.js entry:\\n\\n```js\\ncopy: {\\n  main: {\\n    nonull: true,\\n    src: 'not-there',\\n    dest: 'create-me',\\n  },\\n},\\n```\\n\\ngives this output:\\n\\n```shell\\n$ grunt copy\\nRunning \\\"copy:main\\\" (copy) task\\nWarning: Unable to read \\\"not-there\\\" file (Error code: ENOENT). Use --force to continue.\\n\\nAborted due to warnings.\\n```\\n\\n\\n\\n## Release History\\n\\n * 2013-12-23   v0.5.0   If an encoding is specified, overwrite grunt.file.defaultEncoding. Rename processContent/processContentExclude to process/noProcess to match Grunt API. mode option to copy existing or set file permissions.\\n * 2013-03-26   v0.4.1   Output summary by default (\\\"Copied N files, created M folders\\\"). Individual transaction output available via `--verbose`.\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-23   v0.4.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-14   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Conversion to grunt v0.4 conventions. Replace basePath with cwd. Empty directory support.\\n * 2012-10-18   v0.3.2   Pass copyOptions on single file copy.\\n * 2012-10-12   v0.3.1   Rename grunt-contrib-lib dep to grunt-lib-contrib.\\n * 2012-09-24   v0.3.0   General cleanup and consolidation. Global options depreciated.\\n * 2012-09-18   v0.2.4   No valid source check.\\n * 2012-09-17   v0.2.3   Path.sep fallback for node <= 0.7.9.\\n * 2012-09-17   v0.2.2   Single file copy support. Test refactoring.\\n * 2012-09-07   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Chris Talkington](http://christalkington.com/)\\n\\n*This file was generated on Mon Dec 23 2013 20:21:57.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-copy/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-copy');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-cssmin/package.json:\n   51:   \"readme\": \"# grunt-contrib-cssmin v0.8.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-cssmin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-cssmin)\\n\\n> Compress CSS files.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.1`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-cssmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-cssmin');\\n```\\n\\n*This plugin was designed to work with Grunt 0.4.x. If you're still using grunt v0.3.x it's strongly recommended that [you upgrade](http://gruntjs.com/upgrading-from-0.3-to-0.4), but in case you can't please use [v0.3.2](https://github.com/gruntjs/grunt-contrib-cssmin/tree/grunt-0.3-stable).*\\n\\n\\n\\n## Cssmin task\\n_Run this task with the `grunt cssmin` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\nFiles are compressed with [clean-css](https://github.com/GoalSmashers/clean-css).\\n### Options\\n\\n#### banner\\n\\nType: `String`  \\nDefault: `null`\\n\\nPrefix the compressed source with the given banner, with a linebreak inbetween.\\n\\n#### keepSpecialComments\\n\\nType: `String` `Number`  \\nDefault: `'*'`\\n\\nTo keep or remove special comments, exposing the underlying option from [clean-css](https://github.com/GoalSmashers/clean-css). `'*'` for keeping all (default), `1` for keeping first one, `0` for removing all.\\n\\n#### report\\nChoices: `'min'`, `'gzip'`  \\nDefault: `'min'`\\n\\nEither report only minification result or report minification and gzip results.\\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\\n\\n### Usage Examples\\n\\n#### Combine two files into one output file\\n\\n```js\\ncssmin: {\\n  combine: {\\n    files: {\\n      'path/to/output.css': ['path/to/input_one.css', 'path/to/input_two.css']\\n    }\\n  }\\n}\\n```\\n\\n#### Add a banner\\n```js\\ncssmin: {\\n  add_banner: {\\n    options: {\\n      banner: '/* My minified css file */'\\n    },\\n    files: {\\n      'path/to/output.css': ['path/to/**/*.css']\\n    }\\n  }\\n}\\n```\\n\\n#### Minify all contents of a release directory and add a `.min.css` extension\\n```js\\ncssmin: {\\n  minify: {\\n    expand: true,\\n    cwd: 'release/css/',\\n    src: ['*.css', '!*.min.css'],\\n    dest: 'release/css/',\\n    ext: '.min.css'\\n  }\\n}\\n```\\n\\n\\n## Release History\\n\\n * 2014-02-14   v0.8.0   update clean-css v2.1.0\\n * 2013-11-23   v0.7.0   update clean-css v2.0.0\\n * 2013-09-14   v0.6.2   Support relative URLs via clean-css ~1.1.1.\\n * 2013-05-25   v0.6.1   Support import in-lining vis clean-css ~1.0.4.\\n * 2013-04-05   v0.6.0   Update clean-css dependency to ~1.0.0\\n * 2013-03-14   v0.5.0   Support for 'report' option (false by default)\\n * 2013-03-10   v0.4.2   Add banner option Support clean-css keepSpecialComments\\n * 2013-02-17   v0.4.1   Update clean-css dependency to ~0.10.0\\n * 2013-02-15   v0.4.0   First official release for Grunt 0.4.0.\\n * 2013-01-23   v0.4.0rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.4.0rc5   Updating to work with grunt v0.4.0rc5. Switching to this.files api.\\n * 2012-11-01   v0.3.2   Update clean-css dep.\\n * 2012-10-12   v0.3.1   Rename grunt-contrib-lib dep to grunt-lib-contrib.\\n * 2012-09-23   v0.3.0   Options no longer accepted from global config key.\\n * 2012-09-10   v0.2.0   Refactored from grunt-contrib into individual repo.\\n\\n---\\n\\nTask submitted by [Tim Branyen](http://tbranyen.com/)\\n\\n*This file was generated on Sat Mar 01 2014 19:58:58.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-cssmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-cssmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/cli/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/package.json:\n   51:   \"readme\": \"# grunt-contrib-htmlmin v0.3.0 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-htmlmin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-htmlmin)\\n\\n> Minify HTML\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-htmlmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-htmlmin');\\n```\\n\\n\\n\\n\\n## Htmlmin task\\n_Run this task with the `grunt htmlmin` command._\\n\\nMinifies HTML using [html-minifier](https://github.com/kangax/html-minifier). Bugs regarding the output should be reported [here](https://github.com/kangax/html-minifier/issues/new).\\n\\n### Options\\n\\nSee the html-minifier [options](https://github.com/kangax/html-minifier#options-quick-reference).\\n\\n#### Example config\\n\\n```javascript\\ngrunt.initConfig({\\n  htmlmin: {                                     // Task\\n    dist: {                                      // Target\\n      options: {                                 // Target options\\n        removeComments: true,\\n        collapseWhitespace: true\\n      },\\n      files: {                                   // Dictionary of files\\n        'dist/index.html': 'src/index.html',     // 'destination': 'source'\\n        'dist/contact.html': 'src/contact.html'\\n      }\\n    },\\n    dev: {                                       // Another target\\n      files: {\\n        'dist/index.html': 'src/index.html',\\n        'dist/contact.html': 'src/contact.html'\\n      }\\n    }\\n  }\\n});\\n\\ngrunt.registerTask('default', ['htmlmin']);\\n```\\n\\n\\n## Release History\\n\\n * 2014-05-05   v0.3.0   Drop node.js 0.8 support. Updated to htmlmin 0.6.0.\\n * 2014-02-09   v0.2.0   Rewrite task. Drop concat support.\\n * 2013-04-06   v0.1.3   Fail target when minify encounters an error.\\n * 2013-04-05   v0.1.2   Update html-minifier which fixes IE conditional comments and prefixed HTML elements `<ng-include>` `<ng:include>`.\\n * 2013-02-18   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-30   v0.1.1rc7   Updating grunt/gruntplugin dependencies to rc7. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-11-01   v0.1.0   Initial release.\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Mon May 05 2014 02:02:08.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-imagemin/package.json:\n   57:   \"readme\": \"# grunt-contrib-imagemin v0.7.1 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-imagemin.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-imagemin) <a href=\\\"https://ci.appveyor.com/project/gruntjs/grunt-contrib-imagemin\\\"><img src=\\\"https://ci.appveyor.com/api/projects/status/s1cpt9m3e5ihuoqj/branch/master\\\" alt=\\\"Build Status: Windows\\\" height=\\\"18\\\" /></a>\\n\\n> Minify images\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `^0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-imagemin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-imagemin');\\n```\\n\\n\\n\\n\\n## Imagemin task\\n_Run this task with the `grunt imagemin` command._\\n\\nMinify images using [imagemin](https://github.com/kevva/imagemin).\\n\\nComes bundled with the following optimizers:\\n\\n- [gifsicle](https://github.com/kevva/imagemin-gifsicle) — *Compress GIF images*\\n- [jpegtran](https://github.com/kevva/imagemin-jpegtran) — *Compress JPEG images*\\n- [optipng](https://github.com/kevva/imagemin-optipng) — *Compress PNG images*\\n- [svgo](https://github.com/kevva/imagemin-svgo) — *Compress SVG images*\\n\\nWe recommend using [grunt-newer](https://github.com/tschaub/grunt-newer) to only process changed files as minifying images can be quite slow.\\n\\n### Options\\n\\nOptions will only apply to the relevant files, so you don't need separate targets for png/jpg.\\n\\n\\n#### optimizationLevel *(png)*\\n\\nType: `Number`  \\nDefault: `3`\\n\\nSelect optimization level between `0` and `7`.\\n\\n> The optimization level 0 enables a set of optimization operations that require minimal effort. There will be no changes to image attributes like bit depth or color type, and no recompression of existing IDAT datastreams. The optimization level 1 enables a single IDAT compression trial. The trial chosen is what. OptiPNG thinks it’s probably the most effective. The optimization levels 2 and higher enable multiple IDAT compression trials; the higher the level, the more trials.\\n\\nLevel and trials:\\n\\n1. 1 trial\\n2. 8 trials\\n3. 16 trials\\n4. 24 trials\\n5. 48 trials\\n6. 120 trials\\n7. 240 trials\\n\\n\\n#### progressive *(jpg)*\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nLossless conversion to progressive.\\n\\n\\n#### interlaced *(gif)*\\n\\nType: `Boolean`  \\nDefault: `true`\\n\\nInterlace gif for progressive rendering.\\n\\n\\n#### use\\n\\nType: `Array`  \\nDefault: `null`\\n\\nAdditional [plugins](https://npmjs.org/keyword/imageminplugin) to use with imagemin.\\n\\n#### Example config\\n\\nYou can either map your files statically or [dynamically](http://gruntjs.com/configuring-tasks#building-the-files-object-dynamically).\\n\\n```js\\nvar mozjpeg = require('imagemin-mozjpeg');\\n\\ngrunt.initConfig({\\n  imagemin: {                          // Task\\n    static: {                          // Target\\n      options: {                       // Target options\\n        optimizationLevel: 3,\\n        use: [mozjpeg()]\\n      },\\n      files: {                         // Dictionary of files\\n        'dist/img.png': 'src/img.png', // 'destination': 'source'\\n        'dist/img.jpg': 'src/img.jpg',\\n        'dist/img.gif': 'src/img.gif'\\n      }\\n    },\\n    dynamic: {                         // Another target\\n      files: [{\\n        expand: true,                  // Enable dynamic expansion\\n        cwd: 'src/',                   // Src matches are relative to this path\\n        src: ['**/*.{png,jpg,gif}'],   // Actual patterns to match\\n        dest: 'dist/'                  // Destination path prefix\\n      }]\\n    }\\n  }\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-imagemin');\\ngrunt.registerTask('default', ['imagemin']);\\n```\\n\\n\\n## Release History\\n\\n * 2014-05-31   v0.7.1   Caching original image size before optimization. Remove unused dependencies.\\n * 2014-04-29   v0.7.0   Update \\\"imagemin\\\" to 0.4\\n * 2014-04-01   v0.6.1   Fix problem with corrupt images being created\\n * 2014-03-28   v0.6.0   Updated \\\"imagemin\\\" to 0.2 Added percentage to size saved view - fixes cache option removed. Adds \\\"pretty-bytes\\\".\\n * 2014-01-13   v0.5.0   Extract the logic into an external lib [imagemin](https://github.com/kevva/imagemin).\\n * 2014-01-08   v0.4.1   Prevent \\\"Maximum call stack size exceeded\\\". Speed up loading this task by lazy requiring bin deps.\\n * 2013-11-22   v0.4.0   The `pngquant` option is now `false` by default instead of `true`.\\n * 2013-09-09   v0.3.0   Add `interlace` option for gif files.\\n * 2013-08-16   v0.2.0   Add `gifsicle` and `pngquant`. Cache images so only changed images are optimized. Default `optimizationLevel` to `7` and `progressive` to `true`.\\n * 2013-04-10   v0.1.4   Fix exception when running in verbose mode.\\n * 2013-04-05   v0.1.3   Fix OptiPNG not being able to overwrite file. Allow overwriting src when dest/src is the same. Limit to 10 concurrent optimizations.\\n * 2013-02-22   v0.1.2   Fix OptiPNG not working on some systems. Prevent OptiPNG from producing .bak files.\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-30   v0.1.1rc8   Fix task not creating destination folders\\n * 2013-01-30   v0.1.1rc7   Updating to work with grunt v0.4.0rc7. Switching to this.files api.\\n * 2012-11-01   v0.1.0   Initial release.\\n\\n---\\n\\nTask submitted by [Sindre Sorhus](http://github.com/sindresorhus)\\n\\n*This file was generated on Sat May 31 2014 16:32:27.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-imagemin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-imagemin');\n  118: grunt.loadNpmTasks('grunt-contrib-imagemin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/node_modules/jshint/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/package.json:\n   48:   \"readme\": \"# grunt-contrib-jshint v0.10.0 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-jshint.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-jshint)\\n\\n> Validate files with JSHint.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-jshint --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-jshint');\\n```\\n\\n\\n\\n\\n## Jshint task\\n_Run this task with the `grunt jshint` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\nFor more explanations of the lint errors JSHint will throw at you please visit [jslinterrors.com](http://jslinterrors.com/).\\n\\n### Options\\n\\nAny specified option will be passed through directly to [JSHint][], thus you can specify any option that JSHint supports. See the [JSHint documentation][] for a list of supported options.\\n\\n[JSHint]: http://www.jshint.com/\\n[JSHint documentation]: http://www.jshint.com/docs/\\n\\nA few additional options are supported:\\n\\n\\n#### globals\\n\\nType: `Object`  \\nDefault: `null`\\n\\nA map of global variables, with keys as names and a boolean value to determine if they are assignable. This is not a standard JSHint option, but is passed into the `JSHINT` function as its third argument. See the [JSHint documentation][] for more information.\\n\\n\\n#### jshintrc\\n\\nType: `String` or `true`  \\nDefault: `null`\\n\\nIf set to `true`, no config will be sent to jshint and jshint will search for `.jshintrc` files relative to the files being linted.\\n\\nIf a filename is specified, options and globals defined therein will be used. The `jshintrc` file must be valid JSON and looks something like this:\\n\\n```json\\n{\\n  \\\"curly\\\": true,\\n  \\\"eqnull\\\": true,\\n  \\\"eqeqeq\\\": true,\\n  \\\"undef\\\": true,\\n  \\\"globals\\\": {\\n    \\\"jQuery\\\": true\\n  }\\n}\\n```\\n\\n*Be aware that `jshintrc` settings are not merged with your Grunt options.*\\n\\n\\n#### extensions\\n\\nType: `String`  \\nDefault: `''`\\n\\nA list of non-dot-js extensions to check.\\n\\n\\n#### ignores\\n\\nType: `Array`  \\nDefault: `null`\\n\\nA list of files and dirs to ignore. This will override your `.jshintignore` file if set and does not merge.\\n\\n\\n#### force\\n\\nType: `Boolean`  \\nDefault: `false`\\n\\nSet `force` to `true` to report JSHint errors but not fail the task.\\n\\n\\n#### reporter\\n\\nType: `String`  \\nDefault: `null`\\n\\nAllows you to modify this plugins output. By default it will use a built-in Grunt reporter. Set the path to your own custom reporter or to one of the built-in JSHint reporters: `jslint` or `checkstyle`.\\n\\nSee also: [Writing your own JSHint reporter.](http://jshint.com/docs/reporters/)\\n\\nYou can also use an external reporter. For example [jshint-stylish](https://github.com/sindresorhus/jshint-stylish):\\n\\n```\\n$ npm install --save-dev jshint-stylish\\n```\\n\\n```js\\noptions: {\\n    reporter: require('jshint-stylish')\\n}\\n```\\n\\n#### reporterOutput\\n\\nType: `String`  \\nDefault: `null`\\n\\nSpecify a filepath to output the results of a reporter. If `reporterOutput` is specified then all output will be written to the given filepath instead of printed to stdout.\\n\\n### Usage examples\\n\\n#### Wildcards\\nIn this example, running `grunt jshint:all` (or `grunt jshint` because `jshint` is a [multi task](http://gruntjs.com/configuring-tasks#task-configuration-and-targets)) will lint the project's Gruntfile as well as all JavaScript files in the `lib` and `test` directories and their subdirectores, using the default JSHint options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  jshint: {\\n    all: ['Gruntfile.js', 'lib/**/*.js', 'test/**/*.js']\\n  }\\n});\\n```\\n\\n#### Linting before and after concatenating\\nIn this example, running `grunt jshint` will lint both the \\\"beforeconcat\\\" set and \\\"afterconcat\\\" sets of files. This is not ideal, because `dist/output.js` may get linted before it gets created via the [grunt-contrib-concat plugin](https://github.com/gruntjs/grunt-contrib-concat) `concat` task.\\n\\nIn this case, you should lint the \\\"beforeconcat\\\" files first, then concat, then lint the \\\"afterconcat\\\" files, by running `grunt jshint:beforeconcat concat jshint:afterconcat`.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  concat: {\\n    dist: {\\n      src: ['src/foo.js', 'src/bar.js'],\\n      dest: 'dist/output.js'\\n    }\\n  },\\n  jshint: {\\n    beforeconcat: ['src/foo.js', 'src/bar.js'],\\n    afterconcat: ['dist/output.js']\\n  }\\n});\\n```\\n\\n#### Specifying JSHint options and globals\\n\\nIn this example, custom JSHint options are specified. Note that when `grunt jshint:uses_defaults` is run, those files are linted using the default options, but when `grunt jshint:with_overrides` is run, those files are linted using _merged_ task/target options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  jshint: {\\n    options: {\\n      curly: true,\\n      eqeqeq: true,\\n      eqnull: true,\\n      browser: true,\\n      globals: {\\n        jQuery: true\\n      },\\n    },\\n    uses_defaults: ['dir1/**/*.js', 'dir2/**/*.js'],\\n    with_overrides: {\\n      options: {\\n        curly: false,\\n        undef: true,\\n      },\\n      files: {\\n        src: ['dir3/**/*.js', 'dir4/**/*.js']\\n      },\\n    }\\n  },\\n});\\n```\\n\\n#### Ignoring specific warnings\\n\\nIf you would like to ignore a specific warning:\\n\\n```shell\\n[L24:C9] W015: Expected '}' to have an indentation at 11 instead at 9.\\n```\\n\\nYou can toggle it by prepending `-` to the warning id as an option:\\n\\n```js\\ngrunt.initConfig({\\n  jshint: {\\n    ignore_warning: {\\n      options: {\\n        '-W015': true,\\n      },\\n      src: ['**/*.js'],\\n    },\\n  },\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-04-02   v0.10.0   Update to JSHint 2.5.0.\\n * 2014-03-12   v0.9.2   Fixes a bug where reporterOutput was still passed to jshint.\\n * 2014-03-12   v0.9.1   Don't pass reporterOutput option to jshint.\\n * 2014-03-12   v0.9.0   Replace deprecated grunt.util._.clone with Object.create() Replace deprecated grunt.util.hooker with hooker lib Enhancing the readability of the output. Reporter output is relative to the output file. Pass jshint options to the external reporter.\\n * 2013-12-25   v0.8.0   Update to jshint 2.4.0.\\n * 2013-11-16   v0.7.2   Only print file name once per error.\\n * 2013-10-31   v0.7.1   Ability to set jshintrc option to true to use jshint's native ability for finding .jshintrc files relative to the linted files.\\n * 2013-10-23   v0.7.0   Update to jshint 2.3.0.\\n * 2013-10-23   v0.6.5   Fix output when maxerr is low.\\n * 2013-08-29   v0.6.4   jshintrc now loaded by jshint allowing comments.\\n * 2013-08-15   v0.6.3   Fix module location for jshint 2.1.10.\\n * 2013-07-29   v0.6.2   Update to jshint 2.1.7.\\n * 2013-07-27   v0.6.1   Peg jshint to 2.1.4 until breaking changes in 2.1.5 are fixed.\\n * 2013-06-02   v0.6.0   Dont always succeed the task when using a custom reporter. Bump jshint to 2.1.3.\\n * 2013-05-22   v0.5.4   Fix default reporter to show offending file.\\n * 2013-05-19   v0.5.3   Performance: Execute the reporter once rather than per file.\\n * 2013-05-18   v0.5.2   Fix printing too many erroneous ignored file errors.\\n * 2013-05-17   v0.5.1   Fix for when only 1 file is lint free.\\n * 2013-05-17   v0.5.0   Bump to jshint 2.0. Add support for .jshintignore files and ignores option Add support for extensions option. Add support for custom reporters and output report to a file.\\n * 2013-04-08   v0.4.3   Fix evaluation of predef option when it's an object.\\n * 2013-04-08   v0.4.2   Avoid wiping force option when jshintrc is used.\\n * 2013-04-06   v0.4.1   Fix to allow object type for deprecated predef.\\n * 2013-04-04   v0.4.0   Revert task level options to override jshintrc files.\\n * 2013-03-13   v0.3.0   Bump to JSHint 1.1.0. Add force option to report JSHint errors but not fail the task. Add error/warning code to message. Allow task level options to override jshintrc file.\\n * 2013-02-26   v0.2.0   Bump to JSHint 1.0\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching to this.filesSrc api.\\n * 2012-10-18   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com/)\\n\\n*This file was generated on Wed Apr 02 2014 09:05:43.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-uglify/package.json:\n   51:   \"readme\": \"# grunt-contrib-uglify v0.4.1 [![Build Status: Linux](https://travis-ci.org/gruntjs/grunt-contrib-uglify.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-uglify)\\n\\n> Minify files with UglifyJS.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-uglify --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-uglify');\\n```\\n\\n\\n\\n\\n## Uglify task\\n_Run this task with the `grunt uglify` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Migrating from 2.x to 3.x\\n\\nVersion `3.x` introduced changes to configuring source maps. Accordingly, if you don't use the source map options you should be able to upgrade seamlessly. If you do use source maps, see below.\\n\\n#### Removed options\\n\\n`sourceMapRoot` - The location of your sources is now calculated for you when `sourceMap` is set to `true`  \\n`sourceMapPrefix` - No longer necessary for the above reason  \\n`sourceMappingURL` - Once again, this is calculated automatically\\n\\n#### Changed options\\n\\n`sourceMap` - Only accepts a `Boolean` value. Generates a map with a default name for you  \\n\\n#### New options\\n\\n`sourceMapName` - Accepts a string or function to change the location or name of your map\\n`sourceMapIncludeSources` - Embed the content of your source files directly into the map\\n\\n### Options\\n\\nThis task primarily delegates to [UglifyJS2][], so please consider the [UglifyJS documentation][] as required reading for advanced configuration.\\n\\n[UglifyJS2]: https://github.com/mishoo/UglifyJS2\\n[UglifyJS documentation]: http://lisperator.net/uglifyjs/\\n\\n#### mangle\\nType: `Boolean` `Object`  \\nDefault: `{}`\\n\\nTurn on or off mangling with default options. If an `Object` is specified, it is passed directly to `ast.mangle_names()` *and* `ast.compute_char_frequency()` (mimicking command line behavior).\\n\\n#### compress\\nType: `Boolean` `Object`  \\nDefault: `{}`\\n\\nTurn on or off source compression with default options. If an `Object` is specified, it is passed as options to `UglifyJS.Compressor()`.\\n\\n#### beautify\\nType: `Boolean` `Object`  \\nDefault: `false`\\n\\nTurns on beautification of the generated source code. An `Object` will be merged and passed with the options sent to `UglifyJS.OutputStream()`\\n\\n#### report\\nChoices: `'min'`, `'gzip'`  \\nDefault: `'min'`\\n\\nEither report only minification result or report minification and gzip results.\\nThis is useful to see exactly how well clean-css is performing but using `'gzip'` will make the task take 5-10x longer to complete. [Example output](https://github.com/sindresorhus/maxmin#readme).\\n\\n#### sourceMap\\nType: `Boolean`  \\nDefault: `false`\\n\\nIf `true`, a source map file will be generated in the same directory as the `dest` file. By default it will have the same basename as the `dest` file, but with a `.map` extension.\\n\\n#### sourceMapName\\nType: `String`  `Function`  \\nDefault: `undefined`\\n\\nTo customize the name or location of the generated source map, pass a string to indicate where to write the source map to. If a function is provided, the uglify destination is passed as the argument and the return value will be used as the file name.\\n\\n#### sourceMapIn\\nType: `String`  `Function`  \\nDefault: `undefined`\\n\\nThe location of an input source map from an earlier compilation, e.g. from CoffeeScript. If a function is provided, the\\nuglify source is passed as the argument and the return value will be used as the sourceMap name. This only makes sense\\nwhen there's one source file.\\n\\n#### sourceMapIncludeSources\\nType: `Boolean`\\nDefault: `false`\\n\\nPass this flag if you want to include the content of source files in the source map as sourcesContent property.\\n\\n###### enclose\\nType: `Object`  \\nDefault: `undefined`\\n\\nWrap all of the code in a closure with a configurable arguments/parameters list.\\nEach key-value pair in the `enclose` object is effectively an argument-parameter pair.\\n\\n#### wrap\\nType: `String`  \\nDefault: `undefined`\\n\\nWrap all of the code in a closure, an easy way to make sure nothing is leaking.\\nFor variables that need to be public `exports` and `global` variables are made available.\\nThe value of wrap is the global variable exports will be available as.\\n\\n#### exportAll\\nType: `Boolean`  \\nDefault: `false`\\n\\nWhen using `wrap` this will make all global functions and variables available via the export variable.\\n\\n#### preserveComments\\nType: `Boolean` `String` `Function`  \\nDefault: `undefined`  \\nOptions: `false` `'all'` `'some'`\\n\\nTurn on preservation of comments.\\n\\n- `false` will strip all comments\\n- `'all'` will preserve all comments in code blocks that have not been squashed or dropped\\n- `'some'` will preserve all comments that start with a bang (`!`) or include a closure compiler style directive (`@preserve` `@license` `@cc_on`)\\n- `Function` specify your own comment preservation function. You will be passed the current node and the current comment and are expected to return either `true` or `false`\\n\\n#### banner\\nType: `String`  \\nDefault: empty string\\n\\nThis string will be prepended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\\n\\n#### footer\\nType: `String`  \\nDefault: empty string\\n\\nThis string will be appended to the minified output.  Template strings (e.g. `<%= config.value %>` will be expanded automatically.\\n\\n### Usage examples\\n\\n#### Basic compression\\n\\nThis configuration will compress and mangle the input files using the default options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input1.js', 'src/input2.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### No mangling\\n\\nSpecify `mangle: false` to prevent changes to your variable and function names.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      mangle: false\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Reserved identifiers\\n\\nYou can specify identifiers to leave untouched with an `except` array in the `mangle` options.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      mangle: {\\n        except: ['jQuery', 'Backbone']\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Source maps\\n\\nGenerate a source map by setting the `sourceMap` option to `true`. The generated\\nsource map will be in the same directory as the destination file. Its name will be the\\nbasename of the destination file with a `.map` extension. Override these\\ndefaults with the `sourceMapName` attribute.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        sourceMap: true,\\n        sourceMapName: 'path/to/sourcemap.map'\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Advanced source maps\\n\\nSet the `sourceMapIncludeSources` option to `true` to embed your sources directly into the map. To include\\na source map from a previous compilation pass it as the value of the `sourceMapIn` option.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        sourceMap: true,\\n        sourceMapIncludeSources: true,\\n        sourceMapIn: 'example/coffeescript-sourcemap.js', // input sourcemap from a previous compilation\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js'],\\n      },\\n    },\\n  },\\n});\\n```\\n\\nRefer to the [UglifyJS SourceMap Documentation](http://lisperator.net/uglifyjs/codegen#source-map) for more information.\\n\\n\\n#### Discard console.* functions\\n\\nSpecify `drop_console: true` as part of the `compress` options to discard calls to `console.*` functions.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      compress: {\\n        drop_console: true\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Beautify\\n\\nSpecify `beautify: true` to beautify your code for debugging/troubleshooting purposes.\\nPass an object to manually configure any other output options passed directly to `UglifyJS.OutputStream()`.\\n\\nSee [UglifyJS Codegen documentation](http://lisperator.net/uglifyjs/codegen) for more information.\\n\\n_Note that manual configuration will require you to explicitly set `beautify: true` if you want traditional, beautified output._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      options: {\\n        beautify: true\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    },\\n    my_advanced_target: {\\n      options: {\\n        beautify: {\\n          width: 80,\\n          beautify: true\\n        }\\n      },\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Banner comments\\n\\nIn this example, running `grunt uglify:my_target` will prepend a banner created by interpolating the `banner` template string with the config object. Here, those properties are the values imported from the `package.json` file (which are available via the `pkg` config property) plus today's date.\\n\\n_Note: you don't have to use an external JSON file. It's also valid to create the `pkg` object inline in the config. That being said, if you already have a JSON file, you might as well reference it._\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  pkg: grunt.file.readJSON('package.json'),\\n  uglify: {\\n    options: {\\n      banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +\\n        '<%= grunt.template.today(\\\"yyyy-mm-dd\\\") %> */'\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n\\n#### Conditional compilation\\n\\nYou can also enable UglifyJS conditional compilation. This is commonly used to remove debug code blocks for production builds.\\n\\nSee [UglifyJS global definitions documentation](http://lisperator.net/uglifyjs/compress#global-defs) for more information.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    options: {\\n      compress: {\\n        global_defs: {\\n          \\\"DEBUG\\\": false\\n        },\\n        dead_code: true\\n      }\\n    },\\n    my_target: {\\n      files: {\\n        'dest/output.min.js': ['src/input.js']\\n      }\\n    }\\n  }\\n});\\n```\\n#### Compiling all files in a folder dynamically\\n\\nThis configuration will compress and mangle the files dynamically.\\n\\n```js\\n// Project configuration.\\ngrunt.initConfig({\\n  uglify: {\\n    my_target: {\\n      files: [{\\n          expand: true,\\n          cwd: 'src/js',\\n          src: '**/*.js',\\n          dest: 'dest/js'\\n      }]\\n    }\\n  }\\n});\\n```\\n\\n\\n## Release History\\n\\n * 2014-07-25   v0.4.1   fixes npm 2 peerDep issues.\\n * 2014-03-01   v0.4.0   remove grunt-lib-contrib dependency and add more colors\\n * 2014-02-27   v0.3.3   remove unnecessary calls to `grunt.template.process`\\n * 2014-01-22   v0.3.2   fix handling of `sourceMapIncludeSources` option.\\n * 2014-01-20   v0.3.1   fix relative path issue in sourcemaps\\n * 2014-01-16   v0.3.0   refactor sourcemap support\\n * 2013-11-09   v0.2.7   prepending banner if sourceMap option not set, addresses\\n * 2013-11-08   v0.2.6   merged 45, 53, 85 (105 by way of duping 53) Added support for banners in uglified files with sourcemaps Updated docs\\n * 2013-10-28   v0.2.5   Added warning for banners when using sourcemaps\\n * 2013-09-02   v0.2.4   updated sourcemap format via /83\\n * 2013-06-10   v0.2.3   added footer option\\n * 2013-05-31   v0.2.2   Reverted /56 due to /58 until [chrome/239660](https://code.google.com/p/chromium/issues/detail?id=239660&q=sourcemappingurl&colspec=ID%20Pri%20M%20Iteration%20ReleaseBlock%20Cr%20Status%20Owner%20Summary%20OS%20Modified) [firefox/870361](https://bugzilla.mozilla.org/show_bug.cgi?id=870361) drop\\n * 2013-05-22   v0.2.1   Bumped uglify to ~2.3.5 /55 /40 Changed sourcemappingUrl syntax /56 Disabled sorting of names for consistent mangling /44 Updated docs for sourceMapRoot /47 /25\\n * 2013-03-14   v0.2.0   No longer report gzip results by default. Support `report` option.\\n * 2013-01-30   v0.1.2   Added better error reporting Support for dynamic names of multiple sourcemaps\\n * 2013-02-15   v0.1.1   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.1.1rc6   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.1.1rc5   Updating to work with grunt v0.4.0rc5. Switching back to this.files api.\\n * 2012-11-28   v0.1.0   Work in progress, not yet officially released.\\n\\n---\\n\\nTask submitted by [\\\"Cowboy\\\" Ben Alman](http://benalman.com)\\n\\n*This file was generated on Fri Jul 25 2014 12:04:58.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-uglify/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-uglify');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/gaze/node_modules/globule/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/package.json:\n   44:   \"readme\": \"This is a fork of tiny-lr. The maintainer of tiny-lr appears to be on a hiatus and this fork takes care of lingering issues until the maintainer of tiny-lr (hopefully) returns.\\n\\n**Changes made:**\\n\\n* Quieter, removes `console.log`s\\n* Use WSS when livereload.js is on HTTPS\\n* Normalize windows paths in livereload.js\\n\\n---\\n\\ntiny-lr\\n-------\\n\\nThis script manages a tiny [LiveReload](http://livereload.com/) server\\nimplementation you can spawn in the background.\\n\\nIt exposes:\\n\\n- a background-friendly bin wrapper (thanks to\\n  [@FGRibreau](https://github.com/FGRibreau) [pid.js\\n  gist](https://gist.github.com/1846952))\\n\\n- [Grunt tasks](https://github.com/mklabs/tiny-lr#using-grunt) to start the server and trigger reload notification. Every task\\n  name is prefixed by `tinylr-`.\\n\\n- [Generic targets](https://github.com/mklabs/tiny-lr#using-make) to include in\\n  your Makefile (`include node_modules/tiny-lr/tasks/tiny-lr.mk`)\\n\\nIt doesn't have any watch ability, it must be done at the build process or\\napplication level.\\n\\nInstead, it exposes a very simple API to notify the server that some\\nchanges have been made, that is then broadcasted to every livereload client\\nconnected.\\n\\n    # notify a single change\\n    curl http://localhost:35729/changed?files=style.css\\n\\n    # notify using a longer path\\n    curl http://localhost:35729/changed?files=js/app.js\\n\\n    # notify multiple changes, comma or space delimited\\n    curl http://localhost:35729/changed?files=index.html,style.css,docs/docco.css\\n\\nOr you can bulk the information into a POST request, with body as a JSON array of files.\\n\\n    curl -X POST http://localhost:35729/changed -d '{ \\\"files\\\": [\\\"style.css\\\", \\\"app.js\\\"] }'\\n\\nAs for the livereload client, you need to install the browser extension:\\nhttp://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-\\n(**note**: you need to listen on port 35729 to be able to use with your\\nbrower extension)\\n\\nor add the livereload script tag manually:\\nhttp://feedback.livereload.com/knowledgebase/articles/86180-how-do-i-add-the-script-tag-manually-\\n(and here you can choose whatever port you want)\\n\\n## Integration\\n\\nThis package exposes a `bin` you can decide to install globally, but it's not recommended.\\n\\n    tiny-lr --help\\n\\n    Usage: tiny-lr [options]\\n\\n    Options:\\n      -h, --help        - Show help usage\\n      -v, --version     - Show package version\\n      -p, --port        - Port to listen on (default: 35729)\\n      --pid             - Path to the generated PID file (default: ./tiny-lr.pid)\\n\\n\\nThe best way to integrate the runner in your workflow is to add it as a `reload`\\nstep within your build tool. This build tool can then use the internal binary\\nlinked by npm in `node_modules/.bin/tiny-lr` to not rely on global installs (or\\nuse the server programmtically).\\n\\nYou can start the server using the binary provided, or use your own start script.\\n\\n```js\\nvar tinylr = require('tiny-lr');\\n\\n// standard LiveReload port\\nvar port = 35729;\\n\\n// tinylr(opts) => new tinylr.Server(opts);\\ntinylr().listen(port, function() {\\n  if(err) {\\n    // deal with err\\n    return;\\n  }\\n\\n  console.log('... Listening on %s (pid: %s) ...', port);\\n})\\n```\\n\\nYou can define your own route and listen for specific request:\\n\\n```js\\nvar server = tinylr();\\n\\nserver.on('GET /myplace', function(req, res) {\\n  res.write('Mine');\\n  res.end();\\n})\\n```\\n\\nAnd stop the server manually:\\n\\n```js\\nserver.close();\\n```\\n\\nThis will close any websocket connection established and emit a close event.\\n\\n### Middleware\\n\\nTo use as a connect / express middleware, tiny-lr needs query /\\nbodyParse middlewares prior in the stack.\\n\\nAny handled requests ends at the tinylr level, not found and errors are\\nnexted to the rest of the stack.\\n\\n```js\\n// This binds both express app and tinylr on the same port\\nvar app = express();\\napp.use(express.query())\\n  .use(express.bodyParser())\\n  .use(tinylr.middleware({ app: app }))\\n  .use(express.static(path.resolve('./')))\\n  .use(express.directory(path.resolve('./')))\\n  .listen(35729, function() {\\n    console.log('Listening on %d', 35729);\\n  })\\n```\\n\\nThe port you listen on is important, and tinylr should **always** listen on\\nthe LiveReload standard one: `35729`. Otherwise, you won't be able to rely\\non the browser extensions, though you can still use the manual snippet\\napproach.\\n\\nYou can also start two different servers, one on your app port, the\\nother listening on the LiveReload port. Check the\\n`examples/express/server.js` file to see how.\\n\\n### Using grunt\\n\\nThis package exposes a `tasks/` directory, that you can use within your Gruntfile with:\\n\\n```js\\ngrunt.loadNpmTasks('tiny-lr');\\n```\\n\\n- tinylr-start    - Starts a new tiny-lr Server, with the provided port.\\n- tinylr-reload   - Sends a reload notification to the previously started server.\\n\\n`tinylr-start` should be used with the `watch` task, probably with an alias\\nthat triggers both `tinylr-start watch` tasks.\\n\\n`tinylr-reload` should be configured as a \\\"watch\\\" task in your Gruntfile.\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    reload: {\\n      files: ['**/*.html', '**/*.js', '**/*.css', '**/*.{png,jpg}'],\\n      tasks: 'tinylr-reload'\\n    }\\n  }\\n});\\n\\ngrunt.registerTask('reload', ['tinylr-start', 'watch']);\\n```\\n\\n\\n### Using make\\n\\nSee `tasks/tiny-lr.mk`.\\n\\nInclude this file into your project Makefile to bring in the following targets:\\n\\n- start \\t\\t\\t\\t\\t\\t- Start the LiveReload server\\n- stop \\t\\t\\t\\t\\t\\t\\t- Stops the LiveReload server\\n- livereload \\t\\t\\t\\t- alias to start\\n- livereload-stop \\t- aias to stop\\n\\nThen define your \\\"empty\\\" targets, and the list of files you want to monitor.\\n\\n```make\\nCSS_DIR = app/styles\\nCSS_FILES = $(shell find $(CSS_DIR) -name '*.css')\\n\\n# include the livereload targets\\ninclude node_modules/tiny-lr/tasks/*.mk\\n\\n$(CSS_DIR): $(CSS_FILES)\\n  @echo CSS files changed: $?\\n    @touch $@\\n  curl -X POST http://localhost:35729/changed -d '{ \\\"files\\\": \\\"$?\\\" }'\\n\\nreload-css: livereload $(CSS_DIR)\\n\\n.PHONY: reload-css\\n```\\n\\nThe pattern is always the same:\\n\\n- define a target for your root directory that triggers a POST request\\n- `touch` the directory to update its mtime\\n- add reload target with `livereload` and the list of files to \\\"watch\\\" as\\n  prerequisites\\n\\nYou can chain multiple \\\"reload\\\" targets in a single one:\\n\\n```make\\nreload: reload-js reload-css reload-img reload-EVERYTHING\\n```\\n\\nCombine this with [visionmedia/watch](https://github.com/visionmedia/watch) and\\nyou have a livereload environment.\\n\\n    watch make reload\\n\\n    # add a -q flag to the watch command to suppress most of the annoying output\\n    watch -q reload\\n\\nThe `-q` flag only outputs STDERR, you can in your Makefile redirect the\\noutput of your commands to `>&2` to see them in `watch -q` mode.\\n\\n\\n## Tests\\n\\n    npm test\\n\\n---\\n\\n\\n# TOC\\n   - [tiny-lr](#tiny-lr)\\n     - [GET /](#tiny-lr-get-)\\n     - [GET /changed](#tiny-lr-get-changed)\\n     - [POST /changed](#tiny-lr-post-changed)\\n     - [GET /livereload.js](#tiny-lr-get-livereloadjs)\\n     - [GET /kill](#tiny-lr-get-kill)\\n<a name=\\\"\\\" />\\n\\n<a name=\\\"tiny-lr\\\" />\\n# tiny-lr\\naccepts ws clients.\\n\\n```js\\nvar url = parse(this.request.url);\\nvar server = this.app;\\n\\nvar ws = this.ws = new WebSocket('ws://' + url.host + '/livereload');\\n\\nws.onopen = function(event) {\\n  var hello = {\\n    command: 'hello',\\n    protocols: ['http://livereload.com/protocols/official-7']\\n  };\\n\\n  ws.send(JSON.stringify(hello));\\n};\\n\\nws.onmessage = function(event) {\\n  assert.deepEqual(event.data, JSON.stringify({\\n    command: 'hello',\\n    protocols: ['http://livereload.com/protocols/official-7'],\\n    serverName: 'tiny-lr'\\n  }));\\n\\n  assert.ok(Object.keys(server.clients).length);\\n  done();\\n};\\n```\\n\\nproperly cleans up established connection on exit.\\n\\n```js\\nvar ws = this.ws;\\n\\nws.onclose = done.bind(null, null);\\n\\nrequest(this.server)\\n  .get('/kill')\\n  .expect(200, function() {\\n    console.log('server shutdown');\\n  });\\n```\\n\\n<a name=\\\"tiny-lr\\\" />\\n# tiny-lr\\n<a name=\\\"tiny-lr-get-\\\" />\\n## GET /\\nrespond with nothing, but respond.\\n\\n```js\\nrequest(this.server)\\n  .get('/')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"tinylr\\\":\\\"Welcome\\\",\\\"version\\\":\\\"0.0.1\\\"}')\\n  .expect(200, done);\\n```\\n\\nunknown route respond with proper 404 and error message.\\n\\n```js\\nrequest(this.server)\\n  .get('/whatev')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"error\\\":\\\"not_found\\\",\\\"reason\\\":\\\"no such route\\\"}')\\n  .expect(404, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-changed\\\" />\\n## GET /changed\\nwith no clients, no files.\\n\\n```js\\nrequest(this.server)\\n  .get('/changed')\\n  .expect('Content-Type', /json/)\\n  .expect(/\\\"clients\\\":\\\\[\\\\]/)\\n  .expect(/\\\"files\\\":\\\\[\\\\]/)\\n  .expect(200, done);\\n```\\n\\nwith no clients, some files.\\n\\n```js\\nrequest(this.server)\\n  .get('/changed?files=gonna.css,test.css,it.css')\\n  .expect('Content-Type', /json/)\\n  .expect('{\\\"clients\\\":[],\\\"files\\\":[\\\"gonna.css\\\",\\\"test.css\\\",\\\"it.css\\\"]}')\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-post-changed\\\" />\\n## POST /changed\\nwith no clients, no files.\\n\\n```js\\nrequest(this.server)\\n  .post('/changed')\\n  .expect('Content-Type', /json/)\\n  .expect(/\\\"clients\\\":\\\\[\\\\]/)\\n  .expect(/\\\"files\\\":\\\\[\\\\]/)\\n  .expect(200, done);\\n```\\n\\nwith no clients, some files.\\n\\n```js\\nvar data = { clients: [], files: ['cat.css', 'sed.css', 'ack.js'] };\\n\\nrequest(this.server)\\n  .post('/changed')\\n  .send({ files: data.files })\\n  .expect('Content-Type', /json/)\\n  .expect(JSON.stringify(data))\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-livereloadjs\\\" />\\n## GET /livereload.js\\nrespond with livereload script.\\n\\n```js\\nrequest(this.server)\\n  .get('/livereload.js')\\n  .expect(/LiveReload/)\\n  .expect(200, done);\\n```\\n\\n<a name=\\\"tiny-lr-get-kill\\\" />\\n## GET /kill\\nshutdown the server.\\n\\n```js\\nvar server = this.server;\\nrequest(server)\\n  .get('/kill')\\n  .expect(200, function(err) {\\n    if(err) return done(err);\\n    assert.ok(!server._handle);\\n    done();\\n  });\\n```\\n\\n---\\n\\n- 2013-01-21 - v0.0.5 - [PR #18](https://github.com/mklabs/tiny-lr/pull/18) / [PR #21](https://github.com/mklabs/tiny-lr/pull/21) - https support / expose reload flags through options\\n- 2013-01-21 - v0.0.4 - middleware support\\n- 2013-01-20 - v0.0.3 - serve livereload from repo (#4)\\n- 2013-01-12 - v0.0.2 - tasks - support for grunt 0.3.x (#1)\\n- 2013-01-05 - v0.0.1 - Initial release\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/readme.md:\n  151: grunt.loadNpmTasks('tiny-lr');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/package.json:\n   53:   \"readme\": \"# grunt-contrib-watch v0.6.1 [![Build Status](https://travis-ci.org/gruntjs/grunt-contrib-watch.png?branch=master)](https://travis-ci.org/gruntjs/grunt-contrib-watch)\\n\\n> Run predefined tasks whenever watched file patterns are added, changed or deleted.\\n\\n\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-contrib-watch --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-contrib-watch');\\n```\\n\\n\\n\\n\\n## Watch task\\n_Run this task with the `grunt watch` command._\\n\\n\\n### Settings\\n\\nThere are a number of options available. Please review the [minimatch options here](https://github.com/isaacs/minimatch#options). As well as some additional options as follows:\\n\\n#### files\\nType: `String|Array`\\n\\nThis defines what file patterns this task will watch. Can be a string or an array of files and/or minimatch patterns.\\n\\n#### tasks\\nType: `String|Array`\\n\\nThis defines which tasks to run when a watched file event occurs.\\n\\n#### options.spawn\\nType: `Boolean`\\nDefault: true\\n\\nWhether to spawn task runs in a child process. Setting this option to `false` speeds up the reaction time of the watch (usually 500ms faster for most) and allows subsequent task runs to share the same context. Not spawning task runs can make the watch more prone to failing so please use as needed.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: ['**/*.js'],\\n    tasks: ['jshint'],\\n    options: {\\n      spawn: false,\\n    },\\n  },\\n},\\n```\\n\\n*For backwards compatibility the option `nospawn` is still available and will do the opposite of `spawn`.*\\n\\n#### options.interrupt\\nType: `Boolean`\\nDefault: false\\n\\nAs files are modified this watch task will spawn tasks in child processes. The default behavior will only spawn a new child process per target when the previous process has finished. Set the `interrupt` option to true to terminate the previous process and spawn a new one upon later changes.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['jshint'],\\n    options: {\\n      interrupt: true,\\n    },\\n  },\\n},\\n```\\n\\n#### options.debounceDelay\\nType: `Integer`\\nDefault: 500\\n\\nHow long to wait before emitting events in succession for the same filepath and status. For example if your `Gruntfile.js` file was `changed`, a `changed` event will only fire again after the given milliseconds.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['jshint'],\\n    options: {\\n      debounceDelay: 250,\\n    },\\n  },\\n},\\n```\\n\\n#### options.interval\\nType: `Integer`\\nDefault: 100\\n\\nThe `interval` is passed to `fs.watchFile`. Since `interval` is only used by `fs.watchFile` and this watcher also uses `fs.watch`; it is recommended to ignore this option. *Default is 100ms*.\\n\\n#### options.event\\nType: `String|Array`\\nDefault: `'all'`\\n\\nSpecify the type watch event that trigger the specified task. This option can be one or many of: `'all'`, `'changed'`, `'added'` and `'deleted'`.\\n\\nExample:\\n```js\\nwatch: {\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: ['generateFileManifest'],\\n    options: {\\n      event: ['added', 'deleted'],\\n    },\\n  },\\n},\\n```\\n\\n#### options.reload\\nType: `Boolean`\\nDefault: `false`\\n\\nBy default, if `Gruntfile.js` is being watched, then changes to it will trigger the watch task to restart, and reload the `Gruntfile.js` changes.\\nWhen `reload` is set to `true`, changes to *any* of the watched files will trigger the watch task to restart.\\nThis is especially useful if your `Gruntfile.js` is dependent on other files.\\n\\n```js\\nwatch: {\\n  configFiles: {\\n    files: [ 'Gruntfile.js', 'config/*.js' ],\\n    options: {\\n      reload: true\\n    }\\n  }\\n}\\n```\\n\\n\\n#### options.forever\\nType: `Boolean`\\nDefault: true\\n\\nThis is *only a task level option* and cannot be configured per target. By default the watch task will duck punch `grunt.fatal` and `grunt.warn` to try and prevent them from exiting the watch process. If you don't want `grunt.fatal` and `grunt.warn` to be overridden set the `forever` option to `false`.\\n\\n#### options.dateFormat\\nType: `Function`\\n\\nThis is *only a task level option* and cannot be configured per target. By default when the watch has finished running tasks it will display the message `Completed in 1.301s at Thu Jul 18 2013 14:58:21 GMT-0700 (PDT) - Waiting...`. You can override this message by supplying your own function:\\n\\n```js\\nwatch: {\\n  options: {\\n    dateFormat: function(time) {\\n      grunt.log.writeln('The watch finished in ' + time + 'ms at' + (new Date()).toString());\\n      grunt.log.writeln('Waiting for more changes...');\\n    },\\n  },\\n  scripts: {\\n    files: '**/*.js',\\n    tasks: 'jshint',\\n  },\\n},\\n```\\n\\n#### options.atBegin\\nType: `Boolean`\\nDefault: false\\n\\nThis option will trigger the run of each specified task at startup of the watcher.\\n\\n#### options.livereload\\nType: `Boolean|Number|Object`\\nDefault: false\\n\\nSet to `true` or set `livereload: 1337` to a port number to enable live reloading. Default and recommended port is `35729`.\\n\\nIf enabled a live reload server will be started with the watch task per target. Then after the indicated tasks have ran, the live reload server will be triggered with the modified files.\\n\\nExample:\\n```js\\nwatch: {\\n  css: {\\n    files: '**/*.sass',\\n    tasks: ['sass'],\\n    options: {\\n      livereload: true,\\n    },\\n  },\\n},\\n```\\n\\nIt's possible to get livereload working over https connections. To do this, pass an object to `livereload` with a `key` and `cert` paths specified.\\n\\nExample:\\n```js\\nwatch: {\\n  css: {\\n    files: '**/*.sass',\\n    tasks: ['sass'],\\n    options: {\\n      livereload: {\\n        port: 9000,\\n        key: grunt.file.read('path/to/ssl.key'),\\n        cert: grunt.file.read('path/to/ssl.crt')\\n        // you can pass in any other options you'd like to the https server, as listed here: http://nodejs.org/api/tls.html#tls_tls_createserver_options_secureconnectionlistener\\n      }\\n    },\\n  },\\n},\\n```\\n\\n\\n#### options.cwd\\nType: `String|Object`\\nDefault: `process.cwd()`\\n\\nAbility to set the current working directory. Defaults to `process.cwd()`. Can either be a string to set the cwd to match files and spawn tasks. Or an object to set each independently. Such as `options: { cwd: { files: 'match/files/from/here', spawn: 'but/spawn/files/from/here' } }`.\\n\\n#### options.livereloadOnError\\nType: `Boolean`  \\nDefault: `true`  \\n\\nOption to prevent the livereload if the executed tasks encountered an error.  If set to `false`, the livereload will only be triggered if all tasks completed successfully.\\n\\n### Examples\\n\\n```js\\n// Simple config to run jshint any time a file is added, changed or deleted\\ngrunt.initConfig({\\n  watch: {\\n    files: ['**/*'],\\n    tasks: ['jshint'],\\n  },\\n});\\n```\\n\\n```js\\n// Advanced config. Run specific tasks when specific files are added, changed or deleted.\\ngrunt.initConfig({\\n  watch: {\\n    gruntfile: {\\n      files: 'Gruntfile.js',\\n      tasks: ['jshint:gruntfile'],\\n    },\\n    src: {\\n      files: ['lib/*.js', 'css/**/*.scss', '!lib/dontwatch.js'],\\n      tasks: ['default'],\\n    },\\n    test: {\\n      files: '<%= jshint.test.src %>',\\n      tasks: ['jshint:test', 'qunit'],\\n    },\\n  },\\n});\\n```\\n\\n#### Using the `watch` event\\nThis task will emit a `watch` event when watched files are modified. This is useful if you would like a simple notification when files are edited or if you're using this task in tandem with another task. Here is a simple example using the `watch` event:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    scripts: {\\n      files: ['lib/*.js'],\\n    },\\n  },\\n});\\ngrunt.event.on('watch', function(action, filepath, target) {\\n  grunt.log.writeln(target + ': ' + filepath + ' has ' + action);\\n});\\n```\\n\\n**The `watch` event is not intended for replacing the standard Grunt API for configuring and running tasks. If you're trying to run tasks from within the `watch` event you're more than likely doing it wrong. Please read [configuring tasks](http://gruntjs.com/configuring-tasks).**\\n\\n##### Compiling Files As Needed\\nA very common request is to only compile files as needed. Here is an example that will only lint changed files with the `jshint` task:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    scripts: {\\n      files: ['lib/*.js'],\\n      tasks: ['jshint'],\\n      options: {\\n        spawn: false,\\n      },\\n    },\\n  },\\n  jshint: {\\n    all: {\\n      src: ['lib/*.js'],\\n    },\\n  },\\n});\\n\\n// on watch events configure jshint:all to only run on changed file\\ngrunt.event.on('watch', function(action, filepath) {\\n  grunt.config('jshint.all.src', filepath);\\n});\\n```\\n\\nIf you need to dynamically modify your config, the `spawn` option must be disabled to keep the watch running under the same context.\\n\\nIf you save multiple files simultaneously you may opt for a more robust method:\\n\\n```js\\nvar changedFiles = Object.create(null);\\nvar onChange = grunt.util._.debounce(function() {\\n  grunt.config('jshint.all.src', Object.keys(changedFiles));\\n  changedFiles = Object.create(null);\\n}, 200);\\ngrunt.event.on('watch', function(action, filepath) {\\n  changedFiles[filepath] = action;\\n  onChange();\\n});\\n```\\n\\n#### Live Reloading\\nLive reloading is built into the watch task. Set the option `livereload` to `true` to enable on the default port `35729` or set to a custom port: `livereload: 1337`.\\n\\nThe simplest way to add live reloading to all your watch targets is by setting `livereload` to `true` at the task level. This will run a single live reload server and trigger the live reload for all your watch targets:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    options: {\\n      livereload: true,\\n    },\\n    css: {\\n      files: ['public/scss/*.scss'],\\n      tasks: ['compass'],\\n    },\\n  },\\n});\\n```\\n\\nYou can also configure live reload for individual watch targets or run multiple live reload servers. Just be sure if you're starting multiple servers they operate on different ports:\\n\\n```js\\ngrunt.initConfig({\\n  watch: {\\n    css: {\\n      files: ['public/scss/*.scss'],\\n      tasks: ['compass'],\\n      options: {\\n        // Start a live reload server on the default port 35729\\n        livereload: true,\\n      },\\n    },\\n    another: {\\n      files: ['lib/*.js'],\\n      tasks: ['anothertask'],\\n      options: {\\n        // Start another live reload server on port 1337\\n        livereload: 1337,\\n      },\\n    },\\n    dont: {\\n      files: ['other/stuff/*'],\\n      tasks: ['dostuff'],\\n    },\\n  },\\n});\\n```\\n\\n##### Enabling Live Reload in Your HTML\\nOnce you've started a live reload server you'll be able to access the live reload script. To enable live reload on your page, add a script tag before your closing `</body>` tag pointing to the `livereload.js` script:\\n\\n```html\\n<script src=\\\"//localhost:35729/livereload.js\\\"></script>\\n```\\n\\nFeel free to add this script to your template situation and toggle with some sort of `dev` flag.\\n\\n##### Using Live Reload with the Browser Extension\\nInstead of adding a script tag to your page, you can live reload your page by installing a browser extension. Please visit [how do I install and use the browser extensions](http://feedback.livereload.com/knowledgebase/articles/86242-how-do-i-install-and-use-the-browser-extensions-) for help installing an extension for your browser.\\n\\nOnce installed please use the default live reload port `35729` and the browser extension will automatically reload your page without needing the `<script>` tag.\\n\\n##### Using Connect Middleware\\nSince live reloading is used when developing, you may want to disable building for production (and are not using the browser extension). One method is to use Connect middleware to inject the script tag into your page. Try the [connect-livereload](https://github.com/intesso/connect-livereload) middleware for injecting the live reload script into your page.\\n\\n##### Rolling Your Own Live Reload\\nLive reloading is made easy by the library [tiny-lr](https://github.com/mklabs/tiny-lr). It is encouraged to read the documentation for `tiny-lr`. If you would like to trigger the live reload server yourself, simply POST files to the URL: `http://localhost:35729/changed`. Or if you rather roll your own live reload implementation use the following example:\\n\\n```js\\n// Create a live reload server instance\\nvar lrserver = require('tiny-lr')();\\n\\n// Listen on port 35729\\nlrserver.listen(35729, function(err) { console.log('LR Server Started'); });\\n\\n// Then later trigger files or POST to localhost:35729/changed\\nlrserver.changed({body:{files:['public/css/changed.css']}});\\n```\\n\\n##### Live Reload with Preprocessors\\nAny time a watched file is edited with the `livereload` option enabled, the file will be sent to the live reload server. Some edited files you may desire to have sent to the live reload server, such as when preprocessing (`sass`, `less`, `coffeescript`, etc). As any file not recognized will reload the entire page as opposed to just the `css` or `javascript`.\\n\\nThe solution is to point a `livereload` watch target to your destination files:\\n\\n```js\\ngrunt.initConfig({\\n  sass: {\\n    dev: {\\n      src: ['src/sass/*.sass'],\\n      dest: 'dest/css/index.css',\\n    },\\n  },\\n  watch: {\\n    sass: {\\n      // We watch and compile sass files as normal but don't live reload here\\n      files: ['src/sass/*.sass'],\\n      tasks: ['sass'],\\n    },\\n    livereload: {\\n      // Here we watch the files the sass task will compile to\\n      // These files are sent to the live reload server after sass compiles to them\\n      options: { livereload: true },\\n      files: ['dest/**/*'],\\n    },\\n  },\\n});\\n```\\n\\n### FAQs\\n\\n#### How do I fix the error `EMFILE: Too many opened files.`?\\nThis is because of your system's max opened file limit. For OSX the default is very low (256). Temporarily increase your limit with `ulimit -n 10480`, the number being the new max limit.\\n\\nIn some versions of OSX the above solution doesn't work. In that case try `launchctl limit maxfiles 10480 10480 ` and restart your terminal. See [here](http://superuser.com/questions/261023/how-to-change-default-ulimit-values-in-mac-os-x-10-6).\\n\\n#### Can I use this with Grunt v0.3?\\n`grunt-contrib-watch@0.1.x` is compatible with Grunt v0.3 but it is highly recommended to upgrade Grunt instead.\\n\\n#### Why is the watch devouring all my memory/cpu?\\nLikely because of an enthusiastic pattern trying to watch thousands of files. Such as `'**/*.js'` but forgetting to exclude the `node_modules` folder with `'!**/node_modules/**'`. Try grouping your files within a subfolder or be more explicit with your file matching pattern.\\n\\nAnother reason if you're watching a large number of files could be the low default `interval`. Try increasing with `options: { interval: 5007 }`. Please see issues [#35](https://github.com/gruntjs/grunt-contrib-watch/issues/145) and [#145](https://github.com/gruntjs/grunt-contrib-watch/issues/145) for more information.\\n\\n#### Why spawn as child processes as a default?\\nThe goal of this watch task is as files are changed, run tasks as if they were triggered by the user themself. Each time a user runs `grunt` a process is spawned and tasks are ran in succession. In an effort to keep the experience consistent and continually produce expected results, this watch task spawns tasks as child processes by default.\\n\\nSandboxing task runs also allows this watch task to run more stable over long periods of time. As well as more efficiently with more complex tasks and file structures.\\n\\nSpawning does cause a performance hit (usually 500ms for most environments). It also cripples tasks that rely on the watch task to share the context with each subsequent run (i.e., reload tasks). If you would like a faster watch task or need to share the context please set the `spawn` option to `false`. Just be aware that with this option enabled, the watch task is more prone to failure.\\n\\n\\n## Release History\\n\\n * 2014-03-19   v0.6.1   Fix for watch targets named \\\"default\\\"\\n * 2014-03-11   v0.6.0   Clear changed files after triggering live reload to ensure they're only triggered once. cwd option now accepts separate settings for files and spawn. Fix to make interrupt work more than once. Enable live reload over HTTPS. Print newline after initial 'Waiting...' Remove deprecated grunt.util libs Add reload option to specify files other than Gruntfile files to reload. Update to gaze@0.5.1 Use fork of tiny-lr (which has quiter operation, support for HTTPS and windows path fixes) Add livereloadOnError, which if set to false will not trigger live reload if there is an error.\\n * 2013-08-25   v0.5.3   Fixed for live reload missing files.\\n * 2013-08-16   v0.5.2   Fixed issue running tasks after gruntfile is reloaded. Ignores empty file paths.\\n * 2013-07-20   v0.5.1   Fixed issue with options resetting.\\n * 2013-07-18   v0.5.0   Added target name to watch event. Added atBegin option to run tasks when watcher starts. Changed nospawn option to spawn (nospawn still available for backwards compatibility). Moved libs/vars into top scope to prevent re-init. Bumped Gaze version to ~0.4. Re-grab task/target options upon each task run. Add dateFormat option to override the date/time output upon completion.\\n * 2013-05-27   v0.4.4   Remove gracefully closing SIGINT. Not needed and causes problems for Windows. Ensure tasks are an array to not conflict with cliArgs.\\n * 2013-05-11   v0.4.3   Only group changed files per target to send correct files to live reload.\\n * 2013-05-09   v0.4.2   Fix for closing watchers.\\n * 2013-05-09   v0.4.1   Removed \\\"beep\\\" notification. Tasks now optional with livereload option. Reverted \\\"run again\\\" with interrupt off to fix infinite recursion issue. Watchers now close more properly on task run.\\n * 2013-05-03   v0.4.0   Option livereload to start live reload servers. Will reload a Gruntfile before running tasks if Gruntfile is modified. Option event to only trigger watch on certain events. Refactor watch task into separate task runs per target. Option forever to override grunt.fatal/warn to help keeping the watch alive with nospawn enabled. Emit a beep upon complete. Logs all watched files with verbose flag set. If interrupt is off, will run the tasks once more if watch triggered during a previous task run. tasks property is optional for use with watch event. Watchers properly closed when exiting.\\n * 2013-02-28   v0.3.1   Fix for top level options.\\n * 2013-02-27   v0.3.0   nospawn option added to run tasks without spawning as child processes. Watch emits 'watch' events upon files being triggered with grunt.event. Completion time in seconds and date/time shown after tasks ran. Negate file patterns fixed. Tasks debounced individually to handle simultaneous triggering for multiple targets. Errors handled better and viewable with --stack cli option. Code complexity reduced making the watch task code easier to read.\\n * 2013-02-15   v0.2.0   First official release for Grunt 0.4.0.\\n * 2013-01-18   v0.2.0rc7   Updating grunt/gruntplugin dependencies to rc6. Changing in-development grunt/gruntplugin dependency versions from tilde version ranges to specific versions.\\n * 2013-01-09   v0.2.0rc5   Updating to work with grunt v0.4.0rc5.\\n * 2012-12-15   v0.2.0a   Conversion to grunt v0.4 conventions. Remove node v0.6 and grunt v0.3 support. Allow watch task to be renamed. Use grunt.util.spawn \\\"grunt\\\" option. Updated to gaze@0.3.0, forceWatchMethod option removed.\\n * 2012-11-01   v0.1.4   Prevent watch from spawning duplicate watch tasks\\n * 2012-10-28   v0.1.3   Better method to spawn the grunt bin Bump gaze to v0.2.0. Better handles some events and new option forceWatchMethod Only support Node.js >= v0.8\\n * 2012-10-17   v0.1.2   Only spawn a process per task one at a time Add interrupt option to cancel previous spawned process Grunt v0.3 compatibility changes\\n * 2012-10-16   v0.1.1   Fallback to global grunt bin if local doesnt exist. Fatal if bin cannot be found Update to gaze 0.1.6\\n * 2012-10-08   v0.1.0   Release watch task Remove spawn from helper Run on Grunt v0.4\\n\\n---\\n\\nTask submitted by [Kyle Robinson Young](http://dontkry.com)\\n\\n*This file was generated on Wed Mar 19 2014 13:09:11.*\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/Gruntfile.js:\n   39:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   40:     grunt.loadNpmTasks('grunt-contrib-watch');\n   41:     grunt.loadNpmTasks('grunt-simple-mocha');\n   42:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/inquirer/Gruntfile.js:\n   23:   grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n   24:   grunt.loadNpmTasks(\"grunt-simple-mocha\");\n   25:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/cdnjs-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/google-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/package.json:\n   35:   \"readme\": \"# grunt-google-cdn [![Build Status](https://travis-ci.org/btford/grunt-google-cdn.png)](https://travis-ci.org/btford/grunt-google-cdn)\\n Grunt task for replacing refs to resources on the [Google CDN](https://developers.google.com/speed/libraries/devguide)\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-google-cdn\\n```\\n\\nInstall CDN data module: `npm install google-cdn-data` (see list of more [data modules](#cdn-data-modules) below)\\n\\nIt manages dependencies using [Bower](http://bower.io/), be sure to have it installed, and a bower.json/component.json in your project.\\n\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-google-cdn');\\n```\\n\\nRun this task with the `grunt cdnify` command.\\n\\n### Configuration\\n\\nWithin your Gruntfile.js file, you need to specify the html directory that contains the html referencing your CDN files.\\n\\n```js\\ncdnify: {\\n  options: {\\n    cdn: require('google-cdn-data')\\n  }\\n  dist: {\\n    html: ['app/*.html']\\n  }\\n}\\n```\\nYou will need a valid bower.json/component.json file in your project, that has dependencies and a version listed accordingly\\n\\n```json\\n{\\n  \\\"name\\\": \\\"myAwesomeApp\\\",\\n  \\\"version\\\": \\\"0.0.1\\\",\\n  \\\"dependencies\\\": {\\n    \\\"rsvp\\\": \\\"*\\\",\\n    \\\"carve\\\": \\\">=0.0.1\\\",\\n    \\\"es5-shim\\\": \\\"~2.0.8\\\",\\n    \\\"optimist\\\" :  \\\"0.2.x\\\"\\n  }\\n```\\n\\nIf any updates are found, it will go through the files you specified, updating any references to those scripts.\\n\\n\\n### Options\\n\\n- `cdn`: defaults to `require('google-cdn-data')`. CDN you want to use. Object of the following format:\\n\\n  ```javascript\\n  {\\n    jquery: {\\n      versions: ['2.0.3', '2.0.2', '2.0.1', '2.0.0'],\\n      url: function (version) {\\n        return '//my.own.cdn/libs/jquery/' + version + '/jquery.min.js';\\n      }\\n    }\\n  }\\n  ```\\nFor options consult the [google-cdn docs](https://github.com/passy/google-cdn#api).\\n  \\n## CDN data modules\\n\\n- [google-cdn-data](https://github.com/shahata/google-cdn-data)\\n- [cdnjs-cdn-data](https://github.com/shahata/cdnjs-cdn-data)\\n- [jsdelivr-cdn-data](https://github.com/shahata/jsdelivr-cdn-data)\\n\\n## Release History\\n\\n * 2013-04-24   v0.1.4   removed the extra s in component.json\\n * 2013-04-22   v0.1.3   Made 'components.json' configurable via bowerrc, added unstable AngularJS and jQuery 2.0.0\\n * 2013-04-07   v0.1.2   update available AngularJS versions, add .jshintrc\\n * 2013-02-24   v0.1.0   add support for versions, hositing to avoid conflicts with usemin\\n * 2013-02-18   v0.0.1   Initial Commit\\n\\n---\\n\\n## License\\nBSD\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/README.md:\n   21: grunt.loadNpmTasks('grunt-google-cdn');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n    5:   grunt.loadNpmTasks('grunt-contrib-watch');\n    6:   grunt.loadNpmTasks('grunt-conventional-changelog');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/package.json:\n   45:   \"readme\": \"# grunt-karma [![Build Status](https://travis-ci.org/karma-runner/grunt-karma.png?branch=master)](https://travis-ci.org/karma-runner/grunt-karma)\\n\\n> Grunt plugin for [Karma](https://github.com/karma-runner/karma)\\n\\nThis current version `0.8.0` uses `karma@0.12.x`. For using older versions see the\\nold releases of grunt-karma.\\n\\n## Getting Started\\nFrom the same directory as your project's Gruntfile and package.json, install\\nthis plugin with the following command:\\n\\n```bash\\n$ npm install grunt-karma --save-dev\\n```\\n\\nOnce that's done, add this line to your project's Gruntfile:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-karma');\\n```\\n\\n## Config\\nInside your `Gruntfile.js` file, add a section named `karma`, containing\\nany number of configurations for running karma. You can either put your\\nconfig in a [karma config file] or leave it all in your Gruntfile (recommended).\\n\\n### Here's an example that points to the config file:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js'\\n  }\\n}\\n```\\n\\n### Here's an example that puts the config in the Gruntfile:\\n\\n```js\\nkarma: {\\n  unit: {\\n    options: {\\n      files: ['test/**/*.js']\\n    }\\n  }\\n}\\n```\\n\\nYou can override any of the config file's settings by putting them\\ndirectly in the Gruntfile:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    runnerPort: 9999,\\n    singleRun: true,\\n    browsers: ['PhantomJS'],\\n    logLevel: 'ERROR'\\n  }\\n}\\n```\\n\\nTo change the `logLevel` in the grunt config file instead of the karma config, use one of the following strings:\\n`OFF`, `ERROR`, `WARN`, `INFO`, `DEBUG`\\n\\n### Config with Grunt Template Strings in `files`\\n\\nWhen using template strings in the `files` option, the results will flattened. Therefore, if you include a variable that includes an array, the array will be flattened before being passed to Karma.\\n\\nExample:\\n\\n```js\\nmeta: {\\n  jsFiles: ['jquery.js','angular.js']\\n},\\nkarma: {\\n  options: {\\n    files: ['<%= meta.jsFiles %>','angular-mocks.js','**/*-spec.js']\\n  }\\n}\\n```\\n\\n## Sharing Configs\\nIf you have multiple targets, it may be helpful to share common\\nconfiguration settings between them. Grunt-karma supports this by\\nusing the `options` property:\\n\\n```js\\nkarma: {\\n  options: {\\n    configFile: 'karma.conf.js',\\n    runnerPort: 9999,\\n    browsers: ['Chrome', 'Firefox']\\n  },\\n  continuous: {\\n    singleRun: true,\\n    browsers: ['PhantomJS']\\n  },\\n  dev: {\\n    reporters: 'dots'\\n  }\\n}\\n```\\n\\nIn this example the `continuous` and `dev` targets will both use\\nthe `configFile` and `runnerPort` specified in the `options`. But\\nthe `continuous` target will override the browser setting to use\\nPhantomJS, and also run as a singleRun. The `dev` target will simply\\nchange the reporter to dots.\\n\\n## Running tests\\nThere are three ways to run your tests with karma:\\n\\n### Karma Server with Auto Runs on File Change\\nSetting the `autoWatch` option to true will instruct karma to start\\na server and watch for changes to files, running tests automatically:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    autoWatch: true\\n  }\\n}\\n```\\nNow run `$ grunt karma`\\n\\n### Karma Server with Grunt Watch\\nMany Grunt projects watch several types of files using [grunt-contrib-watch].\\nConfig karma like usual (without the autoWatch option), and add\\n`background:true`:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'karma.conf.js',\\n    background: true\\n  }\\n}\\n```\\nThe `background` option will tell grunt to run karma in a child process\\nso it doesn't block subsequent grunt tasks.\\n\\nConfig your `watch` task to run the karma task with the `:run` flag. For example:\\n\\n```js\\nwatch: {\\n  //run unit tests with karma (server needs to be already running)\\n  karma: {\\n    files: ['app/js/**/*.js', 'test/browser/**/*.js'],\\n    tasks: ['karma:unit:run'] //NOTE the :run flag\\n  }\\n},\\n```\\n\\nIn your terminal window run `$ grunt karma:unit:start watch`, which starts the\\nkarma server and the watch task. Now when grunt watch detects a change to\\none of your watched files, it will run the tests specified in the `unit`\\ntarget using the already running karma server. This is the preferred method\\nfor development.\\n\\n### Single Run\\nKeeping a browser window & karma server running during development is\\nproductive, but not a good solution for build processes. For that reason karma\\nprovides a \\\"continuous integration\\\" mode, which will launch the specified\\nbrowser(s), run the tests, and close the browser(s). It also supports running\\ntests in [PhantomJS], a headless webkit browser which is great for running tests as part of a build. To run tests in continous integration mode just add the `singleRun` option:\\n\\n```js\\nkarma: {\\n  unit: {\\n    configFile: 'config/karma.conf.js',\\n  },\\n  //continuous integration mode: run tests once in PhantomJS browser.\\n  continuous: {\\n    configFile: 'config/karma.conf.js',\\n    singleRun: true,\\n    browsers: ['PhantomJS']\\n  },\\n}\\n```\\n\\nThe build would then run `grunt karma:continuous` to start PhantomJS,\\nrun tests, and close PhantomJS.\\n\\n## Using additional client.args\\nYou can pass arbitrary `client.args` through the commandline like this:\\n\\n```bash\\n$ grunt karma:dev watch --grep=mypattern\\n```\\n\\n\\n## License\\nMIT License\\n\\n[karma-config-file]: http://karma-runner.github.com/0.8/config/configuration-file.html\\n[grunt-contrib-watch]: https://github.com/gruntjs/grunt-contrib-watch\\n[PhantomJS]: http://phantomjs.org/\\n[karma-mocha]: https://github.com/karma-runner/karma-mocha\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/README.md:\n   19: grunt.loadNpmTasks('grunt-karma');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/gruntfile.js:\n   68:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   69:   grunt.loadNpmTasks('grunt-contrib-watch');\n   70:   grunt.loadNpmTasks('grunt-cafe-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/package.json:\n   56:   \"readme\": \"# grunt-newer\\n\\nConfigure [Grunt](http://gruntjs.com/) tasks to run with newer files only.\\n\\n**Synopsis:**  The [`newer`](#newer) task will configure another task to run with `src` files that are *a)* newer than the `dest` files or *b)* newer than the last successful run (if there are no `dest` files).  See below for examples and more detail.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.1`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [`gruntfile.js`](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-newer --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your `gruntfile.js` with this line:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-newer');\\n```\\n\\n<a name=\\\"newer\\\"></a>\\n## The `newer` task\\n\\nThe `newer` task doesn't require any special configuration.  To use it, just add `newer` as the first argument when running other tasks.\\n\\nFor example, if you want to use [Uglify](https://npmjs.org/package/grunt-contrib-uglify) to minify your source files only when one or more of them is newer than the previously minified destination file, configure the `uglify` task as you would otherwise, and then register a task with `newer` at the front.\\n\\n```js\\n  grunt.initConfig({\\n    uglify: {\\n      all: {\\n        files: {\\n          'dest/app.min.js': ['src/**/*.js']\\n        }\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-uglify');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n  grunt.registerTask('minify', ['newer:uglify:all']);\\n```\\n\\nWith the above configuration the `minify` task will only run `uglify` if one or more of the `src/**/*.js` files is newer than the `dest/app.min.js` file.\\n\\nThe above example shows how the `newer` task works with other tasks that specify both `src` and `dest` files.  In this case, the modification time of `src` files are compared to modification times of corresponding `dest` files to determine which `src` files to include.\\n\\nThe `newer` task can also be used with tasks that don't generate any `dest` files.  In this case, `newer` will only use files that are newer than the last successful run of the same task.\\n\\nFor example, if you want to run [JSHint](https://npmjs.org/package/grunt-contrib-jshint) on only those files that have been modified since the last successful run, configure the `jshint` task as you would otherwise, and then register a task with `newer` at the front.\\n\\n```js\\n  grunt.initConfig({\\n    jshint: {\\n      options: {\\n        jshintrc: '.jshintrc'\\n      },\\n      all: {\\n        src: 'src/**/*.js'\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-jshint');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n  grunt.registerTask('lint', ['newer:jshint:all']);\\n```\\n\\nWith the above configuration, running `grunt lint` will configure your `jshint:all` task to use only files in the `jshint.all.src` config that have been modified since the last successful run of the same task.  The first time the `jshint:newer:all` task runs, all source files will be used.  After that, only the files you modify will be run through the linter.\\n\\nAnother example is to use the `newer` task in conjunction with `watch`.  For example, you might want to set up a watch to run a linter on all your `.js` files whenever one changes.  With the `newer` task, instead of re-running the linter on all files, you only need to run it on the files that changed.\\n\\n```js\\n  var srcFiles = 'src/**/*.js';\\n\\n  grunt.initConfig({\\n    jshint: {\\n      all: {\\n        src: srcFiles\\n      }\\n    },\\n    watch: {\\n      all: {\\n        files: srcFiles,\\n        tasks: ['newer:jshint:all']\\n      }\\n    }\\n  });\\n\\n  grunt.loadNpmTasks('grunt-contrib-jshint');\\n  grunt.loadNpmTasks('grunt-contrib-watch');\\n  grunt.loadNpmTasks('grunt-newer');\\n\\n```\\n\\nWith the above configuration, running `grunt jshint watch` will first lint all your files with `jshint` and then set up a watch.  Whenever one of your source files changes, the `jshint` task will be run on just the modified file.\\n\\n*Note:* If your task is configured with `dest` files, `newer` will run your task with only those files that are newer than the corresponding `dest` files.\\n\\n## Options for the `newer` task\\n\\nIn most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\\n\\n#### <a id=\\\"optionscache\\\">options.cache</a>\\n * type: `string`\\n * default: `node_modules/grunt-newer/.cache`\\n\\nTo keep track of timestamps for successful runs, the `newer` task writes to a cache directory.  The default is to use a `.cache` directory within the `grunt-newer` installation directory.  If you need timestamp info to be written to a different location, configure the task with a `cache` option.\\n\\nExample use of the `cache` option:\\n\\n```js\\n  grunt.initConfig({\\n    newer: {\\n      options: {\\n        cache: 'path/to/custom/cache/directory'\\n      }\\n    }\\n  });\\n```\\n\\n#### <a id=\\\"optionsoverride\\\">options.override</a>\\n * type: `function(Object, function(boolean))`\\n * default: `null`\\n\\nThe `newer` task determines which files to include for a specific task based on file modification time.  There are occassions where you may want to include a file even if it has not been modified.  For example, if a LESS file imports some other files, you will want to include it if any of the imports have been modified.  To support this, you can provide an `override` function that takes two arguments:\\n\\n * **details** - `Object`\\n   * **task** - `string` The currently running task name.\\n   * **target** - `string` The currently running target name.\\n   * **path** - `string` The path to a `src` file that appears to be \\\"older\\\" (not modified since the time below).\\n   * **time** - `Date` The comparison time.  For tasks with `dest` files, this is the modification time of the `dest` file.  For tasks without `dest` files, this is the last successful run time of the same task.\\n * **include** - `function(boolean)` A callback that determines whether this `src` file should be included.  Call with `true` to include or `false` to exclude the file.\\n\\nExample use of the `override` option:\\n\\n```js\\n  grunt.initConfig({\\n    newer: {\\n      options: {\\n        override: function(detail, include) {\\n          if (detail.task === 'less') {\\n            checkForModifiedImports(detail.path, detail.time, include);\\n          } else {\\n            include(false);\\n          }\\n        }\\n      }\\n    }\\n  });\\n```\\n\\n## That's it\\n\\nPlease [submit an issue](https://github.com/tschaub/grunt-newer/issues) if you encounter any trouble.  Contributions or suggestions for improvements welcome!\\n\\n[![Current Status](https://secure.travis-ci.org/tschaub/grunt-newer.png?branch=master)](https://travis-ci.org/tschaub/grunt-newer)\\n\\n## Known limitations\\n\\nThe `newer` task relies on Grunt's convention for specifying [`src`/`dest` mappings](http://gruntjs.com/configuring-tasks#files).  So it should be expected to work with two types of tasks:\\n\\n1) Tasks that specify both `src` and `dest` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the corresponding `dest` file (based on the `mtime` of files).\\n\\n2) Tasks that specify only `src` files.  In this case, the task prefixed by `newer` will be configured to run with `src` files that are newer than the previous successful run of the same task.\\n\\nThe `newer` task will *not* work as a prefix for the following tasks:\\n\\n * [`grunt-rsync`](http://npmjs.org/package/grunt-rsync) - Though this task specifies `src` and `dest` files, the `dest` file is not generated based on `src` files (instead it is a directory).\\n\\n * [`grunt-spritesmith`](https://npmjs.org/package/grunt-spritesmith) - This task uses multiple `src` images to produce `destImg` and `destCSS` files.  Instead use the [`grunt-spritely`](https://npmjs.org/package/grunt-spritely) task configured with `src` and `dest` files.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/README.md:\n   19: grunt.loadNpmTasks('grunt-newer');\n   40:   grunt.loadNpmTasks('grunt-contrib-uglify');\n   41:   grunt.loadNpmTasks('grunt-newer');\n   66:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   67:   grunt.loadNpmTasks('grunt-newer');\n   93:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   94:   grunt.loadNpmTasks('grunt-contrib-watch');\n   95:   grunt.loadNpmTasks('grunt-newer');\n  105: In most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/Gruntfile.js:\n    3:   grunt.loadNpmTasks('grunt-contrib-clean');\n    4:   grunt.loadNpmTasks('grunt-mocha-cli');\n    5:   grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/node_modules/ngmin/node_modules/escodegen/Gruntfile.js:\n   51:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   52:     grunt.loadNpmTasks('grunt-mocha-test');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/package.json:\n   34:   \"readme\": \"#grunt-ngmin\\n\\nGrunt plugin for pre-minifying Angular apps. Learn why this is awesome by reading up on the [ngmin](https://github.com/btford/ngmin) cli tool.\\n\\n## Getting Started\\nThis plugin requires Grunt `~0.4.0`\\n\\nIf you haven't used [Grunt](http://gruntjs.com/) before, be sure to check out the [Getting Started](http://gruntjs.com/getting-started) guide, as it explains how to create a [Gruntfile](http://gruntjs.com/sample-gruntfile) as well as install and use Grunt plugins. Once you're familiar with that process, you may install this plugin with this command:\\n\\n```shell\\nnpm install grunt-ngmin --save-dev\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-ngmin');\\n```\\n\\n## ngmin task\\n_Run this task with the `grunt ngmin` command._\\n\\nTask targets, files and options may be specified according to the grunt [Configuring tasks](http://gruntjs.com/configuring-tasks) guide.\\n\\n### Example\\n\\n```js\\nngmin: {\\n  controllers: {\\n    src: ['test/src/controllers/one.js'],\\n    dest: 'test/generated/controllers/one.js'\\n  },\\n  directives: {\\n    expand: true,\\n    cwd: 'test/src',\\n    src: ['directives/**/*.js'],\\n    dest: 'test/generated'\\n  }\\n},\\n```\\n\\n##Running the Tests\\nRun `grunt test`.\\n\\n## License\\nBSD\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/README.md:\n   17: grunt.loadNpmTasks('grunt-ngmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-svgmin/package.json:\n   50:   \"readme\": \"# grunt-svgmin [![Build Status](https://secure.travis-ci.org/sindresorhus/grunt-svgmin.png?branch=master)](http://travis-ci.org/sindresorhus/grunt-svgmin) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Minify SVG using [SVGO](https://github.com/svg/svgo)\\n\\n*Issues with the output should be reported on the SVGO [issue tracker](https://github.com/svg/svgo/issues).*\\n\\n\\n## Getting Started\\n\\nIf you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide, as it explains how to create a [gruntfile][Getting Started] as well as install and use grunt plugins. Once you're familiar with that process, install this plugin with this command:\\n\\n```sh\\nnpm install --save-dev grunt-svgmin\\n```\\n\\nOnce the plugin has been installed, it may be enabled inside your Gruntfile with this line of JavaScript:\\n\\n```js\\ngrunt.loadNpmTasks('grunt-svgmin');\\n```\\n\\n*Tip: the [load-grunt-tasks](https://github.com/sindresorhus/load-grunt-tasks) module makes it easier to load multiple grunt tasks.*\\n\\n[grunt]: http://gruntjs.com\\n[Getting Started]: https://github.com/gruntjs/grunt/wiki/Getting-started\\n\\n\\n## Documentation\\n\\nSee the [Gruntfile](Gruntfile.js) in this repo for a full example.\\n\\n\\n### Example config (static)\\n\\n```js\\ngrunt.initConfig({\\n\\tsvgmin: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Task\\n\\t\\toptions: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Configuration that will be passed directly to SVGO\\n\\t\\t\\tplugins: [\\n\\t\\t\\t  { removeViewBox: false },\\n\\t\\t\\t  { removeUselessStrokeAndFill: false }\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\tdist: {\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t// Target\\n\\t\\t\\tfiles: {\\t\\t\\t\\t\\t\\t\\t\\t\\t// Dictionary of files\\n\\t\\t\\t\\t'dist/figure.svg': 'app/figure.svg'\\t\\t// 'destination': 'source'\\n\\t\\t\\t}\\n\\t\\t}\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.registerTask('default', ['svgmin']);\\n```\\n\\n### Example config (dynamic)\\n\\n```js\\ngrunt.initConfig({\\n\\tsvgmin: {\\t\\t\\t\\t\\t\\t// Task\\n\\t\\toptions: {\\t\\t\\t\\t\\t// Configuration that will be passed directly to SVGO\\n\\t\\t\\tplugins: [\\n\\t\\t\\t  { removeViewBox: false },\\n\\t\\t\\t  { removeUselessStrokeAndFill: false }\\n\\t\\t\\t]\\n\\t\\t},\\n\\t\\tdist: {\\t\\t\\t\\t\\t\\t// Target\\n\\t\\t\\tfiles: [{\\t\\t\\t\\t// Dictionary of files\\n\\t\\t\\t\\texpand: true,\\t\\t// Enable dynamic expansion.\\n\\t\\t\\t\\tcwd: 'img/src',\\t\\t// Src matches are relative to this path.\\n\\t\\t\\t\\tsrc: ['**/*.svg'],\\t// Actual pattern(s) to match.\\n\\t\\t\\t\\tdest: 'img/',\\t\\t// Destination path prefix.\\n\\t\\t\\t\\text: '.min.svg'\\t\\t// Dest filepaths will have this extension.\\n\\t\\t\\t\\t// ie: optimise img/src/branding/logo.svg and store it in img/branding/logo.min.svg\\n\\t\\t\\t}]\\n\\t\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.registerTask('default', ['svgmin']);\\n```\\n\\n### Available Options/Plugins\\n\\nsvgmin makes use of the standard SVGO plugin architecture. Therefore, to customize SVG optimisation, you can disable/enable any SVGO plugins listed at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins).\\n\\nTo disable plugins with the Gruntfile.js, look for the plugin name at the [SVGO repository](https://github.com/svg/svgo/tree/master/plugins) and copy the plugin name (minus the file extension). Then set its value in the JSON to `false` in comma-separated objects. To exemplify, here is how the plugins section in the example configuration (illustrated above) might be written with some of the standard SVGO plugins disabled:\\n\\n```js\\nplugins: [\\n\\t{ removeViewBox: false }, \\t\\t\\t\\t// don't remove the viewbox atribute from the SVG\\n\\t{ removeUselessStrokeAndFill: false },\\t// don't remove Useless Strokes and Fills\\n\\t{ removeEmptyAttrs: false }\\t\\t\\t\\t// don't remove Empty Attributes from the SVG\\n]\\n```\\n\\nCheck each plugin for `exports.active = [true/false]` to see if the plugin is enabled. Most of the plugins are enabled by default but you may want to prevent a couple, particularly `removeUselessStrokeAndFill` as that may remove small details with subtracted / extruded complex paths.\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-svgmin/readme.md:\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   52: grunt.loadNpmTasks('grunt-svgmin');\n   79: grunt.loadNpmTasks('grunt-svgmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-wiredep/package.json:\n   42:   \"readme\": \"> -\\n# grunt-wiredep\\n*Inject Bower packages into your source code with Grunt.*\\n>\\n> -\\n\\n## What is this?\\n[Grunt](http://gruntjs.com) is great.\\n\\n[Bower](http://bower.io) is great.\\n\\n**And now they work great together.**\\n\\n`grunt-wiredep` is a Grunt plug-in, which finds your components and injects them directly into the HTML file you specify.\\n\\nWhether you're already using Bower and Grunt, or new to both, `grunt-wiredep` will be easy to plug in, as you will see in the steps below.\\n\\n_**do note**: Bower is still a young little birdy, so things are changing rapidly. Authors of Bower components must follow certain conventions and best practices in order for this plug-in to be as accurate as possible. It's not a perfect world out there, so needless to say, some Bower components may not work as well as others._\\n\\n## Getting Started\\n\\n*If you are new to Grunt, you will find a lot of answers to your questions in their [getting started guide](http://gruntjs.com/getting-started).\\n\\nTo install the module:\\n```\\nnpm install --save-dev grunt-wiredep\\n```\\n\\nInclude the task in your Gruntfile:\\n```js\\ngrunt.loadNpmTasks('grunt-wiredep');\\n```\\n\\nCreate a config block within your Gruntfile:\\n```js\\nwiredep: {\\n\\n  target: {\\n\\n    // Point to the files that should be updated when\\n    // you run `grunt wiredep`\\n    src: [\\n      'app/views/**/*.html',   // .html support...\\n      'app/views/**/*.jade',   // .jade support...\\n      'app/styles/main.scss',  // .scss & .sass support...\\n      'app/config.yml'         // and .yml & .yaml support out of the box!\\n    ],\\n\\n    // Optional:\\n    // ---------\\n    cwd: '',\\n    dependencies: true,\\n    devDependencies: false,\\n    exclude: [],\\n    fileTypes: {},\\n    ignorePath: '',\\n    overrides: {}\\n  }\\n}\\n```\\n\\n*See [wiredep's readme](http://github.com/stephenplusplus/wiredep) for more options of customization, such as other file types, regex patterns, exclusions, and more.*\\n\\n\\nFor JavaScript dependencies, pop this in your HTML file:\\n```html\\n<!-- bower:js -->\\n<!-- endbower -->\\n```\\n\\nInstall a Bower component:\\n```\\nbower install jquery --save\\n```\\n\\nCall the Grunt task:\\n```\\ngrunt wiredep\\n```\\n\\nYou're in business!\\n```html\\n<!-- bower:js -->\\n<script src=\\\"bower_components/jquery/jquery.js\\\"></script>\\n<!-- endbower -->\\n```\\n\\n## Behind the Scenes\\nThis plug-in uses [wiredep](https://github.com/stephenplusplus/wiredep), which takes a look at all of the components you have, then determines the best order to inject your scripts in to your HTML file.\\n\\nPutting script tags that aren't managed by `grunt-wiredep` is not advised, as anything between `<!-- bower:js -->` and `<!-- endbower -->` will be overwritten with each command.\\n\\n## Examples\\nA simple sample apple:\\n[website](http://stephenplusplus.github.io/grunt-wiredep) | [github](https://github.com/stephenplusplus/grunt-wiredep/tree/gh-pages)\\n\\n## License\\nCopyright (c) 2014 Stephen Sawchuk\\nLicensed under the MIT license.\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-wiredep/readme.md:\n   31: grunt.loadNpmTasks('grunt-wiredep');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt.js:\n   58: gExpose(task, 'loadNpmTasks');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/cli.js:\n   80:     info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/task.js:\n  380: task.loadNpmTasks = function(name) {\n  398:         task.loadNpmTasks(path.relative(root, filepath));\n  455:   (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/getobject/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-log/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-util/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/jshint-stylish/package.json:\n   41:   \"readme\": \"# jshint-stylish [![Build Status](https://travis-ci.org/sindresorhus/jshint-stylish.svg?branch=master)](https://travis-ci.org/sindresorhus/jshint-stylish)\\n\\n> Stylish reporter for [JSHint](https://github.com/jshint/jshint)\\n\\n![screenshot](screenshot.png)\\n\\nCompared to the default reporter:\\n\\n![default reporter](screenshot-default-formatter.png)\\n\\n\\n## Install\\n\\n```bash\\n$ npm install --save-dev jshint-stylish\\n```\\n\\n\\n## Getting started\\n\\nUse it with:\\n\\n#### JSHint CLI\\n\\n```\\njshint --reporter node_modules/jshint-stylish/stylish.js file.js\\n```\\n\\n#### [gulp-jshint](https://github.com/wearefractal/gulp-jshint)\\n\\n```js\\ngulp.task('default', function () {\\n\\tgulp.src(['file.js'])\\n\\t\\t.pipe(jshint('.jshintrc'))\\n\\t\\t.pipe(jshint.reporter('jshint-stylish'));\\n});\\n```\\n\\n#### [grunt-contrib-jshint](https://github.com/gruntjs/grunt-contrib-jshint)\\n\\n```js\\ngrunt.initConfig({\\n\\tjshint: {\\n\\t\\toptions: {\\n\\t\\t\\treporter: require('jshint-stylish')\\n\\t\\t},\\n\\t\\ttarget: ['file.js']\\n\\t}\\n});\\n\\ngrunt.loadNpmTasks('grunt-contrib-jshint');\\ngrunt.registerTask('default', ['jshint']);\\n```\\n\\n\\n## License\\n\\n[MIT](http://opensource.org/licenses/MIT) © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/jshint-stylish/readme.md:\n   51: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/load-grunt-tasks.js:\n   27: 	multimatch(names, pattern).forEach(grunt.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/package.json:\n   45:   \"readme\": \"# load-grunt-tasks [![Build Status](https://secure.travis-ci.org/sindresorhus/load-grunt-tasks.png?branch=master)](http://travis-ci.org/sindresorhus/load-grunt-tasks) [![Built with Grunt](https://cdn.gruntjs.com/builtwith.png)](http://gruntjs.com/)\\n\\n> Load multiple grunt tasks using globbing patterns\\n\\nUsually you would have to load each task one by one, which is unnecessarily cumbersome.\\n\\nThis module will read the `dependencies`/`devDependencies`/`peerDependencies` in your package.json and load grunt tasks that match the provided patterns.\\n\\n**Note the new argument signature as of 0.2.0.**\\n\\n\\n#### Before\\n\\n```js\\ngrunt.loadNpmTasks('grunt-shell');\\ngrunt.loadNpmTasks('grunt-sass');\\ngrunt.loadNpmTasks('grunt-recess');\\ngrunt.loadNpmTasks('grunt-sizediff');\\ngrunt.loadNpmTasks('grunt-svgmin');\\ngrunt.loadNpmTasks('grunt-styl');\\ngrunt.loadNpmTasks('grunt-php');\\ngrunt.loadNpmTasks('grunt-eslint');\\ngrunt.loadNpmTasks('grunt-concurrent');\\ngrunt.loadNpmTasks('grunt-bower-requirejs');\\n```\\n\\n#### After\\n\\n```js\\nrequire('load-grunt-tasks')(grunt);\\n```\\n\\n\\n## Install\\n\\nInstall with [npm](https://npmjs.org/package/load-grunt-tasks): `npm install --save-dev load-grunt-tasks`\\n\\n\\n## Example config\\n\\n```js\\n// Gruntfile.js\\nmodule.exports = function (grunt) {\\n\\t// load all grunt tasks matching the `grunt-*` pattern\\n\\trequire('load-grunt-tasks')(grunt);\\n\\n\\tgrunt.initConfig({});\\n\\tgrunt.registerTask('default', []);\\n}\\n```\\n\\n\\n## Usage examples\\n\\n### Load all grunt tasks\\n\\n```js\\nrequire('load-grunt-tasks')(grunt);\\n```\\n\\nEquivalent to:\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: 'grunt-*'});\\n```\\n\\n### Load all grunt-contrib tasks\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: 'grunt-contrib-*'});\\n```\\n\\n### Load all grunt-contrib tasks and another non-contrib task\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: ['grunt-contrib-*', 'grunt-shell']});\\n```\\n\\n### Load all grunt-contrib tasks excluding one\\n\\nYou can exclude tasks using the negate `!` globbing pattern:\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {pattern: ['grunt-contrib-*', '!grunt-contrib-coffee']});\\n```\\n\\n### Set custom path to package.json\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {config: '../package'});\\n```\\n\\n### Only load from `devDependencies`\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {scope: 'devDependencies'});\\n```\\n\\n### Only load from `devDependencies` and `dependencies`\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {scope: ['devDependencies', 'dependencies']});\\n```\\n\\n### All options in use\\n\\n```js\\nrequire('load-grunt-tasks')(grunt, {\\n\\tpattern: 'grunt-contrib-*',\\n\\tconfig: '../package.json',\\n\\tscope: 'devDependencies'\\n});\\n```\\n\\n\\n## Options\\n\\n### pattern\\n\\nType: `String|Array`  \\nDefault: `'grunt-*'` ([globbing pattern](https://github.com/isaacs/minimatch))\\n\\n### config\\n\\nType: `String|Object`  \\nDefault: Path to nearest package.json\\n\\n### scope\\n\\nType: `String|Array`  \\nDefault: `['dependencies', 'devDependencies', 'peerDependencies']`\\n\\n\\n## License\\n\\nMIT © [Sindre Sorhus](http://sindresorhus.com)\\n\",\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/readme.md:\n   15: grunt.loadNpmTasks('grunt-shell');\n   16: grunt.loadNpmTasks('grunt-sass');\n   17: grunt.loadNpmTasks('grunt-recess');\n   18: grunt.loadNpmTasks('grunt-sizediff');\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   20: grunt.loadNpmTasks('grunt-styl');\n   21: grunt.loadNpmTasks('grunt-php');\n   22: grunt.loadNpmTasks('grunt-eslint');\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   24: grunt.loadNpmTasks('grunt-bower-requirejs');\n\n173 matches across 80 files\n\n\nSearching 19133 files for \"loadNpmTasks\"\nSearching 19133 files for \"loadNpmTasks\"\n\n/Users/hroussel/Documents/workspace/yodemo2/Gruntfile.js:\n  466:   grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/node_modules/autoprefixer/README.md:\n  349: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/README.md:\n   20: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/Gruntfile.js:\n   39:   grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/README.md:\n   20: grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-concurrent/readme.md:\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   52: grunt.loadNpmTasks('grunt-concurrent');\n   85: grunt.loadNpmTasks('grunt-concurrent');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/Gruntfile.js:\n   44:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   45:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   46:   grunt.loadNpmTasks('grunt-contrib-internal');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-clean');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-coffee/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-coffee');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-compass/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-compass');\n  359: grunt.loadNpmTasks('grunt-contrib-compass');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-concat/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-concat');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-connect/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-connect');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-copy/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-copy');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-cssmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-cssmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/cli/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-imagemin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-imagemin');\n  118: grunt.loadNpmTasks('grunt-contrib-imagemin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/node_modules/jshint/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-uglify/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-uglify');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/gaze/node_modules/globule/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/readme.md:\n  151: grunt.loadNpmTasks('tiny-lr');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/Gruntfile.js:\n   39:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   40:     grunt.loadNpmTasks('grunt-contrib-watch');\n   41:     grunt.loadNpmTasks('grunt-simple-mocha');\n   42:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/inquirer/Gruntfile.js:\n   23:   grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n   24:   grunt.loadNpmTasks(\"grunt-simple-mocha\");\n   25:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/cdnjs-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/google-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/README.md:\n   21: grunt.loadNpmTasks('grunt-google-cdn');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n    5:   grunt.loadNpmTasks('grunt-contrib-watch');\n    6:   grunt.loadNpmTasks('grunt-conventional-changelog');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/README.md:\n   19: grunt.loadNpmTasks('grunt-karma');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/gruntfile.js:\n   68:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   69:   grunt.loadNpmTasks('grunt-contrib-watch');\n   70:   grunt.loadNpmTasks('grunt-cafe-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/README.md:\n   19: grunt.loadNpmTasks('grunt-newer');\n   40:   grunt.loadNpmTasks('grunt-contrib-uglify');\n   41:   grunt.loadNpmTasks('grunt-newer');\n   66:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   67:   grunt.loadNpmTasks('grunt-newer');\n   93:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   94:   grunt.loadNpmTasks('grunt-contrib-watch');\n   95:   grunt.loadNpmTasks('grunt-newer');\n  105: In most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/Gruntfile.js:\n    3:   grunt.loadNpmTasks('grunt-contrib-clean');\n    4:   grunt.loadNpmTasks('grunt-mocha-cli');\n    5:   grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/node_modules/ngmin/node_modules/escodegen/Gruntfile.js:\n   51:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   52:     grunt.loadNpmTasks('grunt-mocha-test');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/README.md:\n   17: grunt.loadNpmTasks('grunt-ngmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-svgmin/readme.md:\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   52: grunt.loadNpmTasks('grunt-svgmin');\n   79: grunt.loadNpmTasks('grunt-svgmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-wiredep/readme.md:\n   31: grunt.loadNpmTasks('grunt-wiredep');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt.js:\n   58: gExpose(task, 'loadNpmTasks');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/cli.js:\n   80:     info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/task.js:\n  380: task.loadNpmTasks = function(name) {\n  398:         task.loadNpmTasks(path.relative(root, filepath));\n  455:   (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/getobject/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-log/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-util/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/jshint-stylish/readme.md:\n   51: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/load-grunt-tasks.js:\n   27: 	multimatch(names, pattern).forEach(grunt.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/readme.md:\n   15: grunt.loadNpmTasks('grunt-shell');\n   16: grunt.loadNpmTasks('grunt-sass');\n   17: grunt.loadNpmTasks('grunt-recess');\n   18: grunt.loadNpmTasks('grunt-sizediff');\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   20: grunt.loadNpmTasks('grunt-styl');\n   21: grunt.loadNpmTasks('grunt-php');\n   22: grunt.loadNpmTasks('grunt-eslint');\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   24: grunt.loadNpmTasks('grunt-bower-requirejs');\n\n125 matches across 55 files\n\n\nSearching 17 files for \"loadNpmTasks\"\n\n0 matches across 0 files\n\n\nSearching 19133 files for \"loadNpmTasks\"\n\n/Users/hroussel/Documents/workspace/yodemo2/Gruntfile.js:\n  466:   grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/node_modules/autoprefixer/README.md:\n  349: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-autoprefixer/README.md:\n   20: grunt.loadNpmTasks('grunt-autoprefixer');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/Gruntfile.js:\n   39:   grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-casperjs/README.md:\n   20: grunt.loadNpmTasks('grunt-casperjs');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-concurrent/readme.md:\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   52: grunt.loadNpmTasks('grunt-concurrent');\n   85: grunt.loadNpmTasks('grunt-concurrent');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/Gruntfile.js:\n   44:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   45:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   46:   grunt.loadNpmTasks('grunt-contrib-internal');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-clean');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-coffee/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-coffee');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-compass/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-compass');\n  359: grunt.loadNpmTasks('grunt-contrib-compass');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-concat/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-concat');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-connect/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-connect');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-copy/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-copy');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-cssmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-cssmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/node_modules/html-minifier/node_modules/cli/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-htmlmin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-htmlmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-imagemin/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-imagemin');\n  118: grunt.loadNpmTasks('grunt-contrib-imagemin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/node_modules/jshint/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-jshint/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-uglify/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-uglify');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/gaze/node_modules/globule/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/node_modules/tiny-lr-fork/readme.md:\n  151: grunt.loadNpmTasks('tiny-lr');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-watch/README.md:\n   19: grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/Gruntfile.js:\n   39:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   40:     grunt.loadNpmTasks('grunt-contrib-watch');\n   41:     grunt.loadNpmTasks('grunt-simple-mocha');\n   42:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-json/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/bower-registry-client/Gruntfile.js:\n    5:     grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:     grunt.loadNpmTasks('grunt-contrib-watch');\n    7:     grunt.loadNpmTasks('grunt-simple-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/decompress-zip/Gruntfile.js:\n   38:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   39:     grunt.loadNpmTasks('grunt-contrib-watch');\n   40:     grunt.loadNpmTasks('grunt-simple-mocha');\n   41:     grunt.loadNpmTasks('grunt-exec');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/inquirer/Gruntfile.js:\n   23:   grunt.loadNpmTasks(\"grunt-contrib-jshint\");\n   24:   grunt.loadNpmTasks(\"grunt-simple-mocha\");\n   25:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/cdnjs-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/google-cdn-data/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/README.md:\n   21: grunt.loadNpmTasks('grunt-google-cdn');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/Gruntfile.js:\n    4:   grunt.loadNpmTasks('grunt-release');\n    5:   grunt.loadNpmTasks('grunt-contrib-watch');\n    6:   grunt.loadNpmTasks('grunt-conventional-changelog');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-karma/README.md:\n   19: grunt.loadNpmTasks('grunt-karma');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/gruntfile.js:\n   68:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   69:   grunt.loadNpmTasks('grunt-contrib-watch');\n   70:   grunt.loadNpmTasks('grunt-cafe-mocha');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-newer/README.md:\n   19: grunt.loadNpmTasks('grunt-newer');\n   40:   grunt.loadNpmTasks('grunt-contrib-uglify');\n   41:   grunt.loadNpmTasks('grunt-newer');\n   66:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   67:   grunt.loadNpmTasks('grunt-newer');\n   93:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   94:   grunt.loadNpmTasks('grunt-contrib-watch');\n   95:   grunt.loadNpmTasks('grunt-newer');\n  105: In most cases, you shouldn't need to add any special configuration for the `newer` task.  Just `grunt.loadNpmTasks('grunt-newer')` and you can use `newer` as a prefix to your other tasks.  The options below are available for advanced usage.\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/Gruntfile.js:\n    3:   grunt.loadNpmTasks('grunt-contrib-clean');\n    4:   grunt.loadNpmTasks('grunt-mocha-cli');\n    5:   grunt.loadNpmTasks('grunt-contrib-jshint');\n    6:   grunt.loadNpmTasks('grunt-release');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/node_modules/ngmin/node_modules/escodegen/Gruntfile.js:\n   51:     grunt.loadNpmTasks('grunt-contrib-jshint');\n   52:     grunt.loadNpmTasks('grunt-mocha-test');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-ngmin/README.md:\n   17: grunt.loadNpmTasks('grunt-ngmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-svgmin/readme.md:\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   52: grunt.loadNpmTasks('grunt-svgmin');\n   79: grunt.loadNpmTasks('grunt-svgmin');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-wiredep/readme.md:\n   31: grunt.loadNpmTasks('grunt-wiredep');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt.js:\n   58: gExpose(task, 'loadNpmTasks');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/cli.js:\n   80:     info: 'Npm-installed grunt plugins to scan for task and \"extra\" files. (grunt.loadNpmTasks) *',\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/lib/grunt/task.js:\n  380: task.loadNpmTasks = function(name) {\n  398:         task.loadNpmTasks(path.relative(root, filepath));\n  455:   (grunt.option('npm') || []).forEach(task.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/exit/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/getobject/Gruntfile.js:\n   41:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   42:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   43:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-log/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-util/Gruntfile.js:\n   23:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   24:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n   25:   grunt.loadNpmTasks('grunt-contrib-watch');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/jshint-stylish/readme.md:\n   51: grunt.loadNpmTasks('grunt-contrib-jshint');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/load-grunt-tasks.js:\n   27: 	multimatch(names, pattern).forEach(grunt.loadNpmTasks);\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/node_modules/findup-sync/Gruntfile.js:\n   19:   grunt.loadNpmTasks('grunt-contrib-jshint');\n   20:   grunt.loadNpmTasks('grunt-contrib-nodeunit');\n\n/Users/hroussel/Documents/workspace/yodemo2/node_modules/load-grunt-tasks/readme.md:\n   15: grunt.loadNpmTasks('grunt-shell');\n   16: grunt.loadNpmTasks('grunt-sass');\n   17: grunt.loadNpmTasks('grunt-recess');\n   18: grunt.loadNpmTasks('grunt-sizediff');\n   19: grunt.loadNpmTasks('grunt-svgmin');\n   20: grunt.loadNpmTasks('grunt-styl');\n   21: grunt.loadNpmTasks('grunt-php');\n   22: grunt.loadNpmTasks('grunt-eslint');\n   23: grunt.loadNpmTasks('grunt-concurrent');\n   24: grunt.loadNpmTasks('grunt-bower-requirejs');\n\n125 matches across 55 files\n",
			"settings":
			{
				"buffer_size": 396094,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 147.0,
		"selected_items":
		[
			[
				"git stat",
				"Git: Status"
			],
			[
				"set sy",
				"Set Syntax: SCSS"
			],
			[
				"sass",
				"Set Syntax: Sass"
			],
			[
				"git check",
				"Git: Checkout Current File"
			],
			[
				"coffee",
				"Set Syntax: CoffeeScript"
			],
			[
				"git ope",
				"Git: Open Modified Files"
			],
			[
				"git open ",
				"Git: Open Modified Files"
			],
			[
				"git dif",
				"Git: Diff All Files"
			],
			[
				"git diff",
				"Git: Diff All Files"
			],
			[
				"gio",
				"Git: Open Modified Files"
			],
			[
				"git cec",
				"Git: Checkout Current File"
			],
			[
				"git di",
				"Git: Diff All Files"
			],
			[
				"git log",
				"Git: Log Current File"
			],
			[
				"git open",
				"Git: Open Modified Files"
			],
			[
				"dif",
				"Git: Diff All Files"
			],
			[
				"coff",
				"Coffee: Compile File"
			],
			[
				"coffe",
				"Coffee: Compile File"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"git checkou",
				"Git: Checkout Current File"
			],
			[
				"open mo",
				"Git: Open Modified Files"
			],
			[
				"package remove",
				"Package Control: Remove Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"package",
				"Package Control: Install Package"
			],
			[
				"remove ",
				"Package Control: Remove Package"
			],
			[
				"packge re",
				"Package Control: Remove Package"
			],
			[
				"remove p",
				"Package Control: Remove Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"isntal",
				"Package Control: Install Package"
			],
			[
				"diff al",
				"Git: Diff All Files"
			],
			[
				"diff",
				"Git: Diff Current File"
			],
			[
				"open m",
				"Git: Open Modified Files"
			],
			[
				"open",
				"Git: Open Modified Files"
			],
			[
				"packge",
				"Package Control: Install Package"
			],
			[
				"package in",
				"Package Control: Install Package"
			],
			[
				"git chec",
				"Git: Checkout Current File"
			],
			[
				"dig",
				"Git: Diff Current File (Ignore Whitespace)"
			],
			[
				"dif ",
				"Git: Diff Current File"
			],
			[
				"coffeesc",
				"Set Syntax: CoffeeScript"
			],
			[
				"bash",
				"Set Syntax: Shell Script (Bash)"
			],
			[
				"git op",
				"Git: Open Modified Files"
			],
			[
				"git st",
				"Git: Status"
			],
			[
				"gi check",
				"Git: Checkout Current File"
			],
			[
				"ope",
				"Git: Open Modified Files"
			],
			[
				"pack inst",
				"Package Control: Install Package"
			],
			[
				"git lo",
				"Git: Log Current File"
			],
			[
				"hand",
				"Set Syntax: Handlebars"
			],
			[
				"format",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"git ch",
				"Git: Checkout Current File"
			],
			[
				"forma",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"dia",
				"Git: Diff All Files"
			],
			[
				"han",
				"Set Syntax: Handlebars"
			],
			[
				"for",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"d",
				"Git: Diff Current File"
			],
			[
				"diff cu",
				"Git: Diff Tool Current File"
			],
			[
				"open mod",
				"Git: Open Modified Files"
			],
			[
				"difa",
				"Git: Diff All"
			],
			[
				"remo",
				"Package Control: Remove Package"
			],
			[
				"packi",
				"Package Control: Install Package"
			],
			[
				"instla",
				"Package Control: Install Package"
			],
			[
				"snippet",
				"Snippet: #!/usr/bin/env"
			],
			[
				"ha",
				"Set Syntax: Handlebars"
			],
			[
				"blo",
				"Toggle Block Comment"
			],
			[
				"handl",
				"Set Syntax: Handlebars"
			],
			[
				"git statu",
				"Git: Status"
			],
			[
				"git sta",
				"Git: Status"
			],
			[
				"syntax ",
				"Set Syntax: Handlebars"
			],
			[
				"set hand",
				"Set Syntax: Handlebars"
			],
			[
				"set syntax han",
				"Set Syntax: Handlebars"
			],
			[
				"set sy html",
				"Set Syntax: HTML"
			],
			[
				"set sy ru",
				"Set Syntax: Ruby"
			],
			[
				"open ",
				"Git: Open Modified Files"
			],
			[
				"set synta ry",
				"Set Syntax: Ruby"
			],
			[
				"handle",
				"Set Syntax: Handlebars"
			],
			[
				"git log cu",
				"Git: Log Current File"
			],
			[
				"block",
				"Toggle Block Comment"
			],
			[
				"comme",
				"Toggle Comment"
			],
			[
				"git diff ",
				"Git: Diff Staged"
			],
			[
				"git add se",
				"Git: Add Selected Hunk"
			],
			[
				"git com",
				"Git: Commit"
			],
			[
				"git co",
				"Git: Commit"
			],
			[
				"git commit ",
				"Git: Commit"
			],
			[
				"git se",
				"Git: Add Selected Hunk"
			],
			[
				"git ad",
				"Git: Add Current File"
			],
			[
				"pretty",
				"Pretty JSON: Format (Pretty Print) JSON"
			],
			[
				"packge in",
				"Package Control: Install Package"
			],
			[
				"git log ",
				"Git: Log Current File"
			],
			[
				"package inst",
				"Package Control: Install Package"
			],
			[
				"GIT ST",
				"Git: Status"
			],
			[
				"di",
				"Git: Diff Current File"
			],
			[
				"indent",
				"Indentation: Reindent Lines"
			],
			[
				"compi",
				"Coffee: Compile File"
			],
			[
				"compile",
				"Coffee: Compile File"
			],
			[
				"install ",
				"Package Control: Install Package"
			],
			[
				"git status",
				"Git: Status"
			],
			[
				"log",
				"Git: Log Current File"
			],
			[
				"git log c",
				"Git: Log Current File"
			],
			[
				"retty",
				"HTMLPrettify"
			],
			[
				"pret",
				"HTMLPrettify"
			],
			[
				"git b",
				"Git: Blame"
			],
			[
				"df",
				"Git: Diff Current File"
			],
			[
				"yaml",
				"Set Syntax: YAML"
			],
			[
				"dif cu",
				"Git: Diff Current File"
			],
			[
				"git id",
				"Git: Diff Current File"
			],
			[
				"inde",
				"Code Folding: Fold Tag Attributes"
			],
			[
				"stat",
				"Git: Status"
			],
			[
				"log cu",
				"Git: Log Current File"
			],
			[
				"diff st",
				"Git: Diff Staged"
			],
			[
				"pack",
				"Preferences: Browse Packages"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"cls",
			"clear",
			"view.getOptions()",
			"view",
			"view.",
			"view.options()",
			"import urllib.request,os,hashlib; h = '7183a2d3e96f11eeadd761d777e62404' + 'e330c659d4bb41d3bdf022e94cab3cd0'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": true,
		"side_bar_visible": false,
		"status_bar_visible": true
	},
	"file_history":
	[
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-coffee/tasks/coffee.js",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/docs/clean-options.md",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/grunt-legacy-util/test/fixtures/Gruntfile-execArgv-child.js",
		"/Users/hroussel/Documents/workspace/yodemo2/Gruntfile.js",
		"/Users/hroussel/Documents/workspace/yodemo2/test/karma.conf.coffee",
		"/Users/hroussel/Documents/workspace/yodemo2/test/spec/controllers/main.coffee",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-connect/node_modules/connect/node_modules/compressible/specifications.json",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/underscore.string/test/speed.js",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/karma/node_modules/http-proxy/examples/http/standalone-proxy.js",
		"/Users/hroussel/Documents/workspace/yodemo2/bower_components/es5-shim/shims.json",
		"/Users/hroussel/Documents/workspace/yodemo2/app/views/main.html",
		"/Users/hroussel/Documents/workspace/yodemo2/app/index.html",
		"/Users/hroussel/Documents/workspace/yodemo2/app/scripts/app.coffee",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/karma/karma-completion.sh",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/karma/bin/karma",
		"/Users/hroussel/Documents/workspace/yodemo2/app/scripts/controllers/main.coffee",
		"/Users/hroussel/Documents/workspace/yodemo2/.tmp/styles/main.css",
		"/Users/hroussel/Documents/workspace/yodemo2/.tmp/scripts/app.js",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-google-cdn/node_modules/bower/node_modules/mout/lang/isNull.js",
		"/Users/hroussel/Documents/workspace/yodemo2/app/styles/main.scss",
		"/Users/hroussel/Documents/workspace/yodemo2/app/scripts/controllers/index.coffee",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/lib/vendor/web-socket-js/flash-src/WebSocketMainInsecure.as",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/node_modules/ws/node_modules/nan/.index.js",
		"/Users/hroussel/Documents/workspace/yodemo2/bower_components/jquery/src/var/indexOf.js",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js",
		"/Users/hroussel/Documents/workspace/yodemo2/node_modules/grunt-contrib-clean/AUTHORS",
		"/Users/hroussel/Documents/workspace/yodemo2/.tmp/scripts/controllers/main.js",
		"/Users/hroussel/Documents/workspace/yodemo/Gruntfile.js",
		"/Users/hroussel/Documents/workspace/yodemo/app/scripts/controllers/main.coffee",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/features-json/use-strict.json",
		"/Users/hroussel/Documents/workspace/yodemo/app/views/main.html",
		"/Users/hroussel/Documents/workspace/yodemo/.tmp/styles/main.css",
		"/Users/hroussel/Documents/workspace/yodemo/app/scripts/app.js",
		"/Users/hroussel/Documents/workspace/yodemo/test/spec/controllers/main.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma-phantomjs-launcher/node_modules/phantomjs/node_modules/adm-zip/headers/mainHeader.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/load-grunt-tasks/node_modules/findup-sync/node_modules/lodash/dist/lodash.compat.min.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-ngmin/node_modules/ngmin/main.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/lib/core/resolvers/GitResolver.js",
		"/Users/hroussel/Documents/workspace/yodemo/app/styles/main.scss",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-uglify/node_modules/uglify-js/lib/mozilla-ast.js",
		"/Users/hroussel/Documents/workspace/yodemo/app/scripts/controllers/menu.js",
		"/Users/hroussel/Documents/workspace/yodemo/app/index.html",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma/config.tpl.coffee",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-usemin/lib/configwriter.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/bootstrap-sass-official/CONTRIBUTING.md",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-clean/docs/clean-options.md",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/es5-shim/CHANGES",
		"/Users/hroussel/Documents/workspace/yodemo/app/scripts/controllers/about.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/features-json/offline-apps.json",
		"/Users/hroussel/Documents/workspace/yodemo/app/scripts/controllers/main.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular-bootstrap/ui-bootstrap.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular-bootstrap/ui-bootstrap-tpls.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular-bootstrap/.bower.json",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular/angular-csp.css",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular/angular.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular-animate/angular-animate.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/angular-resource/angular-resource.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-svgmin/node_modules/svgo/node_modules/sax/test/attribute-name.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower.json",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-svgmin/node_modules/svgo/node_modules/sax/test/buffer-overrun.js",
		"/Users/hroussel/Documents/workspace/yodemo/test/karma.conf.js",
		"/Users/hroussel/Documents/workspace/yodemo/package.json",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/node_modules/mout/lang/isNull.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma/karma-completion.sh",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma/bin/karma",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma/node_modules/socket.io/node_modules/socket.io-client/node_modules/uglify-js/test/testparser.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/bower/node_modules/request/node_modules/form-data/node_modules/combined-stream/node_modules/delayed-stream/test/integration/test-delayed-stream-pause.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma-phantomjs-launcher/node_modules/phantomjs/test/tests.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/colors/test.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/rimraf/test/test-sync.js",
		"/Users/hroussel/Documents/workspace/yodemo/.sass-cache/67af060f28d2fbc33033143cf34a37b387f7e8a2/_text-emphasis.scssc",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-karma/TODO.md",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt/node_modules/js-yaml/node_modules/argparse/lib/argument_parser.js",
		"/Users/hroussel/Documents/workspace/yodemo/bower_components/es5-shim/CONTRIBUTORS.md",
		"/Users/hroussel/Documents/workspace/yodemo/app/views/about.html",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/features-json/atob-btoa.json",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-clean/AUTHORS",
		"/Users/hroussel/Documents/workspace/yodemo/.sass-cache/cae782ad51ab8ee1c3a2992fd5252980a365817f/main.scssc",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/caniuse-db/features-json/script-async.json",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-autoprefixer/node_modules/autoprefixer/node_modules/postcss/node_modules/source-map/build/prefix-source-map.jsm",
		"/Users/hroussel/Documents/workspace/yodemo/test/spec/controllers/about.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-google-cdn/node_modules/google-cdn/node_modules/bower/node_modules/inquirer/test/specs/prompts/confirm.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/grunt-contrib-connect/node_modules/connect/node_modules/multiparty/test/fixture/js/special-chars-in-filename.js",
		"/Users/hroussel/Documents/workspace/yodemo/node_modules/karma/node_modules/http-proxy/test/core/simple/test-http-set-cookies.js",
		"/Users/hroussel/Documents/workspace/tripformi/app/views/static_pages/binder.html.erb",
		"/Users/hroussel/Documents/workspace/tripformi/bin/bundle",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/app.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/stylesheets/binder.css.scss",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/controller.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/config.ru",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/application.js",
		"/Users/hroussel/Documents/workspace/tripformi/config/application.rb",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/notes/itinerary.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/config/initializers/backtrace_silencers.rb",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/note_editor.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/note_document.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_move_lines_using_hotkeys.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_drag_lines.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/.idea/encodings.xml",
		"/Users/hroussel/Documents/workspace/tripformi/app/controllers/notes_controller.rb",
		"/Users/hroussel/Documents/workspace/tripformi/tmp/min_geonames/9b93699650df8426e450f1e2812c18af/alternateNames.txt",
		"/Users/hroussel/Documents/workspace/tripformi/vendor/assets/javascripts/geojson-extent.js",
		"/Users/hroussel/Documents/workspace/tripformi/Gemfile",
		"/Users/hroussel/Documents/workspace/tripformi/app/mailers/.keep",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/stylesheets/application.css",
		"/Users/hroussel/Documents/workspace/tripformi/app/controllers/application_controller.rb",
		"/Users/hroussel/Documents/workspace/tripformi/app/helpers/application_helper.rb",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/note_editor_state.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/fail_test_notes_transport.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/app/models/note.rb",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/global_binder.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_autocomplete.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_add_remove_lines.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/config/boot.rb",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_cursor_nav.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/global.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_select_lines.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_select_token.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_keynav.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_add_delete_lines.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_line_select.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_node_lines.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/spec/acceptance/binder/editor_line_activation.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/config/environments/test.rb",
		"/Users/hroussel/Documents/workspace/tripformi/vendor/assets/javascripts/ace/mode-d.js",
		"/Users/hroussel/Documents/workspace/tripformi/vendor/assets/javascripts/ace/mode-dot.js",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder/js/note_node.js.coffee",
		"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/ng-db/controller.js"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"/Users/hroussel/Documents/workspace/yodemo2/app,/Users/hroussel/Documents/workspace/yodemo2/test,/Users/hroussel/Documents/workspace/yodemo2,-*.json",
			"/Users/hroussel/Documents/workspace/yodemo2/app,/Users/hroussel/Documents/workspace/yodemo2/test",
			"/Users/hroussel/Documents/workspace/yodemo2/app,/Users/hroussel/Documents/workspace/yodemo2/test,/Users/hroussel/Documents/workspace/yodemo2,-*.json",
			"/Users/hroussel/Documents/workspace/yodemo2/app,/Users/hroussel/Documents/workspace/yodemo2/test,/Users/hroussel/Documents/workspace/yodemo2",
			"/Users/hroussel/Documents/workspace/yodemo2/app,/Users/hroussel/Documents/workspace/yodemo2/test",
			"/Users/hroussel/Documents/workspace/yodemo",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee,*.erb,*.js,*.scss",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee,*.erb,*.js,*.css",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee,*.erb,*.js",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee,*.erb",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffeee",
			"/Users/hroussel/Documents/workspace/tripformi/*,*.coffee",
			"/Users/hroussel/Documents/workspace/tripformi/*.coffee",
			"/Users/hroussel/Documents/workspace/tripformi/",
			"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder",
			"/Users/hroussel/Documents/workspace/tripformi/",
			"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascripts/binder",
			"/Users/hroussel/Documents/workspace/tripformi/app/assets/javascript",
			"/Users/hroussel/Documents/workspace/tripformi",
			"/Users/hroussel/Documents/workspace/angular-phonecat",
			"/Users/hroussel/Documents/workspace/tripformi/,*.rb",
			"/Users/hroussel/Documents/workspace/tripformi/,*",
			"/Users/hroussel/Documents/workspace/tripformi/,*.js,*.coffee",
			"/Users/hroussel/Documents/workspace/tripformi/",
			"/Users/hroussel/Documents/workspace/tripformi/*/jquery.intellinote.js",
			"/Users/hroussel/Documents/workspace/tripformi/jquery.intellinote.js",
			"/Users/hroussel/Documents/workspace/tripformi/,*",
			"/Users/hroussel/Documents/workspace/tripformi/,*.coffee",
			"/Users/hroussel/Documents/workspace/tripformi/",
			"/Users/hroussel/Documents/workspace/tripformi/*.rb",
			"/Users/hroussel/Documents/workspace/tripformi/",
			"/Users/hroussel/Documents/workspace/tripformi/,*.rb",
			"/Users/hroussel/Documents/workspace/tripformi",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"loadNpmTasks",
			"loadn",
			"load",
			"angular-mock",
			"background: 'red",
			"red",
			"background",
			"coffee",
			":dist'",
			"coffee",
			"compass",
			"coffee",
			".js",
			"SitePoint",
			"compass",
			"concurrent",
			"main",
			"ui.bootstrap",
			"awesomeThings",
			"mock",
			"awesomeThings",
			"a",
			"green",
			"		h",
			"lineD",
			"validD",
			"div",
			"Updating dropzones for node",
			"stop",
			"stop:",
			"stop: ",
			"dragstop",
			"draggable",
			"id='line_{{line.no}}' ",
			"id=",
			"line-relative",
			"linerelative",
			" line-no='{{line.no}}'",
			"line-",
			"TODO",
			"binder",
			"TODO",
			"getAllowedDrops",
			"allowed",
			"TODO",
			"_getAllowedDropTargets",
			"TODO",
			"dropAfterLine",
			"TODO",
			"getAllowedDropNodes",
			"_isDropAllowedAfter",
			"TODO",
			"_removeThenInsertNode",
			"_moveNodeAfter",
			"_moveNodeBefore",
			"moveNodeDown",
			"validPrevPrevNode",
			"moveNodeUp",
			"getAllowedDropNodes",
			"targetAfterNode",
			"moveNodeAfter",
			"TODO",
			"binder",
			"TODO",
			"allowed",
			"tf-line",
			"tf-",
			"draggable>",
			"_updateValidDropZones",
			"result",
			"-10",
			"-90deg",
			"/*",
			"dropAfterLine",
			"dropZoneSelectedIn2StepDnd",
			"draggedLineNo",
			"afterLineId",
			"srcLineId",
			"drop",
			"_dropAfter",
			"dropZoneSelectedInTwoStepDnD",
			"el",
			"		el = element[0]\n",
			"el",
			"_dropAfter",
			"$scope.",
			"dropZoneSelectedInTwoStepDnd",
			"dropZoneSelected",
			"lineNo",
			"dropAfterLine",
			"scope.dropAfter",
			"scope.drop",
			"noteEditor.moveNode",
			"moveSomeNodeAfter",
			"modelUpdated",
			"_updateLines",
			"TODO",
			"moveNodeAfter",
			"TODO",
			"draggedLine",
			"allowedDropZone",
			"beforeLine",
			"afterLine",
			"TODO",
			"FIXME",
			"display: inline-block;",
			"showDropZones",
			"'\">",
			"draggable>",
			",",
			"		@.disableDrag()",
			"@.disableDrag()",
			"disableDrag()",
			"@.disableDrag()",
			"casperJsUserAgentString",
			"id='line_{{line.no}}'",
			"draggable>",
			"draggable",
			"User gets place names suggestions for place names with spaces",
			"drop",
			"dropp",
			"drop",
			"id=",
			"id",
			"moveNodeAfter",
			"_moveNodeAfter",
			"$scope.$emit",
			"after"
		],
		"highlight": false,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"validDrop",
			"NoteNode",
			"Node",
			"geonames_city_csv_etl",
			"GeonamesCityCsvEtl",
			"\\",
			"phantom.injectJs './spec/acceptance/global.coffee'",
			"@.waitForPlaceDbUpdate",
			"casper.waitForPlaceDbUpdate",
			"casper.createGuestNote",
			"@.insertPlace",
			"casper.insertPlace",
			"signup_path",
			"signin_path",
			"signin2022772821_path"
		],
		"reverse": false,
		"show_context": false,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Gruntfile.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11342,
						"regions":
						{
						},
						"selection":
						[
							[
								11307,
								11319
							]
						],
						"settings":
						{
							"bs_sintax": "javascript",
							"buffer_scroll_name": "1f284e47",
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 6994.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 396094,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										11432,
										11444
									],
									[
										16496,
										16508
									],
									[
										17769,
										17781
									],
									[
										22473,
										22485
									],
									[
										23886,
										23898
									],
									[
										24650,
										24662
									],
									[
										25580,
										25592
									],
									[
										26038,
										26050
									],
									[
										26085,
										26097
									],
									[
										26132,
										26144
									],
									[
										26272,
										26284
									],
									[
										26325,
										26337
									],
									[
										26380,
										26392
									],
									[
										27325,
										27337
									],
									[
										29953,
										29965
									],
									[
										30921,
										30933
									],
									[
										39497,
										39509
									],
									[
										41778,
										41790
									],
									[
										41830,
										41842
									],
									[
										42780,
										42792
									],
									[
										52109,
										52121
									],
									[
										53072,
										53084
									],
									[
										64799,
										64811
									],
									[
										65744,
										65756
									],
									[
										71953,
										71965
									],
									[
										72901,
										72913
									],
									[
										76406,
										76418
									],
									[
										76614,
										76626
									],
									[
										76669,
										76681
									],
									[
										76722,
										76734
									],
									[
										77675,
										77687
									],
									[
										79905,
										79917
									],
									[
										81081,
										81093
									],
									[
										84061,
										84073
									],
									[
										85975,
										85987
									],
									[
										86028,
										86040
									],
									[
										86213,
										86225
									],
									[
										86268,
										86280
									],
									[
										86321,
										86333
									],
									[
										87279,
										87291
									],
									[
										95619,
										95631
									],
									[
										96584,
										96596
									],
									[
										109512,
										109524
									],
									[
										109695,
										109707
									],
									[
										109750,
										109762
									],
									[
										109803,
										109815
									],
									[
										114726,
										114738
									],
									[
										120702,
										120714
									],
									[
										121697,
										121709
									],
									[
										141704,
										141716
									],
									[
										141889,
										141901
									],
									[
										141944,
										141956
									],
									[
										141998,
										142010
									],
									[
										142193,
										142205
									],
									[
										142248,
										142260
									],
									[
										142302,
										142314
									],
									[
										142490,
										142502
									],
									[
										142545,
										142557
									],
									[
										142599,
										142611
									],
									[
										142652,
										142664
									],
									[
										142828,
										142840
									],
									[
										142883,
										142895
									],
									[
										142937,
										142949
									],
									[
										142990,
										143002
									],
									[
										143190,
										143202
									],
									[
										143245,
										143257
									],
									[
										143299,
										143311
									],
									[
										143518,
										143530
									],
									[
										143573,
										143585
									],
									[
										143627,
										143639
									],
									[
										143839,
										143851
									],
									[
										143894,
										143906
									],
									[
										143948,
										143960
									],
									[
										144001,
										144013
									],
									[
										144197,
										144209
									],
									[
										144250,
										144262
									],
									[
										144301,
										144313
									],
									[
										144487,
										144499
									],
									[
										144674,
										144686
									],
									[
										145913,
										145925
									],
									[
										147937,
										147949
									],
									[
										148069,
										148081
									],
									[
										148115,
										148127
									],
									[
										148167,
										148179
									],
									[
										148923,
										148935
									],
									[
										153960,
										153972
									],
									[
										154087,
										154099
									],
									[
										154140,
										154152
									],
									[
										154192,
										154204
									],
									[
										155264,
										155276
									],
									[
										155964,
										155976
									],
									[
										156011,
										156023
									],
									[
										157175,
										157187
									],
									[
										157222,
										157234
									],
									[
										158242,
										158254
									],
									[
										158289,
										158301
									],
									[
										158335,
										158347
									],
									[
										158902,
										158914
									],
									[
										162772,
										162784
									],
									[
										162816,
										162828
									],
									[
										162869,
										162881
									],
									[
										162913,
										162925
									],
									[
										162966,
										162978
									],
									[
										163010,
										163022
									],
									[
										163063,
										163075
									],
									[
										163115,
										163127
									],
									[
										163253,
										163265
									],
									[
										163490,
										163502
									],
									[
										163542,
										163554
									],
									[
										163590,
										163602
									],
									[
										163643,
										163655
									],
									[
										163816,
										163828
									],
									[
										163871,
										163883
									],
									[
										164759,
										164771
									],
									[
										165437,
										165449
									],
									[
										166451,
										166463
									],
									[
										167339,
										167351
									],
									[
										168223,
										168235
									],
									[
										169724,
										169736
									],
									[
										169767,
										169779
									],
									[
										169810,
										169822
									],
									[
										171068,
										171080
									],
									[
										173034,
										173046
									],
									[
										173164,
										173176
									],
									[
										173350,
										173362
									],
									[
										173462,
										173474
									],
									[
										173514,
										173526
									],
									[
										173609,
										173621
									],
									[
										173734,
										173746
									],
									[
										173789,
										173801
									],
									[
										173842,
										173854
									],
									[
										173996,
										174008
									],
									[
										174049,
										174061
									],
									[
										174204,
										174216
									],
									[
										174259,
										174271
									],
									[
										174312,
										174324
									],
									[
										174471,
										174483
									],
									[
										174524,
										174536
									],
									[
										174579,
										174591
									],
									[
										174739,
										174751
									],
									[
										174792,
										174804
									],
									[
										174847,
										174859
									],
									[
										176010,
										176022
									],
									[
										176301,
										176313
									],
									[
										176483,
										176495
									],
									[
										176626,
										176638
									],
									[
										176679,
										176691
									],
									[
										177464,
										177476
									],
									[
										177500,
										177512
									],
									[
										177535,
										177547
									],
									[
										177572,
										177584
									],
									[
										177611,
										177623
									],
									[
										177648,
										177660
									],
									[
										177683,
										177695
									],
									[
										177717,
										177729
									],
									[
										177754,
										177766
									],
									[
										177795,
										177807
									],
									[
										180033,
										180045
									],
									[
										180075,
										180087
									],
									[
										180116,
										180128
									],
									[
										180159,
										180171
									],
									[
										180204,
										180216
									],
									[
										180247,
										180259
									],
									[
										180288,
										180300
									],
									[
										180328,
										180340
									],
									[
										180371,
										180383
									],
									[
										180418,
										180430
									],
									[
										180669,
										180681
									],
									[
										192093,
										192105
									],
									[
										197158,
										197170
									],
									[
										198432,
										198444
									],
									[
										203137,
										203149
									],
									[
										203275,
										203287
									],
									[
										204163,
										204175
									],
									[
										206826,
										206838
									],
									[
										208236,
										208248
									],
									[
										209000,
										209012
									],
									[
										209930,
										209942
									],
									[
										210389,
										210401
									],
									[
										210436,
										210448
									],
									[
										210483,
										210495
									],
									[
										210624,
										210636
									],
									[
										210677,
										210689
									],
									[
										210732,
										210744
									],
									[
										211678,
										211690
									],
									[
										214307,
										214319
									],
									[
										215280,
										215292
									],
									[
										220694,
										220706
									],
									[
										221664,
										221676
									],
									[
										230240,
										230252
									],
									[
										232522,
										232534
									],
									[
										232574,
										232586
									],
									[
										233525,
										233537
									],
									[
										242855,
										242867
									],
									[
										243819,
										243831
									],
									[
										255547,
										255559
									],
									[
										256493,
										256505
									],
									[
										262703,
										262715
									],
									[
										263652,
										263664
									],
									[
										267158,
										267170
									],
									[
										267367,
										267379
									],
									[
										267422,
										267434
									],
									[
										267475,
										267487
									],
									[
										268429,
										268441
									],
									[
										270660,
										270672
									],
									[
										271837,
										271849
									],
									[
										274817,
										274829
									],
									[
										276732,
										276744
									],
									[
										276785,
										276797
									],
									[
										276971,
										276983
									],
									[
										277026,
										277038
									],
									[
										277079,
										277091
									],
									[
										278038,
										278050
									],
									[
										286379,
										286391
									],
									[
										287345,
										287357
									],
									[
										300274,
										300286
									],
									[
										300458,
										300470
									],
									[
										300513,
										300525
									],
									[
										300566,
										300578
									],
									[
										305490,
										305502
									],
									[
										311467,
										311479
									],
									[
										312463,
										312475
									],
									[
										332471,
										332483
									],
									[
										332657,
										332669
									],
									[
										332712,
										332724
									],
									[
										332766,
										332778
									],
									[
										332962,
										332974
									],
									[
										333017,
										333029
									],
									[
										333071,
										333083
									],
									[
										333260,
										333272
									],
									[
										333315,
										333327
									],
									[
										333369,
										333381
									],
									[
										333422,
										333434
									],
									[
										333599,
										333611
									],
									[
										333654,
										333666
									],
									[
										333708,
										333720
									],
									[
										333761,
										333773
									],
									[
										333962,
										333974
									],
									[
										334017,
										334029
									],
									[
										334071,
										334083
									],
									[
										334291,
										334303
									],
									[
										334346,
										334358
									],
									[
										334400,
										334412
									],
									[
										334613,
										334625
									],
									[
										334668,
										334680
									],
									[
										334722,
										334734
									],
									[
										334775,
										334787
									],
									[
										334972,
										334984
									],
									[
										335025,
										335037
									],
									[
										335076,
										335088
									],
									[
										335263,
										335275
									],
									[
										335451,
										335463
									],
									[
										336691,
										336703
									],
									[
										338716,
										338728
									],
									[
										338849,
										338861
									],
									[
										338895,
										338907
									],
									[
										338947,
										338959
									],
									[
										339704,
										339716
									],
									[
										344742,
										344754
									],
									[
										344870,
										344882
									],
									[
										344923,
										344935
									],
									[
										344975,
										344987
									],
									[
										346048,
										346060
									],
									[
										346748,
										346760
									],
									[
										346795,
										346807
									],
									[
										347959,
										347971
									],
									[
										348006,
										348018
									],
									[
										349026,
										349038
									],
									[
										349073,
										349085
									],
									[
										349119,
										349131
									],
									[
										349686,
										349698
									],
									[
										353557,
										353569
									],
									[
										353601,
										353613
									],
									[
										353654,
										353666
									],
									[
										353698,
										353710
									],
									[
										353751,
										353763
									],
									[
										353795,
										353807
									],
									[
										353848,
										353860
									],
									[
										353900,
										353912
									],
									[
										354038,
										354050
									],
									[
										354276,
										354288
									],
									[
										354328,
										354340
									],
									[
										354376,
										354388
									],
									[
										354429,
										354441
									],
									[
										354603,
										354615
									],
									[
										354658,
										354670
									],
									[
										355547,
										355559
									],
									[
										356226,
										356238
									],
									[
										357241,
										357253
									],
									[
										358129,
										358141
									],
									[
										359013,
										359025
									],
									[
										360515,
										360527
									],
									[
										360558,
										360570
									],
									[
										360601,
										360613
									],
									[
										361860,
										361872
									],
									[
										363827,
										363839
									],
									[
										363958,
										363970
									],
									[
										364145,
										364157
									],
									[
										364258,
										364270
									],
									[
										364310,
										364322
									],
									[
										364405,
										364417
									],
									[
										364531,
										364543
									],
									[
										364586,
										364598
									],
									[
										364639,
										364651
									],
									[
										364794,
										364806
									],
									[
										364847,
										364859
									],
									[
										365003,
										365015
									],
									[
										365058,
										365070
									],
									[
										365111,
										365123
									],
									[
										365271,
										365283
									],
									[
										365324,
										365336
									],
									[
										365379,
										365391
									],
									[
										365540,
										365552
									],
									[
										365593,
										365605
									],
									[
										365648,
										365660
									],
									[
										366812,
										366824
									],
									[
										367104,
										367116
									],
									[
										367287,
										367299
									],
									[
										367431,
										367443
									],
									[
										367484,
										367496
									],
									[
										368270,
										368282
									],
									[
										368306,
										368318
									],
									[
										368341,
										368353
									],
									[
										368378,
										368390
									],
									[
										368417,
										368429
									],
									[
										368454,
										368466
									],
									[
										368489,
										368501
									],
									[
										368523,
										368535
									],
									[
										368560,
										368572
									],
									[
										368601,
										368613
									],
									[
										370840,
										370852
									],
									[
										370882,
										370894
									],
									[
										370923,
										370935
									],
									[
										370966,
										370978
									],
									[
										371011,
										371023
									],
									[
										371054,
										371066
									],
									[
										371095,
										371107
									],
									[
										371135,
										371147
									],
									[
										371178,
										371190
									],
									[
										371225,
										371237
									],
									[
										371451,
										371463
									],
									[
										371610,
										371622
									],
									[
										371747,
										371759
									],
									[
										371885,
										371897
									],
									[
										372020,
										372032
									],
									[
										372151,
										372163
									],
									[
										372198,
										372210
									],
									[
										372245,
										372257
									],
									[
										372386,
										372398
									],
									[
										372439,
										372451
									],
									[
										372494,
										372506
									],
									[
										372636,
										372648
									],
									[
										372776,
										372788
									],
									[
										372918,
										372930
									],
									[
										372970,
										372982
									],
									[
										373112,
										373124
									],
									[
										373254,
										373266
									],
									[
										373394,
										373406
									],
									[
										373533,
										373545
									],
									[
										373742,
										373754
									],
									[
										373797,
										373809
									],
									[
										373850,
										373862
									],
									[
										373991,
										374003
									],
									[
										374135,
										374147
									],
									[
										374188,
										374200
									],
									[
										374374,
										374386
									],
									[
										374429,
										374441
									],
									[
										374482,
										374494
									],
									[
										374622,
										374634
									],
									[
										374763,
										374775
									],
									[
										374947,
										374959
									],
									[
										375002,
										375014
									],
									[
										375055,
										375067
									],
									[
										375220,
										375232
									],
									[
										375347,
										375359
									],
									[
										375533,
										375545
									],
									[
										375588,
										375600
									],
									[
										375642,
										375654
									],
									[
										375838,
										375850
									],
									[
										375893,
										375905
									],
									[
										375947,
										375959
									],
									[
										376136,
										376148
									],
									[
										376191,
										376203
									],
									[
										376245,
										376257
									],
									[
										376298,
										376310
									],
									[
										376475,
										376487
									],
									[
										376530,
										376542
									],
									[
										376584,
										376596
									],
									[
										376637,
										376649
									],
									[
										376838,
										376850
									],
									[
										376893,
										376905
									],
									[
										376947,
										376959
									],
									[
										377167,
										377179
									],
									[
										377222,
										377234
									],
									[
										377276,
										377288
									],
									[
										377489,
										377501
									],
									[
										377544,
										377556
									],
									[
										377598,
										377610
									],
									[
										377651,
										377663
									],
									[
										377848,
										377860
									],
									[
										377901,
										377913
									],
									[
										377952,
										377964
									],
									[
										378139,
										378151
									],
									[
										378327,
										378339
									],
									[
										378457,
										378469
									],
									[
										378590,
										378602
									],
									[
										378636,
										378648
									],
									[
										378688,
										378700
									],
									[
										378828,
										378840
									],
									[
										378956,
										378968
									],
									[
										379009,
										379021
									],
									[
										379061,
										379073
									],
									[
										379189,
										379201
									],
									[
										379233,
										379245
									],
									[
										379286,
										379298
									],
									[
										379330,
										379342
									],
									[
										379383,
										379395
									],
									[
										379427,
										379439
									],
									[
										379480,
										379492
									],
									[
										379532,
										379544
									],
									[
										379670,
										379682
									],
									[
										379908,
										379920
									],
									[
										379960,
										379972
									],
									[
										380008,
										380020
									],
									[
										380061,
										380073
									],
									[
										380235,
										380247
									],
									[
										380290,
										380302
									],
									[
										380418,
										380430
									],
									[
										380542,
										380554
									],
									[
										380585,
										380597
									],
									[
										380628,
										380640
									],
									[
										380754,
										380766
									],
									[
										380885,
										380897
									],
									[
										381072,
										381084
									],
									[
										381185,
										381197
									],
									[
										381237,
										381249
									],
									[
										381332,
										381344
									],
									[
										381458,
										381470
									],
									[
										381513,
										381525
									],
									[
										381566,
										381578
									],
									[
										381721,
										381733
									],
									[
										381774,
										381786
									],
									[
										381930,
										381942
									],
									[
										381985,
										381997
									],
									[
										382038,
										382050
									],
									[
										382198,
										382210
									],
									[
										382251,
										382263
									],
									[
										382306,
										382318
									],
									[
										382467,
										382479
									],
									[
										382520,
										382532
									],
									[
										382575,
										382587
									],
									[
										382709,
										382721
									],
									[
										382892,
										382904
									],
									[
										383036,
										383048
									],
									[
										383089,
										383101
									],
									[
										383228,
										383240
									],
									[
										383270,
										383282
									],
									[
										383311,
										383323
									],
									[
										383354,
										383366
									],
									[
										383399,
										383411
									],
									[
										383442,
										383454
									],
									[
										383483,
										383495
									],
									[
										383523,
										383535
									],
									[
										383566,
										383578
									],
									[
										383613,
										383625
									],
									[
										383864,
										383876
									],
									[
										384023,
										384035
									],
									[
										384160,
										384172
									],
									[
										384298,
										384310
									],
									[
										384433,
										384445
									],
									[
										384564,
										384576
									],
									[
										384611,
										384623
									],
									[
										384658,
										384670
									],
									[
										384799,
										384811
									],
									[
										384852,
										384864
									],
									[
										384907,
										384919
									],
									[
										385049,
										385061
									],
									[
										385189,
										385201
									],
									[
										385331,
										385343
									],
									[
										385383,
										385395
									],
									[
										385525,
										385537
									],
									[
										385667,
										385679
									],
									[
										385807,
										385819
									],
									[
										385946,
										385958
									],
									[
										386155,
										386167
									],
									[
										386210,
										386222
									],
									[
										386263,
										386275
									],
									[
										386404,
										386416
									],
									[
										386548,
										386560
									],
									[
										386601,
										386613
									],
									[
										386787,
										386799
									],
									[
										386842,
										386854
									],
									[
										386895,
										386907
									],
									[
										387035,
										387047
									],
									[
										387176,
										387188
									],
									[
										387360,
										387372
									],
									[
										387415,
										387427
									],
									[
										387468,
										387480
									],
									[
										387633,
										387645
									],
									[
										387760,
										387772
									],
									[
										387946,
										387958
									],
									[
										388001,
										388013
									],
									[
										388055,
										388067
									],
									[
										388251,
										388263
									],
									[
										388306,
										388318
									],
									[
										388360,
										388372
									],
									[
										388549,
										388561
									],
									[
										388604,
										388616
									],
									[
										388658,
										388670
									],
									[
										388711,
										388723
									],
									[
										388888,
										388900
									],
									[
										388943,
										388955
									],
									[
										388997,
										389009
									],
									[
										389050,
										389062
									],
									[
										389251,
										389263
									],
									[
										389306,
										389318
									],
									[
										389360,
										389372
									],
									[
										389580,
										389592
									],
									[
										389635,
										389647
									],
									[
										389689,
										389701
									],
									[
										389902,
										389914
									],
									[
										389957,
										389969
									],
									[
										390011,
										390023
									],
									[
										390064,
										390076
									],
									[
										390261,
										390273
									],
									[
										390314,
										390326
									],
									[
										390365,
										390377
									],
									[
										390552,
										390564
									],
									[
										390740,
										390752
									],
									[
										390870,
										390882
									],
									[
										391003,
										391015
									],
									[
										391049,
										391061
									],
									[
										391101,
										391113
									],
									[
										391241,
										391253
									],
									[
										391369,
										391381
									],
									[
										391422,
										391434
									],
									[
										391474,
										391486
									],
									[
										391602,
										391614
									],
									[
										391646,
										391658
									],
									[
										391699,
										391711
									],
									[
										391743,
										391755
									],
									[
										391796,
										391808
									],
									[
										391840,
										391852
									],
									[
										391893,
										391905
									],
									[
										391945,
										391957
									],
									[
										392083,
										392095
									],
									[
										392321,
										392333
									],
									[
										392373,
										392385
									],
									[
										392421,
										392433
									],
									[
										392474,
										392486
									],
									[
										392648,
										392660
									],
									[
										392703,
										392715
									],
									[
										392831,
										392843
									],
									[
										392955,
										392967
									],
									[
										392998,
										393010
									],
									[
										393041,
										393053
									],
									[
										393167,
										393179
									],
									[
										393298,
										393310
									],
									[
										393485,
										393497
									],
									[
										393598,
										393610
									],
									[
										393650,
										393662
									],
									[
										393745,
										393757
									],
									[
										393871,
										393883
									],
									[
										393926,
										393938
									],
									[
										393979,
										393991
									],
									[
										394134,
										394146
									],
									[
										394187,
										394199
									],
									[
										394343,
										394355
									],
									[
										394398,
										394410
									],
									[
										394451,
										394463
									],
									[
										394611,
										394623
									],
									[
										394664,
										394676
									],
									[
										394719,
										394731
									],
									[
										394880,
										394892
									],
									[
										394933,
										394945
									],
									[
										394988,
										395000
									],
									[
										395122,
										395134
									],
									[
										395305,
										395317
									],
									[
										395449,
										395461
									],
									[
										395502,
										395514
									],
									[
										395641,
										395653
									],
									[
										395683,
										395695
									],
									[
										395724,
										395736
									],
									[
										395767,
										395779
									],
									[
										395812,
										395824
									],
									[
										395855,
										395867
									],
									[
										395896,
										395908
									],
									[
										395936,
										395948
									],
									[
										395979,
										395991
									],
									[
										396026,
										396038
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								385842,
								385842
							]
						],
						"settings":
						{
							"bs_sintax": "find results.hidden-tmlanguage",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 6,
							"result_base_dir": "",
							"result_file_regex": "^([A-Za-z\\\\/<].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 51782.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 25.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 112.0
	},
	"output.find_results":
	{
		"height": 112.0
	},
	"output.git":
	{
		"height": 100.0
	},
	"project": "yodemo.sublime-project",
	"replace":
	{
		"height": 46.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"gruntfile.js",
				"Gruntfile.js"
			],
			[
				"karma",
				"test/karma.conf.coffee"
			],
			[
				"specmain",
				"test/spec/controllers/main.coffee"
			],
			[
				"karmacon",
				"test/karma.conf.coffee"
			],
			[
				"specmain.coff",
				"test/spec/controllers/main.coffee"
			],
			[
				"app.coffe",
				"app/scripts/app.coffee"
			],
			[
				"index",
				"app/index.html"
			],
			[
				"main",
				"app/views/main.html"
			],
			[
				"main.css",
				".tmp/styles/main.css"
			],
			[
				"main.html",
				"app/views/main.html"
			],
			[
				"index.co",
				"app/scripts/controllers/index.coffee"
			],
			[
				"inde",
				"app/index.html"
			],
			[
				"index.of",
				"app/scripts/controllers/index.coffee"
			],
			[
				"app.cof",
				"app/scripts/app.coffee"
			],
			[
				"app.js",
				".tmp/scripts/app.js"
			],
			[
				"main.coffe",
				"app/scripts/controllers/main.coffee"
			],
			[
				"gr",
				"Gruntfile.js"
			],
			[
				"grun",
				"Gruntfile.js"
			],
			[
				"main.h",
				"app/views/main.html"
			],
			[
				"main.js",
				"app/scripts/controllers/main.js"
			],
			[
				"app",
				"app/scripts/app.js"
			],
			[
				"angular-bootstra",
				"bower_components/angular-bootstrap/ui-bootstrap.js"
			],
			[
				"karmaconf",
				"test/karma.conf.js"
			],
			[
				"testspeccontr",
				"test/spec/controllers/main.js"
			],
			[
				"controllermain",
				"app/scripts/controllers/main.js"
			],
			[
				"controller/main",
				"app/scripts/controllers/main.js"
			],
			[
				"about.js",
				"app/scripts/controllers/about.js"
			],
			[
				"appscriptscontr",
				"app/scripts/controllers/main.js"
			],
			[
				"testspeccontrol",
				"test/spec/controllers/main.js"
			],
			[
				"binder",
				"app/assets/stylesheets/binder.css.scss"
			],
			[
				"bin",
				"app/views/static_pages/binder.html.erb"
			],
			[
				"bind",
				"app/views/static_pages/binder.html.erb"
			],
			[
				"contr",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"editormove",
				"spec/acceptance/binder/editor_move_lines_using_hotkeys.coffee"
			],
			[
				"noe",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"noteedi",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"app.j",
				"app/assets/javascripts/binder/js/app.js.coffee"
			],
			[
				"binde",
				"app/views/static_pages/binder.html.erb"
			],
			[
				"notestate",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"noteedit",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"appli",
				"app/assets/javascripts/application.js"
			],
			[
				"contro",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"glboa",
				"spec/acceptance/global_binder.coffee"
			],
			[
				"keynav",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"key",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"notedoc",
				"app/assets/javascripts/binder/js/note_document.js.coffee"
			],
			[
				"nodeed",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"control",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"notenode",
				"app/assets/javascripts/binder/js/note_node.js.coffee"
			],
			[
				"notest",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"noteeditor",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"con",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"drag",
				"vendor/assets/javascripts/angular-dragdrop.js"
			],
			[
				"binder/",
				"spec/acceptance/binder/editor_move_lines.coffee"
			],
			[
				"editorke",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"move",
				"spec/acceptance/binder/editor_move_lines.coffee"
			],
			[
				"gem",
				"Gemfile"
			],
			[
				"keyn",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"notestat",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"nodeedit",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"edi",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"editor",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"notedio",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"controo",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"edio",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"editkey",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"notedo",
				"app/assets/javascripts/binder/js/note_document.js.coffee"
			],
			[
				"editorstate",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"wait",
				"lib/wikipedia_api_article_page_lookup.rb"
			],
			[
				"editorfun",
				"spec/acceptance/notes/editor_functions.coffee"
			],
			[
				"noteed",
				"app/assets/javascripts/binder/js/note_editor.js.coffee"
			],
			[
				"keyna",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"specnote",
				"spec/acceptance/notes/editor_functions.coffee"
			],
			[
				"atwho",
				"vendor/assets/javascripts/jquery.atwho.js"
			],
			[
				"tokencom",
				"app/assets/javascripts/binder/js/token_compiler.js.coffee"
			],
			[
				"keyb",
				"vendor/assets/javascripts/ace/keybinding-emacs.js"
			],
			[
				"noteeditorst",
				"app/assets/javascripts/binder/js/note_editor_state.js.coffee"
			],
			[
				"notedocu",
				"app/assets/javascripts/binder/js/note_document.js.coffee"
			],
			[
				"noteno",
				"app/assets/javascripts/binder/js/note_node.js.coffee"
			],
			[
				"notemode",
				"app/assets/javascripts/binder/js/note_model.js.coffee"
			],
			[
				"notemo",
				"app/assets/javascripts/binder/js/note_model.js.coffee"
			],
			[
				"noteedio",
				"app/assets/javascripts/binder/js/note_editor.coffee"
			],
			[
				"editorst",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"notemodel",
				"app/assets/javascripts/binder/js/note_model.js.coffee"
			],
			[
				"binderap",
				"app/assets/javascripts/binder/js/app.js.coffee"
			],
			[
				"bindercon",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"controller.js",
				"app/assets/javascripts/ng-db/controller.js"
			],
			[
				"specbinder",
				"spec/acceptance/binder/editor_keynav.coffee"
			],
			[
				"specbin",
				"spec/acceptance/global_binder.coffee"
			],
			[
				"applica",
				"app/assets/javascripts/application.js"
			],
			[
				"static",
				"app/assets/javascripts/static_pages_controller.js.coffee"
			],
			[
				"statc",
				"app/controllers/static_pages_controller.rb"
			],
			[
				"caret",
				"vendor/assets/javascripts/jquery.caret-1.5.2.js"
			],
			[
				"bicontroller",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"globa",
				"spec/acceptance/global_binder.coffee"
			],
			[
				"specnotesedi",
				"spec/acceptance/notes/editor_functions.coffee"
			],
			[
				"editstat",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"controll",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"notemoe",
				"app/assets/javascripts/binder/js/note_model.js.coffee"
			],
			[
				"edit",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"noteomde",
				"app/assets/javascripts/binder/js/note_model.js.coffee"
			],
			[
				"ext",
				"vendor/assets/javascripts/ace/ext-language_tools.js"
			],
			[
				"spec/acceptance/notes/ma",
				"spec/acceptance/notes/map.coffee"
			],
			[
				"guidescs",
				"app/assets/stylesheets/guides.css.scss"
			],
			[
				"guide",
				"app/controllers/guides_controller.rb"
			],
			[
				"stati",
				"app/controllers/static_pages_controller.rb"
			],
			[
				"bare",
				"app/views/layouts/bare.html.erb"
			],
			[
				"guidecon",
				"app/controllers/guides_controller.rb"
			],
			[
				"guidesshow",
				"app/views/guides/show.html.erb"
			],
			[
				"guides.css",
				"app/assets/stylesheets/guides.css.scss"
			],
			[
				"notes.css",
				"app/assets/stylesheets/notes.css.scss"
			],
			[
				"application.ht",
				"app/views/layouts/application.html.erb"
			],
			[
				"notesedit",
				"app/views/notes/edit.html.erb"
			],
			[
				"binder.css",
				"app/assets/stylesheets/binder.css.scss"
			],
			[
				"controller",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"statemode",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"bindercss",
				"app/assets/stylesheets/binder.css.scss"
			],
			[
				"bindercontr",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			],
			[
				"useredi",
				"app/views/users/edit.html.erb"
			],
			[
				"binder.cs",
				"app/assets/stylesheets/binder.css.scss"
			],
			[
				"bindercs",
				"app/assets/stylesheets/binder.css.scss"
			],
			[
				"editorsta",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"editst",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"edistate",
				"app/assets/javascripts/binder/js/editor_state_model.js.coffee"
			],
			[
				"binderapp",
				"app/assets/javascripts/binder/js/app.js.coffee"
			],
			[
				"binderapp.js",
				"app/assets/javascripts/binder/js/app.js.coffee"
			],
			[
				"headerno",
				"app/assets/javascripts/binder/js/header_node.js.coffee"
			],
			[
				"bindercontro",
				"app/assets/javascripts/binder/js/controller.js.coffee"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 440.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 189.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
